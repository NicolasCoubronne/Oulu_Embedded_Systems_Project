
TOF VL53L0X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f3c  08008f3c  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  08008f3c  08008f3c  00018f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f44  08008f44  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f48  08008f48  00018f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08008f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000330  0800927c  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  0800927c  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125b4  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229f  00000000  00000000  00032914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00034bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002386e  00000000  00000000  000365a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ad3  00000000  00000000  00059e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d067f  00000000  00000000  0006d8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013df68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff8  00000000  00000000  0013dfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e3c 	.word	0x08008e3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	08008e3c 	.word	0x08008e3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b08d      	sub	sp, #52	; 0x34
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbd7 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f84f 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8e9 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c6:	f000 f8b9 	bl	800073c <MX_I2C1_Init>
	uint8_t PhaseCal;

	// TOF INIT
	VL53L0X_RangingMeasurementData_t RangingData;
	static VL53L0X_Error myStatus = VL53L0X_ERROR_NONE;
	myStatus=TOF1_VL53L0X_Init_Single(&refSpadCount,&isApertureSpads,&VhvSettings,&PhaseCal,0);
 80005ca:	f107 031d 	add.w	r3, r7, #29
 80005ce:	f107 021e 	add.w	r2, r7, #30
 80005d2:	f107 011f 	add.w	r1, r7, #31
 80005d6:	f107 0020 	add.w	r0, r7, #32
 80005da:	2400      	movs	r4, #0
 80005dc:	9400      	str	r4, [sp, #0]
 80005de:	f000 fad1 	bl	8000b84 <TOF1_VL53L0X_Init_Single>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <main+0x9c>)
 80005e8:	701a      	strb	r2, [r3, #0]
	if (myStatus!=VL53L0X_ERROR_NONE) {
 80005ea:	4b19      	ldr	r3, [pc, #100]	; (8000650 <main+0x9c>)
 80005ec:	f993 3000 	ldrsb.w	r3, [r3]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d006      	beq.n	8000602 <main+0x4e>
		printf("TOF1 Initialization Error : %i\r\n", myStatus);
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <main+0x9c>)
 80005f6:	f993 3000 	ldrsb.w	r3, [r3]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4815      	ldr	r0, [pc, #84]	; (8000654 <main+0xa0>)
 80005fe:	f007 fc87 	bl	8007f10 <iprintf>
	}

	TOFX_VL53L0X_LongRangeSettings(TOF1);
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <main+0xa4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fb30 	bl	8000c6c <TOFX_VL53L0X_LongRangeSettings>
	VL53L0X_StartMeasurement (TOF1);
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <main+0xa4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f003 fcd5 	bl	8003fc0 <VL53L0X_StartMeasurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// GET TOF 1
		myStatus = VL53L0X_PerformSingleRangingMeasurement(TOF1, &RangingData);
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <main+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	463a      	mov	r2, r7
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fef4 	bl	800440c <VL53L0X_PerformSingleRangingMeasurement>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b09      	ldr	r3, [pc, #36]	; (8000650 <main+0x9c>)
 800062a:	701a      	strb	r2, [r3, #0]
		if (myStatus!=VL53L0X_ERROR_NONE) {
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <main+0x9c>)
 800062e:	f993 3000 	ldrsb.w	r3, [r3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <main+0x86>
			Error_Handler();
 8000636:	f000 f94f 	bl	80008d8 <Error_Handler>
		}
		if(RangingData.RangeStatus == 0)
 800063a:	7e3b      	ldrb	r3, [r7, #24]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1ea      	bne.n	8000616 <main+0x62>
		{
			int range = RangingData.RangeMilliMeter;
 8000640:	893b      	ldrh	r3, [r7, #8]
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
			printf("distance value : %d", range);
 8000644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0xa8>)
 8000648:	f007 fc62 	bl	8007f10 <iprintf>
		myStatus = VL53L0X_PerformSingleRangingMeasurement(TOF1, &RangingData);
 800064c:	e7e3      	b.n	8000616 <main+0x62>
 800064e:	bf00      	nop
 8000650:	200003a0 	.word	0x200003a0
 8000654:	08008e54 	.word	0x08008e54
 8000658:	20000004 	.word	0x20000004
 800065c:	08008e78 	.word	0x08008e78

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2234      	movs	r2, #52	; 0x34
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 fc46 	bl	8007f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a29      	ldr	r2, [pc, #164]	; (8000734 <SystemClock_Config+0xd4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <SystemClock_Config+0xd4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a0:	2300      	movs	r3, #0
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a22      	ldr	r2, [pc, #136]	; (8000738 <SystemClock_Config+0xd8>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <SystemClock_Config+0xd8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006de:	2304      	movs	r3, #4
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f932 	bl	8002958 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fa:	f000 f8ed 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fde6 	bl	80022ec <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000726:	f000 f8d7 	bl	80008d8 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f000 fe21 	bl	80013c0 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 f8a8 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000034c 	.word	0x2000034c
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b45      	ldr	r3, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a44      	ldr	r2, [pc, #272]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b3e      	ldr	r3, [pc, #248]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_GPIO_Init+0x130>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x130>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <MX_GPIO_Init+0x130>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0x130>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2120      	movs	r1, #32
 8000822:	482a      	ldr	r0, [pc, #168]	; (80008cc <MX_GPIO_Init+0x134>)
 8000824:	f000 fdb2 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF1_XSHUT_GPIO_Port, TOF1_XSHUT_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2110      	movs	r1, #16
 800082c:	4828      	ldr	r0, [pc, #160]	; (80008d0 <MX_GPIO_Init+0x138>)
 800082e:	f000 fdad 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4619      	mov	r1, r3
 8000848:	4821      	ldr	r0, [pc, #132]	; (80008d0 <MX_GPIO_Init+0x138>)
 800084a:	f000 fc0b 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084e:	230c      	movs	r3, #12
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800085e:	2307      	movs	r3, #7
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4818      	ldr	r0, [pc, #96]	; (80008cc <MX_GPIO_Init+0x134>)
 800086a:	f000 fbfb 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	2320      	movs	r3, #32
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <MX_GPIO_Init+0x134>)
 8000886:	f000 fbed 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF1_XSHUT_Pin */
  GPIO_InitStruct.Pin = TOF1_XSHUT_Pin;
 800088a:	2310      	movs	r3, #16
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TOF1_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x138>)
 80008a2:	f000 fbdf 	bl	8001064 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF1_IN_Pin */
  GPIO_InitStruct.Pin = TOF1_IN_Pin;
 80008a6:	2320      	movs	r3, #32
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOF1_IN_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_GPIO_Init+0x13c>)
 80008bc:	f000 fbd2 	bl	8001064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020400 	.word	0x40020400

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fb6a 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <HAL_I2C_MspInit+0x84>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d12c      	bne.n	80009b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a17      	ldr	r2, [pc, #92]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_I2C_MspInit+0x88>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000972:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000978:	2312      	movs	r3, #18
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000980:	2303      	movs	r3, #3
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	4619      	mov	r1, r3
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_I2C_MspInit+0x8c>)
 8000990:	f000 fb68 	bl	8001064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_I2C_MspInit+0x88>)
 800099e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_I2C_MspInit+0x88>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	; 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f9fe 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
  }

  return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
  }
  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ab2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_isatty>:

int _isatty(int file)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <_sbrk+0x5c>)
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_sbrk+0x60>)
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d102      	bne.n	8000b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <_sbrk+0x64>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <_sbrk+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d207      	bcs.n	8000b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b24:	f007 f9b4 	bl	8007e90 <__errno>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	e009      	b.n	8000b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <_sbrk+0x64>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <_sbrk+0x64>)
 8000b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20020000 	.word	0x20020000
 8000b54:	00000400 	.word	0x00000400
 8000b58:	200003a4 	.word	0x200003a4
 8000b5c:	20000590 	.word	0x20000590

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <SystemInit+0x20>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <SystemInit+0x20>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <TOF1_VL53L0X_Init_Single>:
	return status;

}

VL53L0X_Error TOF1_VL53L0X_Init_Single(uint32_t* refSpadCount,uint8_t* isApertureSpads,uint8_t* VhvSettings,uint8_t* PhaseCal, uint8_t mode)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	603b      	str	r3, [r7, #0]
	TOF1->I2cHandle = &HandleI2C;
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a33      	ldr	r2, [pc, #204]	; (8000c64 <TOF1_VL53L0X_Init_Single+0xe0>)
 8000b98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	TOF1->I2cDevAddr = I2cDevAddr_TOF1;
 8000b9c:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2252      	movs	r2, #82	; 0x52
 8000ba2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(TOF1_XSHUT_GPIO_Port, TOF1_XSHUT_Pin, GPIO_PIN_RESET); // Disable XSHUT
 8000baa:	2200      	movs	r2, #0
 8000bac:	2110      	movs	r1, #16
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <TOF1_VL53L0X_Init_Single+0xe4>)
 8000bb0:	f000 fbec 	bl	800138c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000bb4:	2014      	movs	r0, #20
 8000bb6:	f000 f94b 	bl	8000e50 <HAL_Delay>
	HAL_GPIO_WritePin(TOF1_XSHUT_GPIO_Port, TOF1_XSHUT_Pin, GPIO_PIN_SET); // Enable XSHUT
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	482a      	ldr	r0, [pc, #168]	; (8000c68 <TOF1_VL53L0X_Init_Single+0xe4>)
 8000bc0:	f000 fbe4 	bl	800138c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000bc4:	2014      	movs	r0, #20
 8000bc6:	f000 f943 	bl	8000e50 <HAL_Delay>

	//Device initialization
	VL53L0X_WaitDeviceBooted( TOF1 );
 8000bca:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fc5a 	bl	8003488 <VL53L0X_WaitDeviceBooted>
	status = VL53L0X_DataInit( TOF1 );
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f96f 	bl	8002ebc <VL53L0X_DataInit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	75fb      	strb	r3, [r7, #23]
	if (status!=VL53L0X_ERROR_NONE) return status;
 8000be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <TOF1_VL53L0X_Init_Single+0x6c>
 8000bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bee:	e032      	b.n	8000c56 <TOF1_VL53L0X_Init_Single+0xd2>
	VL53L0X_StaticInit( TOF1 );
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f002 fac5 	bl	8003184 <VL53L0X_StaticInit>
	//SPADs calibration
	VL53L0X_PerformRefSpadManagement(TOF1, refSpadCount, isApertureSpads);
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f003 fdee 	bl	80047e4 <VL53L0X_PerformRefSpadManagement>
	//Temperature calibration
	VL53L0X_PerformRefCalibration(TOF1, VhvSettings, PhaseCal);
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 f959 	bl	8003ec8 <VL53L0X_PerformRefCalibration>
	//System settings: Mode Single Ranging
	if (mode==0) status=VL53L0X_SetDeviceMode(TOF1, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000c16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d108      	bne.n	8000c30 <TOF1_VL53L0X_Init_Single+0xac>
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f002 fccd 	bl	80035c4 <VL53L0X_SetDeviceMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75fb      	strb	r3, [r7, #23]
 8000c2e:	e010      	b.n	8000c52 <TOF1_VL53L0X_Init_Single+0xce>
	else{
		VL53L0X_SetDeviceMode(TOF1, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fcc4 	bl	80035c4 <VL53L0X_SetDeviceMode>
		status = VL53L0X_SetGpioConfig (TOF1, TOF1_IN_Pin,  VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,  VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY,  VL53L0X_INTERRUPTPOLARITY_HIGH);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <TOF1_VL53L0X_Init_Single+0xdc>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	2304      	movs	r3, #4
 8000c46:	2201      	movs	r2, #1
 8000c48:	2120      	movs	r1, #32
 8000c4a:	f003 fc0f 	bl	800446c <VL53L0X_SetGpioConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8000c52:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000004 	.word	0x20000004
 8000c64:	2000034c 	.word	0x2000034c
 8000c68:	40020800 	.word	0x40020800

08000c6c <TOFX_VL53L0X_LongRangeSettings>:
	return status;

}

void TOFX_VL53L0X_LongRangeSettings(VL53L0X_DEV TOFX)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	73fb      	strb	r3, [r7, #15]

	status = VL53L0X_SetLimitCheckEnable(TOFX, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f002 ff1d 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L0X_ERROR_NONE) {
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d106      	bne.n	8000c9c <TOFX_VL53L0X_LongRangeSettings+0x30>
		status = VL53L0X_SetLimitCheckEnable(TOFX, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2101      	movs	r1, #1
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f002 ff12 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	73fb      	strb	r3, [r7, #15]
	}
	if (status == VL53L0X_ERROR_NONE) {
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d107      	bne.n	8000cb4 <TOFX_VL53L0X_LongRangeSettings+0x48>
		status = VL53L0X_SetLimitCheckValue(TOFX,VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,(FixPoint1616_t)(0.1*65536));
 8000ca4:	f641 1299 	movw	r2, #6553	; 0x1999
 8000ca8:	2101      	movs	r1, #1
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f002 ffb6 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	}
	if (status == VL53L0X_ERROR_NONE) {
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d107      	bne.n	8000ccc <TOFX_VL53L0X_LongRangeSettings+0x60>
		status = VL53L0X_SetLimitCheckValue(TOFX,VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,(FixPoint1616_t)(60*65536));
 8000cbc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f002 ffaa 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]
	}
	if (status == VL53L0X_ERROR_NONE) {
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <TOFX_VL53L0X_LongRangeSettings+0x76>
		status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(TOFX,33000);
 8000cd4:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f002 fcd1 	bl	8003680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	73fb      	strb	r3, [r7, #15]
	}
	if (status == VL53L0X_ERROR_NONE) {
 8000ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <TOFX_VL53L0X_LongRangeSettings+0x8c>
		status = VL53L0X_SetVcselPulsePeriod(TOFX,VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000cea:	2212      	movs	r2, #18
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f002 fcec 	bl	80036cc <VL53L0X_SetVcselPulsePeriod>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73fb      	strb	r3, [r7, #15]
	}
	if (status == VL53L0X_ERROR_NONE) {
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d106      	bne.n	8000d0e <TOFX_VL53L0X_LongRangeSettings+0xa2>
		status = VL53L0X_SetVcselPulsePeriod(TOFX,VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000d00:	220e      	movs	r2, #14
 8000d02:	2101      	movs	r1, #1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f002 fce1 	bl	80036cc <VL53L0X_SetVcselPulsePeriod>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d1e:	490e      	ldr	r1, [pc, #56]	; (8000d58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d34:	4c0b      	ldr	r4, [pc, #44]	; (8000d64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d42:	f7ff ff0d 	bl	8000b60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f007 f8a9 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fc33 	bl	80005b4 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8000d5c:	08008f4c 	.word	0x08008f4c
  ldr r2, =_sbss
 8000d60:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8000d64:	2000058c 	.word	0x2000058c

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f931 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fda0 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f93b 	bl	800104a <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f911 	bl	8001012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	20000538 	.word	0x20000538

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000538 	.word	0x20000538

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000000c 	.word	0x2000000c

08000e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <__NVIC_SetPriorityGrouping+0x44>)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	f003 0307 	and.w	r3, r3, #7
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	; (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	; (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	; 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff47 	bl	8000e98 <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001024:	f7ff ff5c 	bl	8000ee0 <__NVIC_GetPriorityGrouping>
 8001028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6978      	ldr	r0, [r7, #20]
 8001030:	f7ff ff8e 	bl	8000f50 <NVIC_EncodePriority>
 8001034:	4602      	mov	r2, r0
 8001036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff5d 	bl	8000efc <__NVIC_SetPriority>
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffb0 	bl	8000fb8 <SysTick_Config>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e165      	b.n	800134c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	429a      	cmp	r2, r3
 800109a:	f040 8154 	bne.w	8001346 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d130      	bne.n	8001118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 0201 	and.w	r2, r3, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b03      	cmp	r3, #3
 8001122:	d017      	beq.n	8001154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d123      	bne.n	80011a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691a      	ldr	r2, [r3, #16]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	08da      	lsrs	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3208      	adds	r2, #8
 80011a2:	69b9      	ldr	r1, [r7, #24]
 80011a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0203 	and.w	r2, r3, #3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80ae 	beq.w	8001346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b5d      	ldr	r3, [pc, #372]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a5c      	ldr	r2, [pc, #368]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <HAL_GPIO_Init+0x300>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	220f      	movs	r2, #15
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x308>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d025      	beq.n	800127e <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x30c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d01f      	beq.n	800127a <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x310>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x314>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x20e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x318>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x20a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x31c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x206>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x320>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x202>
 8001262:	2306      	movs	r3, #6
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001266:	2307      	movs	r3, #7
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x21c>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_GPIO_Init+0x324>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x324>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x324>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae96 	bls.w	8001080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40013c00 	.word	0x40013c00

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a8:	e003      	b.n	80013b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	041a      	lsls	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e12b      	b.n	800162a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff faa4 	bl	8000934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001424:	f001 f854 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a81      	ldr	r2, [pc, #516]	; (8001634 <HAL_I2C_Init+0x274>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d807      	bhi.n	8001444 <HAL_I2C_Init+0x84>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a80      	ldr	r2, [pc, #512]	; (8001638 <HAL_I2C_Init+0x278>)
 8001438:	4293      	cmp	r3, r2
 800143a:	bf94      	ite	ls
 800143c:	2301      	movls	r3, #1
 800143e:	2300      	movhi	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	e006      	b.n	8001452 <HAL_I2C_Init+0x92>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a7d      	ldr	r2, [pc, #500]	; (800163c <HAL_I2C_Init+0x27c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e0e7      	b.n	800162a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4a78      	ldr	r2, [pc, #480]	; (8001640 <HAL_I2C_Init+0x280>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_I2C_Init+0x274>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d802      	bhi.n	8001494 <HAL_I2C_Init+0xd4>
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	3301      	adds	r3, #1
 8001492:	e009      	b.n	80014a8 <HAL_I2C_Init+0xe8>
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	4a69      	ldr	r2, [pc, #420]	; (8001644 <HAL_I2C_Init+0x284>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	3301      	adds	r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6812      	ldr	r2, [r2, #0]
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	495c      	ldr	r1, [pc, #368]	; (8001634 <HAL_I2C_Init+0x274>)
 80014c4:	428b      	cmp	r3, r1
 80014c6:	d819      	bhi.n	80014fc <HAL_I2C_Init+0x13c>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e59      	subs	r1, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d6:	1c59      	adds	r1, r3, #1
 80014d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014dc:	400b      	ands	r3, r1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00a      	beq.n	80014f8 <HAL_I2C_Init+0x138>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1e59      	subs	r1, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	3301      	adds	r3, #1
 80014f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f6:	e051      	b.n	800159c <HAL_I2C_Init+0x1dc>
 80014f8:	2304      	movs	r3, #4
 80014fa:	e04f      	b.n	800159c <HAL_I2C_Init+0x1dc>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_I2C_Init+0x168>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1e58      	subs	r0, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	440b      	add	r3, r1
 8001512:	fbb0 f3f3 	udiv	r3, r0, r3
 8001516:	3301      	adds	r3, #1
 8001518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	e012      	b.n	800154e <HAL_I2C_Init+0x18e>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x196>
 8001552:	2301      	movs	r3, #1
 8001554:	e022      	b.n	800159c <HAL_I2C_Init+0x1dc>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10e      	bne.n	800157c <HAL_I2C_Init+0x1bc>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	1e58      	subs	r0, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6859      	ldr	r1, [r3, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001570:	3301      	adds	r3, #1
 8001572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157a:	e00f      	b.n	800159c <HAL_I2C_Init+0x1dc>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	6809      	ldr	r1, [r1, #0]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69da      	ldr	r2, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6911      	ldr	r1, [r2, #16]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68d2      	ldr	r2, [r2, #12]
 80015d6:	4311      	orrs	r1, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	000186a0 	.word	0x000186a0
 8001638:	001e847f 	.word	0x001e847f
 800163c:	003d08ff 	.word	0x003d08ff
 8001640:	431bde83 	.word	0x431bde83
 8001644:	10624dd3 	.word	0x10624dd3

08001648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af02      	add	r7, sp, #8
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	460b      	mov	r3, r1
 8001656:	817b      	strh	r3, [r7, #10]
 8001658:	4613      	mov	r3, r2
 800165a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff fbec 	bl	8000e38 <HAL_GetTick>
 8001660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b20      	cmp	r3, #32
 800166c:	f040 80e0 	bne.w	8001830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2319      	movs	r3, #25
 8001676:	2201      	movs	r2, #1
 8001678:	4970      	ldr	r1, [pc, #448]	; (800183c <HAL_I2C_Master_Transmit+0x1f4>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fc58 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001686:	2302      	movs	r3, #2
 8001688:	e0d3      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x50>
 8001694:	2302      	movs	r3, #2
 8001696:	e0cc      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d007      	beq.n	80016be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2221      	movs	r2, #33	; 0x21
 80016d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2210      	movs	r2, #16
 80016da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	893a      	ldrh	r2, [r7, #8]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_I2C_Master_Transmit+0x1f8>)
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001700:	8979      	ldrh	r1, [r7, #10]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fac2 	bl	8001c90 <I2C_MasterRequestWrite>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e08d      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800172c:	e066      	b.n	80017fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fcd2 	bl	80020dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00d      	beq.n	800175a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b04      	cmp	r3, #4
 8001744:	d107      	bne.n	8001756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e06b      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	781a      	ldrb	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b04      	cmp	r3, #4
 8001796:	d11b      	bne.n	80017d0 <HAL_I2C_Master_Transmit+0x188>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d017      	beq.n	80017d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fcc2 	bl	800215e <I2C_WaitOnBTFFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00d      	beq.n	80017fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d107      	bne.n	80017f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e01a      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d194      	bne.n	800172e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2220      	movs	r2, #32
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	00100002 	.word	0x00100002
 8001840:	ffff0000 	.word	0xffff0000

08001844 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	461a      	mov	r2, r3
 8001850:	460b      	mov	r3, r1
 8001852:	817b      	strh	r3, [r7, #10]
 8001854:	4613      	mov	r3, r2
 8001856:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff faee 	bl	8000e38 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b20      	cmp	r3, #32
 8001868:	f040 820b 	bne.w	8001c82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2319      	movs	r3, #25
 8001872:	2201      	movs	r2, #1
 8001874:	497c      	ldr	r1, [pc, #496]	; (8001a68 <HAL_I2C_Master_Receive+0x224>)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 fb5a 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001882:	2302      	movs	r3, #2
 8001884:	e1fe      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_I2C_Master_Receive+0x50>
 8001890:	2302      	movs	r3, #2
 8001892:	e1f7      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d007      	beq.n	80018ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0201 	orr.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2222      	movs	r2, #34	; 0x22
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2210      	movs	r2, #16
 80018d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	893a      	ldrh	r2, [r7, #8]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_I2C_Master_Receive+0x228>)
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018fc:	8979      	ldrh	r1, [r7, #10]
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 fa46 	bl	8001d94 <I2C_MasterRequestRead>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e1b8      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	d113      	bne.n	8001942 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e18c      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b01      	cmp	r3, #1
 8001948:	d11b      	bne.n	8001982 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e16c      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	2b02      	cmp	r3, #2
 8001988:	d11b      	bne.n	80019c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001998:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	e14c      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019e8:	e138      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	f200 80f1 	bhi.w	8001bd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d123      	bne.n	8001a44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fbed 	bl	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e139      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a42:	e10b      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d14e      	bne.n	8001aea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a52:	2200      	movs	r2, #0
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <HAL_I2C_Master_Receive+0x22c>)
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fa6a 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e10e      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
 8001a66:	bf00      	nop
 8001a68:	00100002 	.word	0x00100002
 8001a6c:	ffff0000 	.word	0xffff0000
 8001a70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ae8:	e0b8      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	4966      	ldr	r1, [pc, #408]	; (8001c8c <HAL_I2C_Master_Receive+0x448>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fa1b 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0bf      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	494f      	ldr	r1, [pc, #316]	; (8001c8c <HAL_I2C_Master_Receive+0x448>)
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f9ed 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e091      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd4:	e042      	b.n	8001c5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fb00 	bl	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e04c      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d118      	bne.n	8001c5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f47f aec2 	bne.w	80019ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3728      	adds	r7, #40	; 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	00010004 	.word	0x00010004

08001c90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d006      	beq.n	8001cba <I2C_MasterRequestWrite+0x2a>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d003      	beq.n	8001cba <I2C_MasterRequestWrite+0x2a>
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cb8:	d108      	bne.n	8001ccc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e00b      	b.n	8001ce4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	d107      	bne.n	8001ce4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 f91d 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d00d      	beq.n	8001d18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d0a:	d103      	bne.n	8001d14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e035      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d20:	d108      	bne.n	8001d34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d22:	897b      	ldrh	r3, [r7, #10]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e01b      	b.n	8001d6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d34:	897b      	ldrh	r3, [r7, #10]
 8001d36:	11db      	asrs	r3, r3, #7
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	f003 0306 	and.w	r3, r3, #6
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f063 030f 	orn	r3, r3, #15
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	490e      	ldr	r1, [pc, #56]	; (8001d8c <I2C_MasterRequestWrite+0xfc>)
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f943 	bl	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e010      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d62:	897b      	ldrh	r3, [r7, #10]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <I2C_MasterRequestWrite+0x100>)
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f933 	bl	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	00010008 	.word	0x00010008
 8001d90:	00010002 	.word	0x00010002

08001d94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	460b      	mov	r3, r1
 8001da2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001db8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d006      	beq.n	8001dce <I2C_MasterRequestRead+0x3a>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d003      	beq.n	8001dce <I2C_MasterRequestRead+0x3a>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dcc:	d108      	bne.n	8001de0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e00b      	b.n	8001df8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	2b11      	cmp	r3, #17
 8001de6:	d107      	bne.n	8001df8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f893 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00d      	beq.n	8001e2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1e:	d103      	bne.n	8001e28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e079      	b.n	8001f20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e34:	d108      	bne.n	8001e48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	611a      	str	r2, [r3, #16]
 8001e46:	e05f      	b.n	8001f08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e48:	897b      	ldrh	r3, [r7, #10]
 8001e4a:	11db      	asrs	r3, r3, #7
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 0306 	and.w	r3, r3, #6
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f063 030f 	orn	r3, r3, #15
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4930      	ldr	r1, [pc, #192]	; (8001f28 <I2C_MasterRequestRead+0x194>)
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f8b9 	bl	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e054      	b.n	8001f20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e76:	897b      	ldrh	r3, [r7, #10]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4929      	ldr	r1, [pc, #164]	; (8001f2c <I2C_MasterRequestRead+0x198>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f8a9 	bl	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e044      	b.n	8001f20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f831 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee2:	d103      	bne.n	8001eec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e017      	b.n	8001f20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ef0:	897b      	ldrh	r3, [r7, #10]
 8001ef2:	11db      	asrs	r3, r3, #7
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0306 	and.w	r3, r3, #6
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f063 030e 	orn	r3, r3, #14
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4907      	ldr	r1, [pc, #28]	; (8001f2c <I2C_MasterRequestRead+0x198>)
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f865 	bl	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010008 	.word	0x00010008
 8001f2c:	00010002 	.word	0x00010002

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e025      	b.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d021      	beq.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7fe ff75 	bl	8000e38 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d116      	bne.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f043 0220 	orr.w	r2, r3, #32
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e023      	b.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d10d      	bne.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	e00c      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d0b6      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fec:	e051      	b.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ffc:	d123      	bne.n	8002046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2220      	movs	r2, #32
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f043 0204 	orr.w	r2, r3, #4
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e046      	b.n	80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d021      	beq.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204e:	f7fe fef3 	bl	8000e38 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d302      	bcc.n	8002064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f043 0220 	orr.w	r2, r3, #32
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e020      	b.n	80020d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10c      	bne.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4013      	ands	r3, r2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	e00b      	b.n	80020ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	43da      	mvns	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d18d      	bne.n	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e8:	e02d      	b.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f8ce 	bl	800228c <I2C_IsAcknowledgeFailed>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e02d      	b.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d021      	beq.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002102:	f7fe fe99 	bl	8000e38 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	429a      	cmp	r2, r3
 8002110:	d302      	bcc.n	8002118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e007      	b.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d1ca      	bne.n	80020ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800216a:	e02d      	b.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f88d 	bl	800228c <I2C_IsAcknowledgeFailed>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e02d      	b.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d021      	beq.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002184:	f7fe fe58 	bl	8000e38 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	d302      	bcc.n	800219a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e007      	b.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d1ca      	bne.n	800216c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021ec:	e042      	b.n	8002274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d119      	bne.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e029      	b.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002230:	f7fe fe02 	bl	8000e38 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	429a      	cmp	r2, r3
 800223e:	d302      	bcc.n	8002246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d116      	bne.n	8002274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f043 0220 	orr.w	r2, r3, #32
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e007      	b.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d1b5      	bne.n	80021ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d11b      	bne.n	80022dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	f043 0204 	orr.w	r2, r3, #4
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fd2c 	bl	8000e38 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fd28 	bl	8000e38 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f841 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490a      	ldr	r1, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fc8c 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08008e8c 	.word	0x08008e8c
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000008 	.word	0x20000008

080024b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCC_GetHCLKFreq+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08008e9c 	.word	0x08008e9c

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b0ae      	sub	sp, #184	; 0xb8
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251e:	4bcb      	ldr	r3, [pc, #812]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b0c      	cmp	r3, #12
 8002528:	f200 8206 	bhi.w	8002938 <HAL_RCC_GetSysClockFreq+0x440>
 800252c:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <HAL_RCC_GetSysClockFreq+0x3c>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	08002569 	.word	0x08002569
 8002538:	08002939 	.word	0x08002939
 800253c:	08002939 	.word	0x08002939
 8002540:	08002939 	.word	0x08002939
 8002544:	08002571 	.word	0x08002571
 8002548:	08002939 	.word	0x08002939
 800254c:	08002939 	.word	0x08002939
 8002550:	08002939 	.word	0x08002939
 8002554:	08002579 	.word	0x08002579
 8002558:	08002939 	.word	0x08002939
 800255c:	08002939 	.word	0x08002939
 8002560:	08002939 	.word	0x08002939
 8002564:	08002769 	.word	0x08002769
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4bb9      	ldr	r3, [pc, #740]	; (8002850 <HAL_RCC_GetSysClockFreq+0x358>)
 800256a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800256e:	e1e7      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4bb8      	ldr	r3, [pc, #736]	; (8002854 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002576:	e1e3      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002578:	4bb4      	ldr	r3, [pc, #720]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002580:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4bb1      	ldr	r3, [pc, #708]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d071      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4bae      	ldr	r3, [pc, #696]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	099b      	lsrs	r3, r3, #6
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800259c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025b6:	4622      	mov	r2, r4
 80025b8:	462b      	mov	r3, r5
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4621      	mov	r1, r4
 80025d0:	1a51      	subs	r1, r2, r1
 80025d2:	6439      	str	r1, [r7, #64]	; 0x40
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb63 0301 	sbc.w	r3, r3, r1
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80025e8:	4649      	mov	r1, r9
 80025ea:	018b      	lsls	r3, r1, #6
 80025ec:	4641      	mov	r1, r8
 80025ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025f2:	4641      	mov	r1, r8
 80025f4:	018a      	lsls	r2, r1, #6
 80025f6:	4641      	mov	r1, r8
 80025f8:	1a51      	subs	r1, r2, r1
 80025fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80025fc:	4649      	mov	r1, r9
 80025fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002610:	4649      	mov	r1, r9
 8002612:	00cb      	lsls	r3, r1, #3
 8002614:	4641      	mov	r1, r8
 8002616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261a:	4641      	mov	r1, r8
 800261c:	00ca      	lsls	r2, r1, #3
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4603      	mov	r3, r0
 8002624:	4622      	mov	r2, r4
 8002626:	189b      	adds	r3, r3, r2
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
 800262a:	462b      	mov	r3, r5
 800262c:	460a      	mov	r2, r1
 800262e:	eb42 0303 	adc.w	r3, r2, r3
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002640:	4629      	mov	r1, r5
 8002642:	024b      	lsls	r3, r1, #9
 8002644:	4621      	mov	r1, r4
 8002646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800264a:	4621      	mov	r1, r4
 800264c:	024a      	lsls	r2, r1, #9
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002656:	2200      	movs	r2, #0
 8002658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800265c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002660:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002664:	f7fd fe24 	bl	80002b0 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002672:	e067      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002680:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268c:	67bb      	str	r3, [r7, #120]	; 0x78
 800268e:	2300      	movs	r3, #0
 8002690:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002692:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80026c8:	4649      	mov	r1, r9
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4641      	mov	r1, r8
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4641      	mov	r1, r8
 80026d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80026dc:	4649      	mov	r1, r9
 80026de:	eb63 0b01 	sbc.w	fp, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f6:	4692      	mov	sl, r2
 80026f8:	469b      	mov	fp, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	462b      	mov	r3, r5
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002716:	4629      	mov	r1, r5
 8002718:	028b      	lsls	r3, r1, #10
 800271a:	4621      	mov	r1, r4
 800271c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002720:	4621      	mov	r1, r4
 8002722:	028a      	lsls	r2, r1, #10
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800272c:	2200      	movs	r2, #0
 800272e:	673b      	str	r3, [r7, #112]	; 0x70
 8002730:	677a      	str	r2, [r7, #116]	; 0x74
 8002732:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002736:	f7fd fdbb 	bl	80002b0 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4613      	mov	r3, r2
 8002740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	3301      	adds	r3, #1
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800275e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002766:	e0eb      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002774:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d06b      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	66bb      	str	r3, [r7, #104]	; 0x68
 800278a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800278c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	663b      	str	r3, [r7, #96]	; 0x60
 8002794:	2300      	movs	r3, #0
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
 8002798:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	0159      	lsls	r1, r3, #5
 80027aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ae:	0150      	lsls	r0, r2, #5
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4621      	mov	r1, r4
 80027b6:	1a51      	subs	r1, r2, r1
 80027b8:	61b9      	str	r1, [r7, #24]
 80027ba:	4629      	mov	r1, r5
 80027bc:	eb63 0301 	sbc.w	r3, r3, r1
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ce:	4659      	mov	r1, fp
 80027d0:	018b      	lsls	r3, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d8:	4651      	mov	r1, sl
 80027da:	018a      	lsls	r2, r1, #6
 80027dc:	4651      	mov	r1, sl
 80027de:	ebb2 0801 	subs.w	r8, r2, r1
 80027e2:	4659      	mov	r1, fp
 80027e4:	eb63 0901 	sbc.w	r9, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fc:	4690      	mov	r8, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	4623      	mov	r3, r4
 8002802:	eb18 0303 	adds.w	r3, r8, r3
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	462b      	mov	r3, r5
 800280a:	eb49 0303 	adc.w	r3, r9, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800281c:	4629      	mov	r1, r5
 800281e:	024b      	lsls	r3, r1, #9
 8002820:	4621      	mov	r1, r4
 8002822:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002826:	4621      	mov	r1, r4
 8002828:	024a      	lsls	r2, r1, #9
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002832:	2200      	movs	r2, #0
 8002834:	65bb      	str	r3, [r7, #88]	; 0x58
 8002836:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002838:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800283c:	f7fd fd38 	bl	80002b0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800284a:	e065      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x420>
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	4618      	mov	r0, r3
 8002862:	4611      	mov	r1, r2
 8002864:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002868:	653b      	str	r3, [r7, #80]	; 0x50
 800286a:	2300      	movs	r3, #0
 800286c:	657b      	str	r3, [r7, #84]	; 0x54
 800286e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002872:	4642      	mov	r2, r8
 8002874:	464b      	mov	r3, r9
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4641      	mov	r1, r8
 800288c:	1a51      	subs	r1, r2, r1
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	4649      	mov	r1, r9
 8002892:	eb63 0301 	sbc.w	r3, r3, r1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028a4:	4659      	mov	r1, fp
 80028a6:	018b      	lsls	r3, r1, #6
 80028a8:	4651      	mov	r1, sl
 80028aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ae:	4651      	mov	r1, sl
 80028b0:	018a      	lsls	r2, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	1a54      	subs	r4, r2, r1
 80028b6:	4659      	mov	r1, fp
 80028b8:	eb63 0501 	sbc.w	r5, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	00eb      	lsls	r3, r5, #3
 80028c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ca:	00e2      	lsls	r2, r4, #3
 80028cc:	4614      	mov	r4, r2
 80028ce:	461d      	mov	r5, r3
 80028d0:	4643      	mov	r3, r8
 80028d2:	18e3      	adds	r3, r4, r3
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	464b      	mov	r3, r9
 80028d8:	eb45 0303 	adc.w	r3, r5, r3
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ea:	4629      	mov	r1, r5
 80028ec:	028b      	lsls	r3, r1, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f4:	4621      	mov	r1, r4
 80028f6:	028a      	lsls	r2, r1, #10
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002900:	2200      	movs	r2, #0
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48
 8002904:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002906:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800290a:	f7fd fcd1 	bl	80002b0 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4613      	mov	r3, r2
 8002914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002918:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_GetSysClockFreq+0x458>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0f1b      	lsrs	r3, r3, #28
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800292a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800292e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002932:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002936:	e003      	b.n	8002940 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCC_GetSysClockFreq+0x45c>)
 800293a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800293e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002940:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002944:	4618      	mov	r0, r3
 8002946:	37b8      	adds	r7, #184	; 0xb8
 8002948:	46bd      	mov	sp, r7
 800294a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	40023800 	.word	0x40023800
 8002954:	00f42400 	.word	0x00f42400

08002958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e28d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8083 	beq.w	8002a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002978:	4b94      	ldr	r3, [pc, #592]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b04      	cmp	r3, #4
 8002982:	d019      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002984:	4b91      	ldr	r3, [pc, #580]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800298c:	2b08      	cmp	r3, #8
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002990:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299c:	d00c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d112      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b84      	ldr	r3, [pc, #528]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_RCC_OscConfig+0x124>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d157      	bne.n	8002a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e25a      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x90>
 80029da:	4b7c      	ldr	r3, [pc, #496]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e01d      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d10c      	bne.n	8002a0c <HAL_RCC_OscConfig+0xb4>
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a75      	ldr	r2, [pc, #468]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a72      	ldr	r2, [pc, #456]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e00b      	b.n	8002a24 <HAL_RCC_OscConfig+0xcc>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4b6c      	ldr	r3, [pc, #432]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a6b      	ldr	r2, [pc, #428]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fa04 	bl	8000e38 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fa00 	bl	8000e38 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e21f      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0xdc>
 8002a52:	e014      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe f9f0 	bl	8000e38 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe f9ec 	bl	8000e38 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e20b      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6e:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x104>
 8002a7a:	e000      	b.n	8002a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d06f      	beq.n	8002b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a8a:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d017      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a96:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d105      	bne.n	8002aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1d3      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4937      	ldr	r1, [pc, #220]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b34      	ldr	r3, [pc, #208]	; (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7fe f999 	bl	8000e38 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe f995 	bl	8000e38 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1b4      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4925      	ldr	r1, [pc, #148]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_OscConfig+0x278>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f978 	bl	8000e38 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7fe f974 	bl	8000e38 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e193      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d036      	beq.n	8002be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7fe f958 	bl	8000e38 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7fe f954 	bl	8000e38 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e173      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_OscConfig+0x274>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x234>
 8002baa:	e01b      	b.n	8002be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe f941 	bl	8000e38 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e00e      	b.n	8002bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe f93d 	bl	8000e38 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d907      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e15c      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	42470000 	.word	0x42470000
 8002bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	4b8a      	ldr	r3, [pc, #552]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ea      	bne.n	8002bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8097 	beq.w	8002d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b7f      	ldr	r3, [pc, #508]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f8fd 	bl	8000e38 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c42:	f7fe f8f9 	bl	8000e38 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e118      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c54:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x4b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x31e>
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	; 0x70
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x340>
 8002c7e:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	4a60      	ldr	r2, [pc, #384]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	6713      	str	r3, [r2, #112]	; 0x70
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c98:	4b5a      	ldr	r3, [pc, #360]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a59      	ldr	r2, [pc, #356]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	4b57      	ldr	r3, [pc, #348]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a56      	ldr	r2, [pc, #344]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	f023 0304 	bic.w	r3, r3, #4
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe f8be 	bl	8000e38 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f8ba 	bl	8000e38 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0d7      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cd6:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0ee      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x368>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f8a8 	bl	8000e38 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cec:	f7fe f8a4 	bl	8000e38 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e0c1      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d02:	4b40      	ldr	r3, [pc, #256]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1ee      	bne.n	8002cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d105      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ad 	beq.w	8002e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d2a:	4b36      	ldr	r3, [pc, #216]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d060      	beq.n	8002df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d145      	bne.n	8002dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe f878 	bl	8000e38 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f874 	bl	8000e38 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e093      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b29      	ldr	r3, [pc, #164]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	019b      	lsls	r3, r3, #6
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	3b01      	subs	r3, #1
 8002d84:	041b      	lsls	r3, r3, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	071b      	lsls	r3, r3, #28
 8002d96:	491b      	ldr	r1, [pc, #108]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe f849 	bl	8000e38 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe f845 	bl	8000e38 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e064      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x452>
 8002dc8:	e05c      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x4b4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe f832 	bl	8000e38 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe f82e 	bl	8000e38 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04d      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x480>
 8002df6:	e045      	b.n	8002e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e040      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCC_OscConfig+0x538>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d030      	beq.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d129      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d122      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d119      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10f      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d107      	bne.n	8002e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002ea2:	6839      	ldr	r1, [r7, #0]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f001 fcb2 	bl	800480e <VL53L0X_get_offset_calibration_data_micro_meter>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b096      	sub	sp, #88	; 0x58
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002eca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2188      	movs	r1, #136	; 0x88
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f004 feaa 	bl	8007c30 <VL53L0X_WrByte>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ef0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002efa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a9e      	ldr	r2, [pc, #632]	; (800317c <VL53L0X_DataInit+0x2c0>)
 8002f02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a9d      	ldr	r2, [pc, #628]	; (8003180 <VL53L0X_DataInit+0x2c4>)
 8002f0a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fac2 	bl	80034a4 <VL53L0X_GetDeviceParameters>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8002f26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d112      	bne.n	8002f54 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002f32:	2300      	movs	r3, #0
 8002f34:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f103 0410 	add.w	r4, r3, #16
 8002f3c:	f107 0510 	add.w	r5, r7, #16
 8002f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2264      	movs	r2, #100	; 0x64
 8002f58:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002f62:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f6c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002f76:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002f82:	2201      	movs	r2, #1
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f004 fe52 	bl	8007c30 <VL53L0X_WrByte>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	21ff      	movs	r1, #255	; 0xff
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f004 fe46 	bl	8007c30 <VL53L0X_WrByte>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f004 fe3a 	bl	8007c30 <VL53L0X_WrByte>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8002fca:	f107 030f 	add.w	r3, r7, #15
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2191      	movs	r1, #145	; 0x91
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 feae 	bl	8007d34 <VL53L0X_RdByte>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f004 fe1c 	bl	8007c30 <VL53L0X_WrByte>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003000:	4313      	orrs	r3, r2
 8003002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003006:	2200      	movs	r2, #0
 8003008:	21ff      	movs	r1, #255	; 0xff
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f004 fe10 	bl	8007c30 <VL53L0X_WrByte>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003018:	4313      	orrs	r3, r2
 800301a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800301e:	2200      	movs	r2, #0
 8003020:	2180      	movs	r1, #128	; 0x80
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f004 fe04 	bl	8007c30 <VL53L0X_WrByte>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003030:	4313      	orrs	r3, r2
 8003032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003036:	2300      	movs	r3, #0
 8003038:	653b      	str	r3, [r7, #80]	; 0x50
 800303a:	e014      	b.n	8003066 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800303c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003040:	2b00      	cmp	r3, #0
 8003042:	d114      	bne.n	800306e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003046:	b29b      	uxth	r3, r3
 8003048:	2201      	movs	r2, #1
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fd35 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800305a:	4313      	orrs	r3, r2
 800305c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003062:	3301      	adds	r3, #1
 8003064:	653b      	str	r3, [r7, #80]	; 0x50
 8003066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003068:	2b05      	cmp	r3, #5
 800306a:	dde7      	ble.n	800303c <VL53L0X_DataInit+0x180>
 800306c:	e000      	b.n	8003070 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800306e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003074:	2b00      	cmp	r3, #0
 8003076:	d107      	bne.n	8003088 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003078:	2200      	movs	r2, #0
 800307a:	2102      	movs	r1, #2
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fd1d 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 8003082:	4603      	mov	r3, r0
 8003084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800308c:	2b00      	cmp	r3, #0
 800308e:	d107      	bne.n	80030a0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003090:	2200      	movs	r2, #0
 8003092:	2103      	movs	r1, #3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fd11 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80030a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80030a8:	2200      	movs	r2, #0
 80030aa:	2104      	movs	r1, #4
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fd05 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80030b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80030c0:	2200      	movs	r2, #0
 80030c2:	2105      	movs	r1, #5
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fcf9 	bl	8003abc <VL53L0X_SetLimitCheckEnable>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80030d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80030d8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80030dc:	2100      	movs	r1, #0
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fd9c 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80030ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80030f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f6:	2101      	movs	r1, #1
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fd8f 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 80030fe:	4603      	mov	r3, r0
 8003100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003104:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003108:	2b00      	cmp	r3, #0
 800310a:	d108      	bne.n	800311e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800310c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003110:	2102      	movs	r1, #2
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fd82 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800311e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003126:	2200      	movs	r2, #0
 8003128:	2103      	movs	r1, #3
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fd76 	bl	8003c1c <VL53L0X_SetLimitCheckValue>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003136:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	22ff      	movs	r2, #255	; 0xff
 8003142:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	2101      	movs	r1, #1
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f004 fd70 	bl	8007c30 <VL53L0X_WrByte>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800315e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800316e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003172:	4618      	mov	r0, r3
 8003174:	3758      	adds	r7, #88	; 0x58
 8003176:	46bd      	mov	sp, r7
 8003178:	bdb0      	pop	{r4, r5, r7, pc}
 800317a:	bf00      	nop
 800317c:	00016b85 	.word	0x00016b85
 8003180:	000970a4 	.word	0x000970a4

08003184 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b09e      	sub	sp, #120	; 0x78
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	2240      	movs	r2, #64	; 0x40
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f004 feb0 	bl	8007f00 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80031c0:	2101      	movs	r1, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f002 fa79 	bl	80056ba <VL53L0X_get_info_from_device>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80031d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80031dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80031e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d80d      	bhi.n	8003204 <VL53L0X_StaticInit+0x80>
 80031e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80031f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d806      	bhi.n	8003204 <VL53L0X_StaticInit+0x80>
 80031f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10e      	bne.n	800321c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80031fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d90b      	bls.n	800321c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003204:	f107 0218 	add.w	r2, r7, #24
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f001 fcf8 	bl	8004c04 <VL53L0X_perform_ref_spad_management>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800321a:	e009      	b.n	8003230 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800321c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003220:	461a      	mov	r2, r3
 8003222:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f001 fef9 	bl	800501c <VL53L0X_set_reference_spads>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003230:	4b94      	ldr	r3, [pc, #592]	; (8003484 <VL53L0X_StaticInit+0x300>)
 8003232:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003234:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003242:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003254:	66bb      	str	r3, [r7, #104]	; 0x68
 8003256:	e001      	b.n	800325c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <VL53L0X_StaticInit+0x300>)
 800325a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800325c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003264:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f003 fdcc 	bl	8006e04 <VL53L0X_load_tuning_settings>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003272:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800327a:	2300      	movs	r3, #0
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2304      	movs	r3, #4
 8003280:	2200      	movs	r2, #0
 8003282:	2100      	movs	r1, #0
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f001 f8f1 	bl	800446c <VL53L0X_SetGpioConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003290:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003294:	2b00      	cmp	r3, #0
 8003296:	d121      	bne.n	80032dc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003298:	2201      	movs	r2, #1
 800329a:	21ff      	movs	r1, #255	; 0xff
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f004 fcc7 	bl	8007c30 <VL53L0X_WrByte>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80032a8:	f107 031a 	add.w	r3, r7, #26
 80032ac:	461a      	mov	r2, r3
 80032ae:	2184      	movs	r1, #132	; 0x84
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f004 fd69 	bl	8007d88 <VL53L0X_RdWord>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032be:	4313      	orrs	r3, r2
 80032c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80032c4:	2200      	movs	r2, #0
 80032c6:	21ff      	movs	r1, #255	; 0xff
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 fcb1 	bl	8007c30 <VL53L0X_WrByte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80032dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d105      	bne.n	80032f0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80032e4:	8b7b      	ldrh	r3, [r7, #26]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80032f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f8d0 	bl	80034a4 <VL53L0X_GetDeviceParameters>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800330a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800330e:	2b00      	cmp	r3, #0
 8003310:	d110      	bne.n	8003334 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003312:	f107 0319 	add.w	r3, r7, #25
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f992 	bl	8003642 <VL53L0X_GetFractionEnable>
 800331e:	4603      	mov	r3, r0
 8003320:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003324:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800332c:	7e7a      	ldrb	r2, [r7, #25]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003334:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f103 0410 	add.w	r4, r3, #16
 8003342:	f107 051c 	add.w	r5, r7, #28
 8003346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003348:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003352:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003356:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800335a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800335e:	2b00      	cmp	r3, #0
 8003360:	d111      	bne.n	8003386 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003362:	f107 0319 	add.w	r3, r7, #25
 8003366:	461a      	mov	r2, r3
 8003368:	2101      	movs	r1, #1
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f004 fce2 	bl	8007d34 <VL53L0X_RdByte>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003376:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800337e:	7e7a      	ldrb	r2, [r7, #25]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003386:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800338a:	2b00      	cmp	r3, #0
 800338c:	d107      	bne.n	800339e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800338e:	2200      	movs	r2, #0
 8003390:	2100      	movs	r1, #0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9ca 	bl	800372c <VL53L0X_SetSequenceStepEnable>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800339e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d107      	bne.n	80033b6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80033a6:	2200      	movs	r2, #0
 80033a8:	2102      	movs	r1, #2
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9be 	bl	800372c <VL53L0X_SetSequenceStepEnable>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80033b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d103      	bne.n	80033c6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80033c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80033ce:	f107 0313 	add.w	r3, r7, #19
 80033d2:	461a      	mov	r2, r3
 80033d4:	2100      	movs	r1, #0
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f990 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 80033dc:	4603      	mov	r3, r0
 80033de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80033e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80033ea:	7cfa      	ldrb	r2, [r7, #19]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80033f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80033fa:	f107 0313 	add.w	r3, r7, #19
 80033fe:	461a      	mov	r2, r3
 8003400:	2101      	movs	r1, #1
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f97a 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800340e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003412:	2b00      	cmp	r3, #0
 8003414:	d103      	bne.n	800341e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003416:	7cfa      	ldrb	r2, [r7, #19]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800341e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	461a      	mov	r2, r3
 800342c:	2103      	movs	r1, #3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f002 fec4 	bl	80061bc <get_sequence_step_timeout>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800343a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800343e:	2b00      	cmp	r3, #0
 8003440:	d103      	bne.n	800344a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800344a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d109      	bne.n	8003466 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	461a      	mov	r2, r3
 8003458:	2104      	movs	r1, #4
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f002 feae 	bl	80061bc <get_sequence_step_timeout>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003466:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d103      	bne.n	8003476 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003476:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800347a:	4618      	mov	r0, r3
 800347c:	3770      	adds	r7, #112	; 0x70
 800347e:	46bd      	mov	sp, r7
 8003480:	bdb0      	pop	{r4, r5, r7, pc}
 8003482:	bf00      	nop
 8003484:	200001c8 	.word	0x200001c8

08003488 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8003490:	239d      	movs	r3, #157	; 0x9d
 8003492:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8003494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8b0 	bl	800361c <VL53L0X_GetDeviceMode>
 80034bc:	4603      	mov	r3, r0
 80034be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80034c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	3308      	adds	r3, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa78 	bl	80039c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	3310      	adds	r3, #16
 80034f2:	4619      	mov	r1, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 faae 	bl	8003a56 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	3314      	adds	r3, #20
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fcc1 	bl	8002e94 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8003512:	4603      	mov	r3, r0
 8003514:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d134      	bne.n	8003588 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800351e:	2300      	movs	r3, #0
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	e02a      	b.n	800357a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12a      	bne.n	8003582 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	b299      	uxth	r1, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	3308      	adds	r3, #8
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	461a      	mov	r2, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 fbce 	bl	8003ce0 <VL53L0X_GetLimitCheckValue>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	4313      	orrs	r3, r2
 800354c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d117      	bne.n	8003586 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	b299      	uxth	r1, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3318      	adds	r3, #24
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	461a      	mov	r2, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb35 	bl	8003bd4 <VL53L0X_GetLimitCheckEnable>
 800356a:	4603      	mov	r3, r0
 800356c:	461a      	mov	r2, r3
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	4313      	orrs	r3, r2
 8003572:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3301      	adds	r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b05      	cmp	r3, #5
 800357e:	ddd1      	ble.n	8003524 <VL53L0X_GetDeviceParameters+0x80>
 8003580:	e002      	b.n	8003588 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8003586:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	333c      	adds	r3, #60	; 0x3c
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fc30 	bl	8003dfc <VL53L0X_GetWrapAroundCheckEnable>
 800359c:	4603      	mov	r3, r0
 800359e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80035a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d107      	bne.n	80035b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3304      	adds	r3, #4
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f879 	bl	80036a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80035b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	2b15      	cmp	r3, #21
 80035d8:	bf8c      	ite	hi
 80035da:	2201      	movhi	r2, #1
 80035dc:	2200      	movls	r2, #0
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	2a00      	cmp	r2, #0
 80035e2:	d10e      	bne.n	8003602 <VL53L0X_SetDeviceMode+0x3e>
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <VL53L0X_SetDeviceMode+0x54>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	741a      	strb	r2, [r3, #16]
		break;
 8003600:	e001      	b.n	8003606 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003602:	23f8      	movs	r3, #248	; 0xf8
 8003604:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	0030000b 	.word	0x0030000b

0800361c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7c1a      	ldrb	r2, [r3, #16]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	2109      	movs	r1, #9
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f004 fb6d 	bl	8007d34 <VL53L0X_RdByte>
 800365a:	4603      	mov	r3, r0
 800365c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800365e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800368e:	6839      	ldr	r1, [r7, #0]
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f003 fa26 	bl	8006ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003696:	4603      	mov	r3, r0
 8003698:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f003 faf3 	bl	8006ca2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80036bc:	4603      	mov	r3, r0
 80036be:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80036c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	4613      	mov	r3, r2
 80036da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80036e0:	78ba      	ldrb	r2, [r7, #2]
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f002 ff3b 	bl	8006562 <VL53L0X_set_vcsel_pulse_period>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80036f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	460b      	mov	r3, r1
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4619      	mov	r1, r3
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f003 f9ad 	bl	8006a74 <VL53L0X_get_vcsel_pulse_period>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800371e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
 8003738:	4613      	mov	r3, r2
 800373a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800373c:	2300      	movs	r3, #0
 800373e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003748:	f107 030f 	add.w	r3, r7, #15
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f004 faef 	bl	8007d34 <VL53L0X_RdByte>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800375e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d15a      	bne.n	800381c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8003766:	78bb      	ldrb	r3, [r7, #2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d12b      	bne.n	80037c4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	2b04      	cmp	r3, #4
 8003770:	d825      	bhi.n	80037be <VL53L0X_SetSequenceStepEnable+0x92>
 8003772:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	0800378d 	.word	0x0800378d
 800377c:	08003797 	.word	0x08003797
 8003780:	080037a1 	.word	0x080037a1
 8003784:	080037ab 	.word	0x080037ab
 8003788:	080037b5 	.word	0x080037b5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	f043 0310 	orr.w	r3, r3, #16
 8003792:	75bb      	strb	r3, [r7, #22]
				break;
 8003794:	e043      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8003796:	7dbb      	ldrb	r3, [r7, #22]
 8003798:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800379c:	75bb      	strb	r3, [r7, #22]
				break;
 800379e:	e03e      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80037a0:	7dbb      	ldrb	r3, [r7, #22]
 80037a2:	f043 0304 	orr.w	r3, r3, #4
 80037a6:	75bb      	strb	r3, [r7, #22]
				break;
 80037a8:	e039      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80037aa:	7dbb      	ldrb	r3, [r7, #22]
 80037ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037b0:	75bb      	strb	r3, [r7, #22]
				break;
 80037b2:	e034      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80037b4:	7dbb      	ldrb	r3, [r7, #22]
 80037b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037ba:	75bb      	strb	r3, [r7, #22]
				break;
 80037bc:	e02f      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80037be:	23fc      	movs	r3, #252	; 0xfc
 80037c0:	75fb      	strb	r3, [r7, #23]
 80037c2:	e02c      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d825      	bhi.n	8003816 <VL53L0X_SetSequenceStepEnable+0xea>
 80037ca:	a201      	add	r2, pc, #4	; (adr r2, 80037d0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037e5 	.word	0x080037e5
 80037d4:	080037ef 	.word	0x080037ef
 80037d8:	080037f9 	.word	0x080037f9
 80037dc:	08003803 	.word	0x08003803
 80037e0:	0800380d 	.word	0x0800380d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80037e4:	7dbb      	ldrb	r3, [r7, #22]
 80037e6:	f023 0310 	bic.w	r3, r3, #16
 80037ea:	75bb      	strb	r3, [r7, #22]
				break;
 80037ec:	e017      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80037ee:	7dbb      	ldrb	r3, [r7, #22]
 80037f0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80037f4:	75bb      	strb	r3, [r7, #22]
				break;
 80037f6:	e012      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80037f8:	7dbb      	ldrb	r3, [r7, #22]
 80037fa:	f023 0304 	bic.w	r3, r3, #4
 80037fe:	75bb      	strb	r3, [r7, #22]
				break;
 8003800:	e00d      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8003802:	7dbb      	ldrb	r3, [r7, #22]
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	75bb      	strb	r3, [r7, #22]
				break;
 800380a:	e008      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800380c:	7dbb      	ldrb	r3, [r7, #22]
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	75bb      	strb	r3, [r7, #22]
				break;
 8003814:	e003      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003816:	23fc      	movs	r3, #252	; 0xfc
 8003818:	75fb      	strb	r3, [r7, #23]
 800381a:	e000      	b.n	800381e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800381c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	7dba      	ldrb	r2, [r7, #22]
 8003822:	429a      	cmp	r2, r3
 8003824:	d01e      	beq.n	8003864 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8003826:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800382e:	7dbb      	ldrb	r3, [r7, #22]
 8003830:	461a      	mov	r2, r3
 8003832:	2101      	movs	r1, #1
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f004 f9fb 	bl	8007c30 <VL53L0X_WrByte>
 800383a:	4603      	mov	r3, r0
 800383c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800383e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	7dba      	ldrb	r2, [r7, #22]
 800384a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800384e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ff0e 	bl	8003680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8003864:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	72fb      	strb	r3, [r7, #11]
 800387e:	4613      	mov	r3, r2
 8003880:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003882:	2300      	movs	r3, #0
 8003884:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800388c:	7afb      	ldrb	r3, [r7, #11]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d836      	bhi.n	8003900 <sequence_step_enabled+0x90>
 8003892:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <sequence_step_enabled+0x28>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038ad 	.word	0x080038ad
 800389c:	080038bf 	.word	0x080038bf
 80038a0:	080038d1 	.word	0x080038d1
 80038a4:	080038e3 	.word	0x080038e3
 80038a8:	080038f5 	.word	0x080038f5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80038ac:	7abb      	ldrb	r3, [r7, #10]
 80038ae:	111b      	asrs	r3, r3, #4
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	701a      	strb	r2, [r3, #0]
		break;
 80038bc:	e022      	b.n	8003904 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80038be:	7abb      	ldrb	r3, [r7, #10]
 80038c0:	10db      	asrs	r3, r3, #3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	701a      	strb	r2, [r3, #0]
		break;
 80038ce:	e019      	b.n	8003904 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80038d0:	7abb      	ldrb	r3, [r7, #10]
 80038d2:	109b      	asrs	r3, r3, #2
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	701a      	strb	r2, [r3, #0]
		break;
 80038e0:	e010      	b.n	8003904 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80038e2:	7abb      	ldrb	r3, [r7, #10]
 80038e4:	119b      	asrs	r3, r3, #6
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	701a      	strb	r2, [r3, #0]
		break;
 80038f2:	e007      	b.n	8003904 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80038f4:	7abb      	ldrb	r3, [r7, #10]
 80038f6:	09db      	lsrs	r3, r3, #7
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	701a      	strb	r2, [r3, #0]
		break;
 80038fe:	e001      	b.n	8003904 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003900:	23fc      	movs	r3, #252	; 0xfc
 8003902:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003908:	4618      	mov	r0, r3
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003926:	f107 030e 	add.w	r3, r7, #14
 800392a:	461a      	mov	r2, r3
 800392c:	2101      	movs	r1, #1
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f004 fa00 	bl	8007d34 <VL53L0X_RdByte>
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8003938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8003940:	7bba      	ldrb	r2, [r7, #14]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2100      	movs	r1, #0
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ff92 	bl	8003870 <sequence_step_enabled>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d108      	bne.n	800396a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8003958:	7bba      	ldrb	r2, [r7, #14]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	3302      	adds	r3, #2
 800395e:	2101      	movs	r1, #1
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff85 	bl	8003870 <sequence_step_enabled>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d108      	bne.n	8003984 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8003972:	7bba      	ldrb	r2, [r7, #14]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	2102      	movs	r1, #2
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff78 	bl	8003870 <sequence_step_enabled>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800398c:	7bba      	ldrb	r2, [r7, #14]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3303      	adds	r3, #3
 8003992:	2103      	movs	r1, #3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff6b 	bl	8003870 <sequence_step_enabled>
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80039a6:	7bba      	ldrb	r2, [r7, #14]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	3304      	adds	r3, #4
 80039ac:	2104      	movs	r1, #4
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ff5e 	bl	8003870 <sequence_step_enabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	461a      	mov	r2, r3
 80039d8:	21f8      	movs	r1, #248	; 0xf8
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f004 f9d4 	bl	8007d88 <VL53L0X_RdWord>
 80039e0:	4603      	mov	r3, r0
 80039e2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80039e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80039ec:	f107 0308 	add.w	r3, r7, #8
 80039f0:	461a      	mov	r2, r3
 80039f2:	2104      	movs	r1, #4
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f004 f9ff 	bl	8007df8 <VL53L0X_RdDWord>
 80039fa:	4603      	mov	r3, r0
 80039fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8003a06:	89bb      	ldrh	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	89ba      	ldrh	r2, [r7, #12]
 8003a10:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7f1b      	ldrb	r3, [r3, #28]
 8003a3e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	7bba      	ldrb	r2, [r7, #14]
 8003a44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b086      	sub	sp, #24
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8003a64:	f107 030e 	add.w	r3, r7, #14
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2120      	movs	r1, #32
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f004 f98b 	bl	8007d88 <VL53L0X_RdWord>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8003a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	771a      	strb	r2, [r3, #28]
 8003a96:	e00b      	b.n	8003ab0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d902      	bls.n	8003ae8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003ae2:	23fc      	movs	r3, #252	; 0xfc
 8003ae4:	75fb      	strb	r3, [r7, #23]
 8003ae6:	e05b      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8003ae8:	787b      	ldrb	r3, [r7, #1]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73bb      	strb	r3, [r7, #14]
 8003afa:	e00a      	b.n	8003b12 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	330c      	adds	r3, #12
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d841      	bhi.n	8003b9c <VL53L0X_SetLimitCheckEnable+0xe0>
 8003b18:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <VL53L0X_SetLimitCheckEnable+0x64>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b43 	.word	0x08003b43
 8003b28:	08003b59 	.word	0x08003b59
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b85 	.word	0x08003b85

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003b40:	e02e      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2144      	movs	r1, #68	; 0x44
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f004 f893 	bl	8007c78 <VL53L0X_WrWord>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]

			break;
 8003b56:	e023      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003b60:	e01e      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003b6a:	e019      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003b72:	7b7b      	ldrb	r3, [r7, #13]
 8003b74:	22fe      	movs	r2, #254	; 0xfe
 8003b76:	2160      	movs	r1, #96	; 0x60
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f004 f8a7 	bl	8007ccc <VL53L0X_UpdateByte>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8003b82:	e00d      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003b8a:	7b7b      	ldrb	r3, [r7, #13]
 8003b8c:	22ef      	movs	r2, #239	; 0xef
 8003b8e:	2160      	movs	r1, #96	; 0x60
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f004 f89b 	bl	8007ccc <VL53L0X_UpdateByte>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003b9a:	e001      	b.n	8003ba0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b9c:	23fc      	movs	r3, #252	; 0xfc
 8003b9e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bba:	e005      	b.n	8003bc8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003be6:	897b      	ldrh	r3, [r7, #10]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d905      	bls.n	8003bf8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003bec:	23fc      	movs	r3, #252	; 0xfc
 8003bee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e008      	b.n	8003c0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003bf8:	897b      	ldrh	r3, [r7, #10]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7dba      	ldrb	r2, [r7, #22]
 8003c08:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	460b      	mov	r3, r1
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003c2e:	897b      	ldrh	r3, [r7, #10]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003c3a:	7dbb      	ldrb	r3, [r7, #22]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	330c      	adds	r3, #12
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e040      	b.n	8003cd2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003c50:	897b      	ldrh	r3, [r7, #10]
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d830      	bhi.n	8003cb8 <VL53L0X_SetLimitCheckValue+0x9c>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <VL53L0X_SetLimitCheckValue+0x40>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003c7d 	.word	0x08003c7d
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003ca3 	.word	0x08003ca3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003c7a:	e01f      	b.n	8003cbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	2144      	movs	r1, #68	; 0x44
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f003 fff6 	bl	8007c78 <VL53L0X_WrWord>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003c90:	e014      	b.n	8003cbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003c98:	e010      	b.n	8003cbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003ca0:	e00c      	b.n	8003cbc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2164      	movs	r1, #100	; 0x64
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f003 ffe3 	bl	8007c78 <VL53L0X_WrWord>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003cb6:	e001      	b.n	8003cbc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003cb8:	23fc      	movs	r3, #252	; 0xfc
 8003cba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003cc4:	897b      	ldrh	r3, [r7, #10]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003cd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop

08003ce0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003cf6:	897b      	ldrh	r3, [r7, #10]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d847      	bhi.n	8003d8c <VL53L0X_GetLimitCheckValue+0xac>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <VL53L0X_GetLimitCheckValue+0x24>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d1d 	.word	0x08003d1d
 8003d08:	08003d29 	.word	0x08003d29
 8003d0c:	08003d4f 	.word	0x08003d4f
 8003d10:	08003d5b 	.word	0x08003d5b
 8003d14:	08003d67 	.word	0x08003d67
 8003d18:	08003d67 	.word	0x08003d67

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d20:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003d22:	2300      	movs	r3, #0
 8003d24:	77bb      	strb	r3, [r7, #30]
		break;
 8003d26:	e033      	b.n	8003d90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003d28:	f107 0316 	add.w	r3, r7, #22
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2144      	movs	r1, #68	; 0x44
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f004 f829 	bl	8007d88 <VL53L0X_RdWord>
 8003d36:	4603      	mov	r3, r0
 8003d38:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003d3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	025b      	lsls	r3, r3, #9
 8003d46:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77bb      	strb	r3, [r7, #30]
		break;
 8003d4c:	e020      	b.n	8003d90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	77bb      	strb	r3, [r7, #30]
		break;
 8003d58:	e01a      	b.n	8003d90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77bb      	strb	r3, [r7, #30]
		break;
 8003d64:	e014      	b.n	8003d90 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003d66:	f107 0316 	add.w	r3, r7, #22
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2164      	movs	r1, #100	; 0x64
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f004 f80a 	bl	8007d88 <VL53L0X_RdWord>
 8003d74:	4603      	mov	r3, r0
 8003d76:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003d80:	8afb      	ldrh	r3, [r7, #22]
 8003d82:	025b      	lsls	r3, r3, #9
 8003d84:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	77bb      	strb	r3, [r7, #30]
		break;
 8003d8a:	e001      	b.n	8003d90 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003d8c:	23fc      	movs	r3, #252	; 0xfc
 8003d8e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d12a      	bne.n	8003dee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003d98:	7fbb      	ldrb	r3, [r7, #30]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d124      	bne.n	8003de8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d110      	bne.n	8003dc6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003da4:	897b      	ldrh	r3, [r7, #10]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	330c      	adds	r3, #12
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003db8:	897b      	ldrh	r3, [r7, #10]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003dc4:	e013      	b.n	8003dee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003dcc:	897b      	ldrh	r3, [r7, #10]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003dda:	897b      	ldrh	r3, [r7, #10]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003de6:	e002      	b.n	8003dee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003dee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3720      	adds	r7, #32
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop

08003dfc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003e0a:	f107 030e 	add.w	r3, r7, #14
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2101      	movs	r1, #1
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f003 ff8e 	bl	8007d34 <VL53L0X_RdByte>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10e      	bne.n	8003e42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003e24:	7bba      	ldrb	r2, [r7, #14]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	da03      	bge.n	8003e3c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e002      	b.n	8003e42 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003e6c:	f107 030e 	add.w	r3, r7, #14
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fbd2 	bl	800361c <VL53L0X_GetDeviceMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d107      	bne.n	8003e94 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003e84:	7bbb      	ldrb	r3, [r7, #14]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d104      	bne.n	8003e94 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f898 	bl	8003fc0 <VL53L0X_StartMeasurement>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d104      	bne.n	8003ea6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 fb3f 	bl	8005520 <VL53L0X_measurement_poll_for_completion>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003eae:	7bbb      	ldrb	r3, [r7, #14]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003ed8:	2301      	movs	r3, #1
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f001 fae1 	bl	80054a6 <VL53L0X_perform_ref_calibration>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003f0a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003f0c:	7dbb      	ldrb	r3, [r7, #22]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d005      	beq.n	8003f1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003f12:	7dbb      	ldrb	r3, [r7, #22]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d002      	beq.n	8003f1e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003f18:	7dbb      	ldrb	r3, [r7, #22]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d147      	bne.n	8003fae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	f107 0210 	add.w	r2, r7, #16
 8003f26:	2101      	movs	r1, #1
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fbc3 	bl	80046b4 <VL53L0X_GetInterruptThresholds>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003f38:	d803      	bhi.n	8003f42 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003f3a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003f3c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003f40:	d935      	bls.n	8003fae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d131      	bne.n	8003fae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d006      	beq.n	8003f5e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003f50:	491a      	ldr	r1, [pc, #104]	; (8003fbc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f002 ff56 	bl	8006e04 <VL53L0X_load_tuning_settings>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]
 8003f5c:	e027      	b.n	8003fae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003f5e:	2204      	movs	r2, #4
 8003f60:	21ff      	movs	r1, #255	; 0xff
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f003 fe64 	bl	8007c30 <VL53L0X_WrByte>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2170      	movs	r1, #112	; 0x70
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f003 fe5a 	bl	8007c30 <VL53L0X_WrByte>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f86:	2200      	movs	r2, #0
 8003f88:	21ff      	movs	r1, #255	; 0xff
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f003 fe50 	bl	8007c30 <VL53L0X_WrByte>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f003 fe46 	bl	8007c30 <VL53L0X_WrByte>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003fae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003fd0:	f107 030e 	add.w	r3, r7, #14
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fb20 	bl	800361c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f003 fe25 	bl	8007c30 <VL53L0X_WrByte>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003fea:	2201      	movs	r2, #1
 8003fec:	21ff      	movs	r1, #255	; 0xff
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f003 fe1e 	bl	8007c30 <VL53L0X_WrByte>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f003 fe17 	bl	8007c30 <VL53L0X_WrByte>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800400c:	461a      	mov	r2, r3
 800400e:	2191      	movs	r1, #145	; 0x91
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f003 fe0d 	bl	8007c30 <VL53L0X_WrByte>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800401a:	2201      	movs	r2, #1
 800401c:	2100      	movs	r1, #0
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f003 fe06 	bl	8007c30 <VL53L0X_WrByte>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004028:	2200      	movs	r2, #0
 800402a:	21ff      	movs	r1, #255	; 0xff
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f003 fdff 	bl	8007c30 <VL53L0X_WrByte>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004036:	2200      	movs	r2, #0
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f003 fdf8 	bl	8007c30 <VL53L0X_WrByte>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004044:	7bbb      	ldrb	r3, [r7, #14]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d054      	beq.n	80040f4 <VL53L0X_StartMeasurement+0x134>
 800404a:	2b03      	cmp	r3, #3
 800404c:	dc6c      	bgt.n	8004128 <VL53L0X_StartMeasurement+0x168>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <VL53L0X_StartMeasurement+0x98>
 8004052:	2b01      	cmp	r3, #1
 8004054:	d034      	beq.n	80040c0 <VL53L0X_StartMeasurement+0x100>
 8004056:	e067      	b.n	8004128 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004058:	2201      	movs	r2, #1
 800405a:	2100      	movs	r1, #0
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f003 fde7 	bl	8007c30 <VL53L0X_WrByte>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800406a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d15d      	bne.n	800412e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800407c:	f107 030d 	add.w	r3, r7, #13
 8004080:	461a      	mov	r2, r3
 8004082:	2100      	movs	r1, #0
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f003 fe55 	bl	8007d34 <VL53L0X_RdByte>
 800408a:	4603      	mov	r3, r0
 800408c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3301      	adds	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004094:	7b7a      	ldrb	r2, [r7, #13]
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	4013      	ands	r3, r2
 800409a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d107      	bne.n	80040b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80040a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040b0:	d3e1      	bcc.n	8004076 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80040b8:	d339      	bcc.n	800412e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80040ba:	23f9      	movs	r3, #249	; 0xf9
 80040bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80040be:	e036      	b.n	800412e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80040c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d105      	bne.n	80040d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80040c8:	2101      	movs	r1, #1
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff ff12 	bl	8003ef4 <VL53L0X_CheckAndLoadInterruptSettings>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80040d4:	2202      	movs	r2, #2
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f003 fda9 	bl	8007c30 <VL53L0X_WrByte>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80040e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d123      	bne.n	8004132 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80040f2:	e01e      	b.n	8004132 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80040f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80040fc:	2101      	movs	r1, #1
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff fef8 	bl	8003ef4 <VL53L0X_CheckAndLoadInterruptSettings>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004108:	2204      	movs	r2, #4
 800410a:	2100      	movs	r1, #0
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f003 fd8f 	bl	8007c30 <VL53L0X_WrByte>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2204      	movs	r2, #4
 8004122:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004126:	e006      	b.n	8004136 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004128:	23f8      	movs	r3, #248	; 0xf8
 800412a:	75fb      	strb	r3, [r7, #23]
 800412c:	e004      	b.n	8004138 <VL53L0X_StartMeasurement+0x178>
		break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <VL53L0X_StartMeasurement+0x178>
		break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <VL53L0X_StartMeasurement+0x178>
		break;
 8004136:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004138:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004158:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d112      	bne.n	8004186 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb1a 	bl	80047a0 <VL53L0X_GetInterruptMaskStatus>
 800416c:	4603      	mov	r3, r0
 800416e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b04      	cmp	r3, #4
 8004174:	d103      	bne.n	800417e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e01c      	b.n	80041b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e018      	b.n	80041b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004186:	f107 030d 	add.w	r3, r7, #13
 800418a:	461a      	mov	r2, r3
 800418c:	2114      	movs	r1, #20
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f003 fdd0 	bl	8007d34 <VL53L0X_RdByte>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80041a0:	7b7b      	ldrb	r3, [r7, #13]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2201      	movs	r2, #1
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e002      	b.n	80041b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80041b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80041c4:	b5b0      	push	{r4, r5, r7, lr}
 80041c6:	b096      	sub	sp, #88	; 0x58
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80041d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041d8:	230c      	movs	r3, #12
 80041da:	2114      	movs	r1, #20
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f003 fcfb 	bl	8007bd8 <VL53L0X_ReadMulti>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80041e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 80d1 	bne.w	8004394 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80041fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004202:	b29b      	uxth	r3, r3
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	b29a      	uxth	r2, r3
 8004208:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800420c:	b29b      	uxth	r3, r3
 800420e:	4413      	add	r3, r2
 8004210:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800421a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	b29a      	uxth	r2, r3
 8004224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004228:	b29b      	uxth	r3, r3
 800422a:	4413      	add	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	025b      	lsls	r3, r3, #9
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004236:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004238:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800423c:	b29b      	uxth	r3, r3
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	b29a      	uxth	r2, r3
 8004242:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004246:	b29b      	uxth	r3, r3
 8004248:	4413      	add	r3, r2
 800424a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800424e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004252:	025b      	lsls	r3, r3, #9
 8004254:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800425a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	b29a      	uxth	r2, r3
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004268:	b29b      	uxth	r3, r3
 800426a:	4413      	add	r3, r2
 800426c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004276:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004278:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800427c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004286:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800428e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004298:	d046      	beq.n	8004328 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800429a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800429c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80042a8:	4a57      	ldr	r2, [pc, #348]	; (8004408 <VL53L0X_GetRangingMeasurementData+0x244>)
 80042aa:	fb82 1203 	smull	r1, r2, r2, r3
 80042ae:	1192      	asrs	r2, r2, #6
 80042b0:	17db      	asrs	r3, r3, #31
 80042b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80042b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7f1b      	ldrb	r3, [r3, #28]
 80042c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80042c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d02c      	beq.n	8004328 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80042ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80042da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80042dc:	429a      	cmp	r2, r3
 80042de:	d10d      	bne.n	80042fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80042e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80042e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80042ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042f0:	e016      	b.n	8004320 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80042f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80042f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042fa:	e011      	b.n	8004320 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80042fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004302:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004306:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004308:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800430c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004310:	121b      	asrs	r3, r3, #8
 8004312:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004316:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800431c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004320:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004324:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004328:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00d      	beq.n	800434c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004330:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800433c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004340:	b2db      	uxtb	r3, r3
 8004342:	019b      	lsls	r3, r3, #6
 8004344:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	75da      	strb	r2, [r3, #23]
 800434a:	e006      	b.n	800435a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004352:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800435a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800435e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004362:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f003 f9e5 	bl	8007740 <VL53L0X_get_pal_range_status>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800437e:	4313      	orrs	r3, r2
 8004380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004384:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004388:	2b00      	cmp	r3, #0
 800438a:	d103      	bne.n	8004394 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800438c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004394:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004398:	2b00      	cmp	r3, #0
 800439a:	d12f      	bne.n	80043fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f107 040c 	add.w	r4, r7, #12
 80043a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80043a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80043b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80043c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80043ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80043d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80043d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80043dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80043e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80043ec:	f107 050c 	add.w	r5, r7, #12
 80043f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80043fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004400:	4618      	mov	r0, r3
 8004402:	3750      	adds	r7, #80	; 0x50
 8004404:	46bd      	mov	sp, r7
 8004406:	bdb0      	pop	{r4, r5, r7, pc}
 8004408:	10624dd3 	.word	0x10624dd3

0800440c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800441a:	2100      	movs	r1, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff f8d1 	bl	80035c4 <VL53L0X_SetDeviceMode>
 8004422:	4603      	mov	r3, r0
 8004424:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fd16 	bl	8003e60 <VL53L0X_PerformSingleMeasurement>
 8004434:	4603      	mov	r3, r0
 8004436:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff febe 	bl	80041c4 <VL53L0X_GetRangingMeasurementData>
 8004448:	4603      	mov	r3, r0
 800444a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800444c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004454:	2100      	movs	r1, #0
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f962 	bl	8004720 <VL53L0X_ClearInterruptMask>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8004460:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	4608      	mov	r0, r1
 8004476:	4611      	mov	r1, r2
 8004478:	461a      	mov	r2, r3
 800447a:	4603      	mov	r3, r0
 800447c:	70fb      	strb	r3, [r7, #3]
 800447e:	460b      	mov	r3, r1
 8004480:	70bb      	strb	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8004490:	23f6      	movs	r3, #246	; 0xf6
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e107      	b.n	80046a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004496:	78bb      	ldrb	r3, [r7, #2]
 8004498:	2b14      	cmp	r3, #20
 800449a:	d110      	bne.n	80044be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800449c:	7e3b      	ldrb	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80044a2:	2310      	movs	r3, #16
 80044a4:	73bb      	strb	r3, [r7, #14]
 80044a6:	e001      	b.n	80044ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80044ac:	7bbb      	ldrb	r3, [r7, #14]
 80044ae:	461a      	mov	r2, r3
 80044b0:	2184      	movs	r1, #132	; 0x84
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f003 fbbc 	bl	8007c30 <VL53L0X_WrByte>
 80044b8:	4603      	mov	r3, r0
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e0f3      	b.n	80046a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80044be:	78bb      	ldrb	r3, [r7, #2]
 80044c0:	2b15      	cmp	r3, #21
 80044c2:	f040 8097 	bne.w	80045f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80044c6:	2201      	movs	r2, #1
 80044c8:	21ff      	movs	r1, #255	; 0xff
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f003 fbb0 	bl	8007c30 <VL53L0X_WrByte>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80044da:	2200      	movs	r2, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f003 fba6 	bl	8007c30 <VL53L0X_WrByte>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	7bfb      	ldrb	r3, [r7, #15]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80044ee:	2200      	movs	r2, #0
 80044f0:	21ff      	movs	r1, #255	; 0xff
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f003 fb9c 	bl	8007c30 <VL53L0X_WrByte>
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	4313      	orrs	r3, r2
 8004500:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004502:	2201      	movs	r2, #1
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f003 fb92 	bl	8007c30 <VL53L0X_WrByte>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	4313      	orrs	r3, r2
 8004514:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8004516:	2202      	movs	r2, #2
 8004518:	2185      	movs	r1, #133	; 0x85
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f003 fb88 	bl	8007c30 <VL53L0X_WrByte>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	4313      	orrs	r3, r2
 8004528:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800452a:	2204      	movs	r2, #4
 800452c:	21ff      	movs	r1, #255	; 0xff
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f003 fb7e 	bl	8007c30 <VL53L0X_WrByte>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	4313      	orrs	r3, r2
 800453c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800453e:	2200      	movs	r2, #0
 8004540:	21cd      	movs	r1, #205	; 0xcd
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f003 fb74 	bl	8007c30 <VL53L0X_WrByte>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	4313      	orrs	r3, r2
 8004550:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004552:	2211      	movs	r2, #17
 8004554:	21cc      	movs	r1, #204	; 0xcc
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f003 fb6a 	bl	8007c30 <VL53L0X_WrByte>
 800455c:	4603      	mov	r3, r0
 800455e:	461a      	mov	r2, r3
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	4313      	orrs	r3, r2
 8004564:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8004566:	2207      	movs	r2, #7
 8004568:	21ff      	movs	r1, #255	; 0xff
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f003 fb60 	bl	8007c30 <VL53L0X_WrByte>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	4313      	orrs	r3, r2
 8004578:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800457a:	2200      	movs	r2, #0
 800457c:	21be      	movs	r1, #190	; 0xbe
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f003 fb56 	bl	8007c30 <VL53L0X_WrByte>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	4313      	orrs	r3, r2
 800458c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800458e:	2206      	movs	r2, #6
 8004590:	21ff      	movs	r1, #255	; 0xff
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f003 fb4c 	bl	8007c30 <VL53L0X_WrByte>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	4313      	orrs	r3, r2
 80045a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80045a2:	2209      	movs	r2, #9
 80045a4:	21cc      	movs	r1, #204	; 0xcc
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f003 fb42 	bl	8007c30 <VL53L0X_WrByte>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80045b6:	2200      	movs	r2, #0
 80045b8:	21ff      	movs	r1, #255	; 0xff
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f003 fb38 	bl	8007c30 <VL53L0X_WrByte>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80045ca:	2201      	movs	r2, #1
 80045cc:	21ff      	movs	r1, #255	; 0xff
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f003 fb2e 	bl	8007c30 <VL53L0X_WrByte>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	4313      	orrs	r3, r2
 80045dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f003 fb24 	bl	8007c30 <VL53L0X_WrByte>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	e058      	b.n	80046a6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80045f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d121      	bne.n	8004640 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80045fc:	787b      	ldrb	r3, [r7, #1]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d81b      	bhi.n	800463a <VL53L0X_SetGpioConfig+0x1ce>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <VL53L0X_SetGpioConfig+0x19c>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800461d 	.word	0x0800461d
 800460c:	08004623 	.word	0x08004623
 8004610:	08004629 	.word	0x08004629
 8004614:	0800462f 	.word	0x0800462f
 8004618:	08004635 	.word	0x08004635
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800461c:	2300      	movs	r3, #0
 800461e:	73bb      	strb	r3, [r7, #14]
				break;
 8004620:	e00f      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8004622:	2301      	movs	r3, #1
 8004624:	73bb      	strb	r3, [r7, #14]
				break;
 8004626:	e00c      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8004628:	2302      	movs	r3, #2
 800462a:	73bb      	strb	r3, [r7, #14]
				break;
 800462c:	e009      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800462e:	2303      	movs	r3, #3
 8004630:	73bb      	strb	r3, [r7, #14]
				break;
 8004632:	e006      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8004634:	2304      	movs	r3, #4
 8004636:	73bb      	strb	r3, [r7, #14]
				break;
 8004638:	e003      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800463a:	23f5      	movs	r3, #245	; 0xf5
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e000      	b.n	8004642 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8004640:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	461a      	mov	r2, r3
 800464e:	210a      	movs	r1, #10
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f003 faed 	bl	8007c30 <VL53L0X_WrByte>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004662:	7e3b      	ldrb	r3, [r7, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	73bb      	strb	r3, [r7, #14]
 800466c:	e001      	b.n	8004672 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800466e:	2310      	movs	r3, #16
 8004670:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8004672:	7bbb      	ldrb	r3, [r7, #14]
 8004674:	22ef      	movs	r2, #239	; 0xef
 8004676:	2184      	movs	r1, #132	; 0x84
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f003 fb27 	bl	8007ccc <VL53L0X_UpdateByte>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	787a      	ldrb	r2, [r7, #1]
 800468e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d105      	bne.n	80046a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f83f 	bl	8004720 <VL53L0X_ClearInterruptMask>
 80046a2:	4603      	mov	r3, r0
 80046a4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop

080046b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	460b      	mov	r3, r1
 80046c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046c4:	2300      	movs	r3, #0
 80046c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 80046c8:	f107 0314 	add.w	r3, r7, #20
 80046cc:	461a      	mov	r2, r3
 80046ce:	210e      	movs	r1, #14
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f003 fb59 	bl	8007d88 <VL53L0X_RdWord>
 80046d6:	4603      	mov	r3, r0
 80046d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80046da:	8abb      	ldrh	r3, [r7, #20]
 80046dc:	045b      	lsls	r3, r3, #17
 80046de:	461a      	mov	r2, r3
 80046e0:	4b0e      	ldr	r3, [pc, #56]	; (800471c <VL53L0X_GetInterruptThresholds+0x68>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80046e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	461a      	mov	r2, r3
 80046f6:	210c      	movs	r1, #12
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f003 fb45 	bl	8007d88 <VL53L0X_RdWord>
 80046fe:	4603      	mov	r3, r0
 8004700:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004702:	8abb      	ldrh	r3, [r7, #20]
 8004704:	045b      	lsls	r3, r3, #17
 8004706:	461a      	mov	r2, r3
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <VL53L0X_GetInterruptThresholds+0x68>)
 800470a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004710:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	1ffe0000 	.word	0x1ffe0000

08004720 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8004732:	2201      	movs	r2, #1
 8004734:	210b      	movs	r1, #11
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f003 fa7a 	bl	8007c30 <VL53L0X_WrByte>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8004740:	2200      	movs	r2, #0
 8004742:	210b      	movs	r1, #11
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f003 fa73 	bl	8007c30 <VL53L0X_WrByte>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	4313      	orrs	r3, r2
 8004752:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8004754:	f107 030d 	add.w	r3, r7, #13
 8004758:	461a      	mov	r2, r3
 800475a:	2113      	movs	r1, #19
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f003 fae9 	bl	8007d34 <VL53L0X_RdByte>
 8004762:	4603      	mov	r3, r0
 8004764:	461a      	mov	r2, r3
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	4313      	orrs	r3, r2
 800476a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800476c:	7bbb      	ldrb	r3, [r7, #14]
 800476e:	3301      	adds	r3, #1
 8004770:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8004772:	7b7b      	ldrb	r3, [r7, #13]
 8004774:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800477c:	7bbb      	ldrb	r3, [r7, #14]
 800477e:	2b02      	cmp	r3, #2
 8004780:	d803      	bhi.n	800478a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0d3      	beq.n	8004732 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800478a:	7bbb      	ldrb	r3, [r7, #14]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004790:	23f4      	movs	r3, #244	; 0xf4
 8004792:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80047ae:	f107 030e 	add.w	r3, r7, #14
 80047b2:	461a      	mov	r2, r3
 80047b4:	2113      	movs	r1, #19
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f003 fabc 	bl	8007d34 <VL53L0X_RdByte>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 80047c0:	7bbb      	ldrb	r3, [r7, #14]
 80047c2:	f003 0207 	and.w	r2, r3, #7
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	f003 0318 	and.w	r3, r3, #24
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80047d4:	23fa      	movs	r3, #250	; 0xfa
 80047d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80047d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fa03 	bl	8004c04 <VL53L0X_perform_ref_spad_management>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8004802:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800481c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004820:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8004822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004826:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	461a      	mov	r2, r3
 800482e:	2128      	movs	r1, #40	; 0x28
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f003 faa9 	bl	8007d88 <VL53L0X_RdWord>
 8004836:	4603      	mov	r3, r0
 8004838:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800483a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11e      	bne.n	8004880 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004842:	893b      	ldrh	r3, [r7, #8]
 8004844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004848:	b29b      	uxth	r3, r3
 800484a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800484c:	893b      	ldrh	r3, [r7, #8]
 800484e:	461a      	mov	r2, r3
 8004850:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	dd0b      	ble.n	8004870 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	b21b      	sxth	r3, r3
 8004862:	461a      	mov	r2, r3
					* 250;
 8004864:	23fa      	movs	r3, #250	; 0xfa
 8004866:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	e007      	b.n	8004880 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8004870:	893b      	ldrh	r3, [r7, #8]
 8004872:	b21b      	sxth	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	23fa      	movs	r3, #250	; 0xfa
 8004878:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8004880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800488c:	b480      	push	{r7}
 800488e:	b08b      	sub	sp, #44	; 0x2c
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800489a:	2308      	movs	r3, #8
 800489c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	fb01 f202 	mul.w	r2, r1, r2
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	e030      	b.n	800492e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80048da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d11e      	bne.n	8004920 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80048e2:	7ffa      	ldrb	r2, [r7, #31]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	fa42 f303 	asr.w	r3, r2, r3
 80048ea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80048f0:	e016      	b.n	8004920 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80048f2:	7ffb      	ldrb	r3, [r7, #31]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <get_next_good_spad+0x88>
				success = 1;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	fb03 f202 	mul.w	r2, r3, r2
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	4413      	add	r3, r2
 800490c:	461a      	mov	r2, r3
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]
				break;
 8004912:	e009      	b.n	8004928 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8004914:	7ffb      	ldrb	r3, [r7, #31]
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	3301      	adds	r3, #1
 800491e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8004920:	6a3a      	ldr	r2, [r7, #32]
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	d3e4      	bcc.n	80048f2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800492e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	d202      	bcs.n	800493c <get_next_good_spad+0xb0>
 8004936:	7fbb      	ldrb	r3, [r7, #30]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0c7      	beq.n	80048cc <get_next_good_spad+0x40>
		}
	}
}
 800493c:	bf00      	nop
 800493e:	372c      	adds	r7, #44	; 0x2c
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800495a:	4a07      	ldr	r2, [pc, #28]	; (8004978 <is_aperture+0x30>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <is_aperture+0x22>
		isAperture = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	200002bc 	.word	0x200002bc

0800497c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004988:	2300      	movs	r3, #0
 800498a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800498c:	2308      	movs	r3, #8
 800498e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	fbb3 f2f2 	udiv	r2, r3, r2
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	fb01 f202 	mul.w	r2, r1, r2
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80049b4:	23ce      	movs	r3, #206	; 0xce
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e010      	b.n	80049dc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	4413      	add	r3, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b25a      	sxtb	r2, r3
 80049c4:	2101      	movs	r1, #1
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	b25b      	sxtb	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	b259      	sxtb	r1, r3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	4413      	add	r3, r2
 80049d8:	b2ca      	uxtb	r2, r1
 80049da:	701a      	strb	r2, [r3, #0]

	return status;
 80049dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3724      	adds	r7, #36	; 0x24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80049f6:	2306      	movs	r3, #6
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	21b0      	movs	r1, #176	; 0xb0
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f003 f8bb 	bl	8007b78 <VL53L0X_WriteMulti>
 8004a02:	4603      	mov	r3, r0
 8004a04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8004a1c:	2306      	movs	r3, #6
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	21b0      	movs	r1, #176	; 0xb0
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f003 f8d8 	bl	8007bd8 <VL53L0X_ReadMulti>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8004a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08c      	sub	sp, #48	; 0x30
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	607a      	str	r2, [r7, #4]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	460b      	mov	r3, r1
 8004a46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8004a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a50:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004a56:	2300      	movs	r3, #0
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5a:	e02b      	b.n	8004ab4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8004a5c:	f107 031c 	add.w	r3, r7, #28
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff11 	bl	800488c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d103      	bne.n	8004a7a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004a72:	23ce      	movs	r3, #206	; 0xce
 8004a74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004a78:	e020      	b.n	8004abc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	4413      	add	r3, r2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff60 	bl	8004948 <is_aperture>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	7afb      	ldrb	r3, [r7, #11]
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004a92:	23ce      	movs	r3, #206	; 0xce
 8004a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004a98:	e010      	b.n	8004abc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004aa2:	6838      	ldr	r0, [r7, #0]
 8004aa4:	f7ff ff6a 	bl	800497c <enable_spad_bit>
		currentSpad++;
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d3cf      	bcc.n	8004a5c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004abe:	6a3a      	ldr	r2, [r7, #32]
 8004ac0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8004ac2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff8d 	bl	80049ec <set_ref_spad_map>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004ad8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d121      	bne.n	8004b24 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8004ae0:	f107 0314 	add.w	r3, r7, #20
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ff93 	bl	8004a12 <get_ref_spad_map>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8004af2:	2300      	movs	r3, #0
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004af6:	e011      	b.n	8004b1c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	4413      	add	r3, r2
 8004afe:	781a      	ldrb	r2, [r3, #0]
 8004b00:	f107 0114 	add.w	r1, r7, #20
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	440b      	add	r3, r1
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d003      	beq.n	8004b16 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004b0e:	23ce      	movs	r3, #206	; 0xce
 8004b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8004b14:	e006      	b.n	8004b24 <enable_ref_spads+0xec>
			}
			i++;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	3301      	adds	r3, #1
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3e9      	bcc.n	8004af8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8004b24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	; 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004b4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8004b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8004b58:	22c0      	movs	r2, #192	; 0xc0
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f003 f867 	bl	8007c30 <VL53L0X_WrByte>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8004b68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8004b70:	f107 0308 	add.w	r3, r7, #8
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fc48 	bl	800440c <VL53L0X_PerformSingleRangingMeasurement>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8004b82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	21ff      	movs	r1, #255	; 0xff
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f003 f84e 	bl	8007c30 <VL53L0X_WrByte>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	21b6      	movs	r1, #182	; 0xb6
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f003 f8ee 	bl	8007d88 <VL53L0X_RdWord>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8004bb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	21ff      	movs	r1, #255	; 0xff
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f003 f836 	bl	8007c30 <VL53L0X_WrByte>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004bca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d112      	bne.n	8004bf8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2101      	movs	r1, #1
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f003 f828 	bl	8007c30 <VL53L0X_WrByte>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004be6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004bf4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b09d      	sub	sp, #116	; 0x74
 8004c08:	af06      	add	r7, sp, #24
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8004c16:	23b4      	movs	r3, #180	; 0xb4
 8004c18:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8004c20:	232c      	movs	r3, #44	; 0x2c
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8004c30:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8004c3e:	2306      	movs	r3, #6
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8004c68:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6e:	e009      	b.n	8004c84 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c80:	3301      	adds	r3, #1
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d3f1      	bcc.n	8004c70 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	21ff      	movs	r1, #255	; 0xff
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f002 ffcd 	bl	8007c30 <VL53L0X_WrByte>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004c9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	214f      	movs	r1, #79	; 0x4f
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f002 ffc1 	bl	8007c30 <VL53L0X_WrByte>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004cb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004cbc:	222c      	movs	r2, #44	; 0x2c
 8004cbe:	214e      	movs	r1, #78	; 0x4e
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f002 ffb5 	bl	8007c30 <VL53L0X_WrByte>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004ccc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	21ff      	movs	r1, #255	; 0xff
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f002 ffa9 	bl	8007c30 <VL53L0X_WrByte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004ce4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004cec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	21b6      	movs	r1, #182	; 0xb6
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f002 ff9b 	bl	8007c30 <VL53L0X_WrByte>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004d00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d107      	bne.n	8004d18 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2180      	movs	r1, #128	; 0x80
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f002 ff8f 	bl	8007c30 <VL53L0X_WrByte>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004d18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004d20:	f107 0210 	add.w	r2, r7, #16
 8004d24:	f107 0111 	add.w	r1, r7, #17
 8004d28:	2300      	movs	r3, #0
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fbbb 	bl	80054a6 <VL53L0X_perform_ref_calibration>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004d36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d121      	bne.n	8004d82 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d44:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8004d5a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004d5e:	f107 0218 	add.w	r2, r7, #24
 8004d62:	9204      	str	r2, [sp, #16]
 8004d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d6a:	9202      	str	r2, [sp, #8]
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	4623      	mov	r3, r4
 8004d74:	4602      	mov	r2, r0
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f7ff fe5e 	bl	8004a38 <enable_ref_spads>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d174      	bne.n	8004e74 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004d8e:	f107 0312 	add.w	r3, r7, #18
 8004d92:	4619      	mov	r1, r3
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fecb 	bl	8004b30 <perform_ref_signal_measurement>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004da0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d161      	bne.n	8004e6c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004da8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004daa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d25d      	bcs.n	8004e6c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db4:	e009      	b.n	8004dca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3f1      	bcc.n	8004db6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004dd2:	e002      	b.n	8004dda <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004dda:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de0:	4413      	add	r3, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fdb0 	bl	8004948 <is_aperture>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004dee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3ee      	bcc.n	8004dd4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dfc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004e0a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004e0e:	f107 0218 	add.w	r2, r7, #24
 8004e12:	9204      	str	r2, [sp, #16]
 8004e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e16:	9203      	str	r2, [sp, #12]
 8004e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e1a:	9202      	str	r2, [sp, #8]
 8004e1c:	9301      	str	r3, [sp, #4]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	4623      	mov	r3, r4
 8004e24:	4602      	mov	r2, r0
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f7ff fe06 	bl	8004a38 <enable_ref_spads>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004e32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11b      	bne.n	8004e72 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004e3e:	f107 0312 	add.w	r3, r7, #18
 8004e42:	4619      	mov	r1, r3
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff fe73 	bl	8004b30 <perform_ref_signal_measurement>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004e50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10c      	bne.n	8004e72 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004e58:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004e5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d208      	bcs.n	8004e72 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e68:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004e6a:	e002      	b.n	8004e72 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e70:	e000      	b.n	8004e74 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004e72:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004e74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f040 80af 	bne.w	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004e7e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004e80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004e82:	429a      	cmp	r2, r3
 8004e84:	f240 80aa 	bls.w	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f003 f820 	bl	8007ee4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004ea4:	8a7b      	ldrh	r3, [r7, #18]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bfb8      	it	lt
 8004eb0:	425b      	neglt	r3, r3
 8004eb2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004eba:	e086      	b.n	8004fca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004ec2:	f107 0314 	add.w	r3, r7, #20
 8004ec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eca:	f7ff fcdf 	bl	800488c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed4:	d103      	bne.n	8004ede <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004ed6:	23ce      	movs	r3, #206	; 0xce
 8004ed8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004edc:	e07e      	b.n	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004ede:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fd2e 	bl	8004948 <is_aperture>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d003      	beq.n	8004efe <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8004efc:	e06e      	b.n	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f00:	3301      	adds	r3, #1
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fd32 	bl	800497c <enable_spad_bit>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004f1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10c      	bne.n	8004f40 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	3301      	adds	r3, #1
 8004f2a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fd59 	bl	80049ec <set_ref_spad_map>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004f40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d146      	bne.n	8004fd6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004f48:	f107 0312 	add.w	r3, r7, #18
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7ff fdee 	bl	8004b30 <perform_ref_signal_measurement>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004f5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d13b      	bne.n	8004fda <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004f62:	8a7b      	ldrh	r3, [r7, #18]
 8004f64:	461a      	mov	r2, r3
 8004f66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	bfb8      	it	lt
 8004f6e:	425b      	neglt	r3, r3
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004f72:	8a7b      	ldrh	r3, [r7, #18]
 8004f74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d21c      	bcs.n	8004fb4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d914      	bls.n	8004fac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004f82:	f107 031c 	add.w	r3, r7, #28
 8004f86:	4619      	mov	r1, r3
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f7ff fd2f 	bl	80049ec <set_ref_spad_map>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004f9a:	f107 011c 	add.w	r1, r7, #28
 8004f9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 ff9f 	bl	8007ee4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fb2:	e00a      	b.n	8004fca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004fbe:	f107 031c 	add.w	r3, r7, #28
 8004fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f002 ff8d 	bl	8007ee4 <memcpy>
		while (!complete) {
 8004fca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f43f af74 	beq.w	8004ebc <VL53L0X_perform_ref_spad_management+0x2b8>
 8004fd4:	e002      	b.n	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004fd6:	bf00      	nop
 8004fd8:	e000      	b.n	8004fdc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004fda:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d115      	bne.n	8005010 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fe8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004ff0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005010:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005014:	4618      	mov	r0, r3
 8005016:	375c      	adds	r7, #92	; 0x5c
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}

0800501c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b093      	sub	sp, #76	; 0x4c
 8005020:	af06      	add	r7, sp, #24
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005034:	23b4      	movs	r3, #180	; 0xb4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800503a:	2306      	movs	r3, #6
 800503c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800503e:	232c      	movs	r3, #44	; 0x2c
 8005040:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005042:	2201      	movs	r2, #1
 8005044:	21ff      	movs	r1, #255	; 0xff
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f002 fdf2 	bl	8007c30 <VL53L0X_WrByte>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005052:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800505a:	2200      	movs	r2, #0
 800505c:	214f      	movs	r1, #79	; 0x4f
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f002 fde6 	bl	8007c30 <VL53L0X_WrByte>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800506a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005072:	222c      	movs	r2, #44	; 0x2c
 8005074:	214e      	movs	r1, #78	; 0x4e
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f002 fdda 	bl	8007c30 <VL53L0X_WrByte>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005082:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800508a:	2200      	movs	r2, #0
 800508c:	21ff      	movs	r1, #255	; 0xff
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f002 fdce 	bl	8007c30 <VL53L0X_WrByte>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800509a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80050a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050a6:	461a      	mov	r2, r3
 80050a8:	21b6      	movs	r1, #182	; 0xb6
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f002 fdc0 	bl	8007c30 <VL53L0X_WrByte>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	e009      	b.n	80050d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	3301      	adds	r3, #1
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d3f1      	bcc.n	80050bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d011      	beq.n	8005102 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80050de:	e002      	b.n	80050e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	3301      	adds	r3, #1
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80050e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	4413      	add	r3, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fc2a 	bl	8004948 <is_aperture>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <VL53L0X_set_reference_spads+0xe6>
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3ee      	bcc.n	80050e0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800510e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005112:	79f9      	ldrb	r1, [r7, #7]
 8005114:	f107 0214 	add.w	r2, r7, #20
 8005118:	9204      	str	r2, [sp, #16]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	9203      	str	r2, [sp, #12]
 800511e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005120:	9202      	str	r2, [sp, #8]
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4623      	mov	r3, r4
 800512a:	4602      	mov	r2, r0
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fc83 	bl	8004a38 <enable_ref_spads>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005138:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10c      	bne.n	800515a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	b2da      	uxtb	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	79fa      	ldrb	r2, [r7, #7]
 8005156:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800515a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800515e:	4618      	mov	r0, r3
 8005160:	3734      	adds	r7, #52	; 0x34
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}

08005166 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10a      	bne.n	8005194 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	2100      	movs	r1, #0
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f002 fd50 	bl	8007c30 <VL53L0X_WrByte>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f9bf 	bl	8005520 <VL53L0X_measurement_poll_for_completion>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80051a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d105      	bne.n	80051ba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80051ae:	2100      	movs	r1, #0
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff fab5 	bl	8004720 <VL53L0X_ClearInterruptMask>
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80051ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80051c2:	2200      	movs	r2, #0
 80051c4:	2100      	movs	r1, #0
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f002 fd32 	bl	8007c30 <VL53L0X_WrByte>
 80051cc:	4603      	mov	r3, r0
 80051ce:	73fb      	strb	r3, [r7, #15]

	return Status;
 80051d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	70fb      	strb	r3, [r7, #3]
 80051ee:	460b      	mov	r3, r1
 80051f0:	70bb      	strb	r3, [r7, #2]
 80051f2:	4613      	mov	r3, r2
 80051f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80051fe:	2201      	movs	r2, #1
 8005200:	21ff      	movs	r1, #255	; 0xff
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f002 fd14 	bl	8007c30 <VL53L0X_WrByte>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	4313      	orrs	r3, r2
 8005210:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005212:	2200      	movs	r2, #0
 8005214:	2100      	movs	r1, #0
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f002 fd0a 	bl	8007c30 <VL53L0X_WrByte>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	4313      	orrs	r3, r2
 8005224:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005226:	2200      	movs	r2, #0
 8005228:	21ff      	movs	r1, #255	; 0xff
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f002 fd00 	bl	8007c30 <VL53L0X_WrByte>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	4313      	orrs	r3, r2
 8005238:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d01e      	beq.n	800527e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	21cb      	movs	r1, #203	; 0xcb
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f002 fd71 	bl	8007d34 <VL53L0X_RdByte>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	4313      	orrs	r3, r2
 800525a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800525c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d02a      	beq.n	80052ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005264:	f107 030e 	add.w	r3, r7, #14
 8005268:	461a      	mov	r2, r3
 800526a:	21ee      	movs	r1, #238	; 0xee
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f002 fd61 	bl	8007d34 <VL53L0X_RdByte>
 8005272:	4603      	mov	r3, r0
 8005274:	461a      	mov	r2, r3
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	4313      	orrs	r3, r2
 800527a:	73fb      	strb	r3, [r7, #15]
 800527c:	e01d      	b.n	80052ba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800527e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005286:	78bb      	ldrb	r3, [r7, #2]
 8005288:	461a      	mov	r2, r3
 800528a:	21cb      	movs	r1, #203	; 0xcb
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f002 fccf 	bl	8007c30 <VL53L0X_WrByte>
 8005292:	4603      	mov	r3, r0
 8005294:	461a      	mov	r2, r3
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	4313      	orrs	r3, r2
 800529a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800529c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00a      	beq.n	80052ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80052a4:	787b      	ldrb	r3, [r7, #1]
 80052a6:	2280      	movs	r2, #128	; 0x80
 80052a8:	21ee      	movs	r1, #238	; 0xee
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f002 fd0e 	bl	8007ccc <VL53L0X_UpdateByte>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80052ba:	2201      	movs	r2, #1
 80052bc:	21ff      	movs	r1, #255	; 0xff
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f002 fcb6 	bl	8007c30 <VL53L0X_WrByte>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80052ce:	2201      	movs	r2, #1
 80052d0:	2100      	movs	r1, #0
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f002 fcac 	bl	8007c30 <VL53L0X_WrByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	4313      	orrs	r3, r2
 80052e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80052e2:	2200      	movs	r2, #0
 80052e4:	21ff      	movs	r1, #255	; 0xff
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f002 fca2 	bl	8007c30 <VL53L0X_WrByte>
 80052ec:	4603      	mov	r3, r0
 80052ee:	461a      	mov	r2, r3
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	f023 0310 	bic.w	r3, r3, #16
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	701a      	strb	r2, [r3, #0]

	return Status;
 8005302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08a      	sub	sp, #40	; 0x28
 8005312:	af04      	add	r7, sp, #16
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4611      	mov	r1, r2
 800531a:	461a      	mov	r2, r3
 800531c:	460b      	mov	r3, r1
 800531e:	71fb      	strb	r3, [r7, #7]
 8005320:	4613      	mov	r3, r2
 8005322:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005338:	79bb      	ldrb	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005344:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005346:	2201      	movs	r2, #1
 8005348:	2101      	movs	r1, #1
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f002 fc70 	bl	8007c30 <VL53L0X_WrByte>
 8005350:	4603      	mov	r3, r0
 8005352:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800535c:	2140      	movs	r1, #64	; 0x40
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff01 	bl	8005166 <VL53L0X_perform_single_ref_calibration>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d115      	bne.n	800539c <VL53L0X_perform_vhv_calibration+0x8e>
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d112      	bne.n	800539c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005376:	7d39      	ldrb	r1, [r7, #20]
 8005378:	7d7a      	ldrb	r2, [r7, #21]
 800537a:	2300      	movs	r3, #0
 800537c:	9303      	str	r3, [sp, #12]
 800537e:	2301      	movs	r3, #1
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	f107 0313 	add.w	r3, r7, #19
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	460b      	mov	r3, r1
 800538e:	2101      	movs	r1, #1
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff ff23 	bl	80051dc <VL53L0X_ref_calibration_io>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]
 800539a:	e002      	b.n	80053a2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80053a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d112      	bne.n	80053d0 <VL53L0X_perform_vhv_calibration+0xc2>
 80053aa:	79bb      	ldrb	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00f      	beq.n	80053d0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80053b0:	7dbb      	ldrb	r3, [r7, #22]
 80053b2:	461a      	mov	r2, r3
 80053b4:	2101      	movs	r1, #1
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f002 fc3a 	bl	8007c30 <VL53L0X_WrByte>
 80053bc:	4603      	mov	r3, r0
 80053be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80053c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	7dba      	ldrb	r2, [r7, #22]
 80053cc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80053d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08a      	sub	sp, #40	; 0x28
 80053e0:	af04      	add	r7, sp, #16
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	460b      	mov	r3, r1
 80053ec:	71fb      	strb	r3, [r7, #7]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80053fe:	2300      	movs	r3, #0
 8005400:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005402:	79bb      	ldrb	r3, [r7, #6]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800540e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005410:	2202      	movs	r2, #2
 8005412:	2101      	movs	r1, #1
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f002 fc0b 	bl	8007c30 <VL53L0X_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800541e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d105      	bne.n	8005432 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8005426:	2100      	movs	r1, #0
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f7ff fe9c 	bl	8005166 <VL53L0X_perform_single_ref_calibration>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d115      	bne.n	8005466 <VL53L0X_perform_phase_calibration+0x8a>
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d112      	bne.n	8005466 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005440:	7d39      	ldrb	r1, [r7, #20]
 8005442:	7d7a      	ldrb	r2, [r7, #21]
 8005444:	2301      	movs	r3, #1
 8005446:	9303      	str	r3, [sp, #12]
 8005448:	2300      	movs	r3, #0
 800544a:	9302      	str	r3, [sp, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	9301      	str	r3, [sp, #4]
 8005450:	f107 0313 	add.w	r3, r7, #19
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	460b      	mov	r3, r1
 8005458:	2101      	movs	r1, #1
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff febe 	bl	80051dc <VL53L0X_ref_calibration_io>
 8005460:	4603      	mov	r3, r0
 8005462:	75fb      	strb	r3, [r7, #23]
 8005464:	e002      	b.n	800546c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2200      	movs	r2, #0
 800546a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800546c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d112      	bne.n	800549a <VL53L0X_perform_phase_calibration+0xbe>
 8005474:	79bb      	ldrb	r3, [r7, #6]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00f      	beq.n	800549a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800547a:	7dbb      	ldrb	r3, [r7, #22]
 800547c:	461a      	mov	r2, r3
 800547e:	2101      	movs	r1, #1
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f002 fbd5 	bl	8007c30 <VL53L0X_WrByte>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800548a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	7dba      	ldrb	r2, [r7, #22]
 8005496:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800549a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b086      	sub	sp, #24
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
 80054b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80054c2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	2300      	movs	r3, #0
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff ff1f 	bl	800530e <VL53L0X_perform_vhv_calibration>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80054d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	2300      	movs	r3, #0
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7ff ff7a 	bl	80053dc <VL53L0X_perform_phase_calibration>
 80054e8:	4603      	mov	r3, r0
 80054ea:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80054ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10f      	bne.n	8005514 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80054f4:	7dbb      	ldrb	r3, [r7, #22]
 80054f6:	461a      	mov	r2, r3
 80054f8:	2101      	movs	r1, #1
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f002 fb98 	bl	8007c30 <VL53L0X_WrByte>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d103      	bne.n	8005514 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	7dba      	ldrb	r2, [r7, #22]
 8005510:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005528:	2300      	movs	r3, #0
 800552a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005534:	f107 030f 	add.w	r3, r7, #15
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fe fe02 	bl	8004144 <VL53L0X_GetMeasurementDataReady>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8005544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d110      	bne.n	800556e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d00f      	beq.n	8005572 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3301      	adds	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800555e:	d302      	bcc.n	8005566 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005560:	23f9      	movs	r3, #249	; 0xf9
 8005562:	75fb      	strb	r3, [r7, #23]
			break;
 8005564:	e006      	b.n	8005574 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f002 fc82 	bl	8007e70 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800556c:	e7e2      	b.n	8005534 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8005572:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8005574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	3301      	adds	r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	4603      	mov	r3, r0
 80055ae:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80055d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055dc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80055de:	e002      	b.n	80055e6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d8f8      	bhi.n	80055e0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80055ee:	e017      	b.n	8005620 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4413      	add	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d30b      	bcc.n	8005614 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4413      	add	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4413      	add	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e002      	b.n	800561a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e4      	bne.n	80055f0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005640:	2200      	movs	r2, #0
 8005642:	2183      	movs	r1, #131	; 0x83
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f002 faf3 	bl	8007c30 <VL53L0X_WrByte>
 800564a:	4603      	mov	r3, r0
 800564c:	461a      	mov	r2, r3
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	4313      	orrs	r3, r2
 8005652:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8005654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11e      	bne.n	800569a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005660:	f107 030f 	add.w	r3, r7, #15
 8005664:	461a      	mov	r2, r3
 8005666:	2183      	movs	r1, #131	; 0x83
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f002 fb63 	bl	8007d34 <VL53L0X_RdByte>
 800566e:	4603      	mov	r3, r0
 8005670:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8005672:	7bfb      	ldrb	r3, [r7, #15]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <VL53L0X_device_read_strobe+0x5a>
 8005678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	3301      	adds	r3, #1
 8005684:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800568c:	d3e8      	bcc.n	8005660 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005694:	d301      	bcc.n	800569a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8005696:	23f9      	movs	r3, #249	; 0xf9
 8005698:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800569a:	2201      	movs	r2, #1
 800569c:	2183      	movs	r1, #131	; 0x83
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f002 fac6 	bl	8007c30 <VL53L0X_WrByte>
 80056a4:	4603      	mov	r3, r0
 80056a6:	461a      	mov	r2, r3
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80056ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b098      	sub	sp, #96	; 0x60
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	460b      	mov	r3, r1
 80056c4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80056ea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80056ee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8005706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800570a:	2b07      	cmp	r3, #7
 800570c:	f000 8408 	beq.w	8005f20 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005710:	2201      	movs	r2, #1
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f002 fa8b 	bl	8007c30 <VL53L0X_WrByte>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005722:	4313      	orrs	r3, r2
 8005724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005728:	2201      	movs	r2, #1
 800572a:	21ff      	movs	r1, #255	; 0xff
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f002 fa7f 	bl	8007c30 <VL53L0X_WrByte>
 8005732:	4603      	mov	r3, r0
 8005734:	461a      	mov	r2, r3
 8005736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800573a:	4313      	orrs	r3, r2
 800573c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005740:	2200      	movs	r2, #0
 8005742:	2100      	movs	r1, #0
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 fa73 	bl	8007c30 <VL53L0X_WrByte>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005752:	4313      	orrs	r3, r2
 8005754:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005758:	2206      	movs	r2, #6
 800575a:	21ff      	movs	r1, #255	; 0xff
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 fa67 	bl	8007c30 <VL53L0X_WrByte>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800576a:	4313      	orrs	r3, r2
 800576c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005770:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005774:	461a      	mov	r2, r3
 8005776:	2183      	movs	r1, #131	; 0x83
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f002 fadb 	bl	8007d34 <VL53L0X_RdByte>
 800577e:	4603      	mov	r3, r0
 8005780:	461a      	mov	r2, r3
 8005782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005786:	4313      	orrs	r3, r2
 8005788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800578c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005790:	f043 0304 	orr.w	r3, r3, #4
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	2183      	movs	r1, #131	; 0x83
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f002 fa48 	bl	8007c30 <VL53L0X_WrByte>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057a8:	4313      	orrs	r3, r2
 80057aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80057ae:	2207      	movs	r2, #7
 80057b0:	21ff      	movs	r1, #255	; 0xff
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f002 fa3c 	bl	8007c30 <VL53L0X_WrByte>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80057c6:	2201      	movs	r2, #1
 80057c8:	2181      	movs	r1, #129	; 0x81
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f002 fa30 	bl	8007c30 <VL53L0X_WrByte>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d8:	4313      	orrs	r3, r2
 80057da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f002 fb46 	bl	8007e70 <VL53L0X_PollingDelay>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80057f2:	2201      	movs	r2, #1
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f002 fa1a 	bl	8007c30 <VL53L0X_WrByte>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005804:	4313      	orrs	r3, r2
 8005806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 8098 	beq.w	8005946 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005816:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800581a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800581e:	2b00      	cmp	r3, #0
 8005820:	f040 8091 	bne.w	8005946 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005824:	226b      	movs	r2, #107	; 0x6b
 8005826:	2194      	movs	r1, #148	; 0x94
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 fa01 	bl	8007c30 <VL53L0X_WrByte>
 800582e:	4603      	mov	r3, r0
 8005830:	461a      	mov	r2, r3
 8005832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005836:	4313      	orrs	r3, r2
 8005838:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff fef9 	bl	8005634 <VL53L0X_device_read_strobe>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800584a:	4313      	orrs	r3, r2
 800584c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005850:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005854:	461a      	mov	r2, r3
 8005856:	2190      	movs	r1, #144	; 0x90
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f002 facd 	bl	8007df8 <VL53L0X_RdDWord>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005866:	4313      	orrs	r3, r2
 8005868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005876:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	0bdb      	lsrs	r3, r3, #15
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005888:	2224      	movs	r2, #36	; 0x24
 800588a:	2194      	movs	r1, #148	; 0x94
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f002 f9cf 	bl	8007c30 <VL53L0X_WrByte>
 8005892:	4603      	mov	r3, r0
 8005894:	461a      	mov	r2, r3
 8005896:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800589a:	4313      	orrs	r3, r2
 800589c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fec7 	bl	8005634 <VL53L0X_device_read_strobe>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058b8:	461a      	mov	r2, r3
 80058ba:	2190      	movs	r1, #144	; 0x90
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f002 fa9b 	bl	8007df8 <VL53L0X_RdDWord>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	0e1b      	lsrs	r3, r3, #24
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80058d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80058ee:	2225      	movs	r2, #37	; 0x25
 80058f0:	2194      	movs	r1, #148	; 0x94
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f002 f99c 	bl	8007c30 <VL53L0X_WrByte>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005900:	4313      	orrs	r3, r2
 8005902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fe94 	bl	8005634 <VL53L0X_device_read_strobe>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005914:	4313      	orrs	r3, r2
 8005916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800591a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800591e:	461a      	mov	r2, r3
 8005920:	2190      	movs	r1, #144	; 0x90
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f002 fa68 	bl	8007df8 <VL53L0X_RdDWord>
 8005928:	4603      	mov	r3, r0
 800592a:	461a      	mov	r2, r3
 800592c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005930:	4313      	orrs	r3, r2
 8005932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	0e1b      	lsrs	r3, r3, #24
 800593a:	b2db      	uxtb	r3, r3
 800593c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8189 	beq.w	8005c64 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005952:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005956:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8182 	bne.w	8005c64 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005960:	2202      	movs	r2, #2
 8005962:	2194      	movs	r1, #148	; 0x94
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 f963 	bl	8007c30 <VL53L0X_WrByte>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005972:	4313      	orrs	r3, r2
 8005974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fe5b 	bl	8005634 <VL53L0X_device_read_strobe>
 800597e:	4603      	mov	r3, r0
 8005980:	461a      	mov	r2, r3
 8005982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005986:	4313      	orrs	r3, r2
 8005988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800598c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005990:	461a      	mov	r2, r3
 8005992:	2190      	movs	r1, #144	; 0x90
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 f9cd 	bl	8007d34 <VL53L0X_RdByte>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80059a8:	227b      	movs	r2, #123	; 0x7b
 80059aa:	2194      	movs	r1, #148	; 0x94
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f002 f93f 	bl	8007c30 <VL53L0X_WrByte>
 80059b2:	4603      	mov	r3, r0
 80059b4:	461a      	mov	r2, r3
 80059b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff fe37 	bl	8005634 <VL53L0X_device_read_strobe>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80059d4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80059d8:	461a      	mov	r2, r3
 80059da:	2190      	movs	r1, #144	; 0x90
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 f9a9 	bl	8007d34 <VL53L0X_RdByte>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80059f0:	2277      	movs	r2, #119	; 0x77
 80059f2:	2194      	movs	r1, #148	; 0x94
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f002 f91b 	bl	8007c30 <VL53L0X_WrByte>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff fe13 	bl	8005634 <VL53L0X_device_read_strobe>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005a1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a20:	461a      	mov	r2, r3
 8005a22:	2190      	movs	r1, #144	; 0x90
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f002 f9e7 	bl	8007df8 <VL53L0X_RdDWord>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	0e5b      	lsrs	r3, r3, #25
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	0c9b      	lsrs	r3, r3, #18
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	0adb      	lsrs	r3, r3, #11
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005a82:	2278      	movs	r2, #120	; 0x78
 8005a84:	2194      	movs	r1, #148	; 0x94
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f002 f8d2 	bl	8007c30 <VL53L0X_WrByte>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fdca 	bl	8005634 <VL53L0X_device_read_strobe>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2190      	movs	r1, #144	; 0x90
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 f99e 	bl	8007df8 <VL53L0X_RdDWord>
 8005abc:	4603      	mov	r3, r0
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	0f5b      	lsrs	r3, r3, #29
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8005ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ada:	4413      	add	r3, r2
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	0d9b      	lsrs	r3, r3, #22
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	0bdb      	lsrs	r3, r3, #15
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	019b      	lsls	r3, r3, #6
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005b2a:	2279      	movs	r2, #121	; 0x79
 8005b2c:	2194      	movs	r1, #148	; 0x94
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 f87e 	bl	8007c30 <VL53L0X_WrByte>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fd76 	bl	8005634 <VL53L0X_device_read_strobe>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2190      	movs	r1, #144	; 0x90
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 f94a 	bl	8007df8 <VL53L0X_RdDWord>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	0e9b      	lsrs	r3, r3, #26
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005b7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b82:	4413      	add	r3, r2
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	0cdb      	lsrs	r3, r3, #19
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	0b1b      	lsrs	r3, r3, #12
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005bc4:	227a      	movs	r2, #122	; 0x7a
 8005bc6:	2194      	movs	r1, #148	; 0x94
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f002 f831 	bl	8007c30 <VL53L0X_WrByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fd29 	bl	8005634 <VL53L0X_device_read_strobe>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	2190      	movs	r1, #144	; 0x90
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f002 f8fd 	bl	8007df8 <VL53L0X_RdDWord>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	0f9b      	lsrs	r3, r3, #30
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c16:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8005c18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	0ddb      	lsrs	r3, r3, #23
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	0c1b      	lsrs	r3, r3, #16
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	0a5b      	lsrs	r3, r3, #9
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	089b      	lsrs	r3, r3, #2
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80f1 	beq.w	8005e52 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005c70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f040 80ea 	bne.w	8005e52 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005c7e:	227b      	movs	r2, #123	; 0x7b
 8005c80:	2194      	movs	r1, #148	; 0x94
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f001 ffd4 	bl	8007c30 <VL53L0X_WrByte>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fccc 	bl	8005634 <VL53L0X_device_read_strobe>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cae:	461a      	mov	r2, r3
 8005cb0:	2190      	movs	r1, #144	; 0x90
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 f8a0 	bl	8007df8 <VL53L0X_RdDWord>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005cc6:	227c      	movs	r2, #124	; 0x7c
 8005cc8:	2194      	movs	r1, #148	; 0x94
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 ffb0 	bl	8007c30 <VL53L0X_WrByte>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fca8 	bl	8005634 <VL53L0X_device_read_strobe>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2190      	movs	r1, #144	; 0x90
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f002 f87c 	bl	8007df8 <VL53L0X_RdDWord>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005d0e:	2273      	movs	r2, #115	; 0x73
 8005d10:	2194      	movs	r1, #148	; 0x94
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 ff8c 	bl	8007c30 <VL53L0X_WrByte>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fc84 	bl	8005634 <VL53L0X_device_read_strobe>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2190      	movs	r1, #144	; 0x90
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f002 f858 	bl	8007df8 <VL53L0X_RdDWord>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005d5e:	2274      	movs	r2, #116	; 0x74
 8005d60:	2194      	movs	r1, #148	; 0x94
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f001 ff64 	bl	8007c30 <VL53L0X_WrByte>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fc5c 	bl	8005634 <VL53L0X_device_read_strobe>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d8e:	461a      	mov	r2, r3
 8005d90:	2190      	movs	r1, #144	; 0x90
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f002 f830 	bl	8007df8 <VL53L0X_RdDWord>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005daa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dac:	4313      	orrs	r3, r2
 8005dae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005db0:	2275      	movs	r2, #117	; 0x75
 8005db2:	2194      	movs	r1, #148	; 0x94
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 ff3b 	bl	8007c30 <VL53L0X_WrByte>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fc33 	bl	8005634 <VL53L0X_device_read_strobe>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ddc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005de0:	461a      	mov	r2, r3
 8005de2:	2190      	movs	r1, #144	; 0x90
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 f807 	bl	8007df8 <VL53L0X_RdDWord>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005e00:	2276      	movs	r2, #118	; 0x76
 8005e02:	2194      	movs	r1, #148	; 0x94
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 ff13 	bl	8007c30 <VL53L0X_WrByte>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fc0b 	bl	8005634 <VL53L0X_device_read_strobe>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	461a      	mov	r2, r3
 8005e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e30:	461a      	mov	r2, r3
 8005e32:	2190      	movs	r1, #144	; 0x90
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 ffdf 	bl	8007df8 <VL53L0X_RdDWord>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005e4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005e52:	2200      	movs	r2, #0
 8005e54:	2181      	movs	r1, #129	; 0x81
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 feea 	bl	8007c30 <VL53L0X_WrByte>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005e6a:	2206      	movs	r2, #6
 8005e6c:	21ff      	movs	r1, #255	; 0xff
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f001 fede 	bl	8007c30 <VL53L0X_WrByte>
 8005e74:	4603      	mov	r3, r0
 8005e76:	461a      	mov	r2, r3
 8005e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005e82:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005e86:	461a      	mov	r2, r3
 8005e88:	2183      	movs	r1, #131	; 0x83
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 ff52 	bl	8007d34 <VL53L0X_RdByte>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ea2:	f023 0304 	bic.w	r3, r3, #4
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2183      	movs	r1, #131	; 0x83
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f001 febf 	bl	8007c30 <VL53L0X_WrByte>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	21ff      	movs	r1, #255	; 0xff
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 feb3 	bl	8007c30 <VL53L0X_WrByte>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fea7 	bl	8007c30 <VL53L0X_WrByte>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	21ff      	movs	r1, #255	; 0xff
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 fe9b 	bl	8007c30 <VL53L0X_WrByte>
 8005efa:	4603      	mov	r3, r0
 8005efc:	461a      	mov	r2, r3
 8005efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fe8f 	bl	8007c30 <VL53L0X_WrByte>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005f20:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f040 808f 	bne.w	8006048 <VL53L0X_get_info_from_device+0x98e>
 8005f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	f000 808a 	beq.w	8006048 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d024      	beq.n	8005f88 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f42:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11e      	bne.n	8005f88 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005f50:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005f5a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f62:	e00e      	b.n	8005f82 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005f64:	f107 0208 	add.w	r2, r7, #8
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	4413      	add	r3, r2
 8005f6c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005f78:	460a      	mov	r2, r1
 8005f7a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7e:	3301      	adds	r3, #1
 8005f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	dded      	ble.n	8005f64 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d018      	beq.n	8005fc4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f96:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d112      	bne.n	8005fc4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005f9e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fa8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	33f3      	adds	r3, #243	; 0xf3
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005fb8:	f107 0310 	add.w	r3, r7, #16
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fc0:	f001 ffbe 	bl	8007f40 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d030      	beq.n	8006030 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005fce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005fd2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12a      	bne.n	8006030 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fec:	025b      	lsls	r3, r3, #9
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	2b00      	cmp	r3, #0
 8006002:	d011      	beq.n	8006028 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800600c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006018:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800601c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006020:	425b      	negs	r3, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006028:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006030:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	4313      	orrs	r3, r2
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800603e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006048:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800604c:	4618      	mov	r0, r3
 800604e:	3760      	adds	r7, #96	; 0x60
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006060:	f240 6277 	movw	r2, #1655	; 0x677
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800606c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006070:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006082:	68bb      	ldr	r3, [r7, #8]
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80060b0:	e005      	b.n	80060be <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80060b8:	89fb      	ldrh	r3, [r7, #14]
 80060ba:	3301      	adds	r3, #1
 80060bc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f4      	bne.n	80060b2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80060c8:	89fb      	ldrh	r3, [r7, #14]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80060d6:	4413      	add	r3, r2
 80060d8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80060da:	8afb      	ldrh	r3, [r7, #22]

}
 80060dc:	4618      	mov	r0, r3
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	0a12      	lsrs	r2, r2, #8
 80060fe:	b292      	uxth	r2, r2
 8006100:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006106:	68fb      	ldr	r3, [r7, #12]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	4619      	mov	r1, r3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff ff92 	bl	8006054 <VL53L0X_calc_macro_period_ps>
 8006130:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006138:	4a0a      	ldr	r2, [pc, #40]	; (8006164 <VL53L0X_calc_timeout_mclks+0x50>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	099b      	lsrs	r3, r3, #6
 8006140:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006148:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	441a      	add	r2, r3
	timeout_period_mclks =
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	fbb2 f3f3 	udiv	r3, r2, r3
 8006158:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800615a:	69fb      	ldr	r3, [r7, #28]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	10624dd3 	.word	0x10624dd3

08006168 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	807b      	strh	r3, [r7, #2]
 8006174:	4613      	mov	r3, r2
 8006176:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800617c:	787b      	ldrb	r3, [r7, #1]
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff ff67 	bl	8006054 <VL53L0X_calc_macro_period_ps>
 8006186:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800618e:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <VL53L0X_calc_timeout_us+0x50>)
 8006190:	fba2 2303 	umull	r2, r3, r2, r3
 8006194:	099b      	lsrs	r3, r3, #6
 8006196:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006198:	887b      	ldrh	r3, [r7, #2]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
 80061a0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80061a4:	4a04      	ldr	r2, [pc, #16]	; (80061b8 <VL53L0X_calc_timeout_us+0x50>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	099b      	lsrs	r3, r3, #6
 80061ac:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80061ae:	697b      	ldr	r3, [r7, #20]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	10624dd3 	.word	0x10624dd3

080061bc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08c      	sub	sp, #48	; 0x30
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	460b      	mov	r3, r1
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80061e2:	7afb      	ldrb	r3, [r7, #11]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <get_sequence_step_timeout+0x38>
 80061e8:	7afb      	ldrb	r3, [r7, #11]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d002      	beq.n	80061f4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80061ee:	7afb      	ldrb	r3, [r7, #11]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d128      	bne.n	8006246 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80061f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80061f8:	461a      	mov	r2, r3
 80061fa:	2100      	movs	r1, #0
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7fd fa7d 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006208:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006210:	f107 0320 	add.w	r3, r7, #32
 8006214:	461a      	mov	r2, r3
 8006216:	2146      	movs	r1, #70	; 0x46
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f001 fd8b 	bl	8007d34 <VL53L0X_RdByte>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006224:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006228:	b29b      	uxth	r3, r3
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff ff5c 	bl	80060e8 <VL53L0X_decode_timeout>
 8006230:	4603      	mov	r3, r0
 8006232:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006234:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff ff93 	bl	8006168 <VL53L0X_calc_timeout_us>
 8006242:	62b8      	str	r0, [r7, #40]	; 0x28
 8006244:	e092      	b.n	800636c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	2b03      	cmp	r3, #3
 800624a:	d135      	bne.n	80062b8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800624c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006250:	461a      	mov	r2, r3
 8006252:	2100      	movs	r1, #0
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7fd fa51 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006260:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006264:	2b00      	cmp	r3, #0
 8006266:	f040 8081 	bne.w	800636c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800626a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800626e:	461a      	mov	r2, r3
 8006270:	2100      	movs	r1, #0
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7fd fa42 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800627e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006286:	f107 031e 	add.w	r3, r7, #30
 800628a:	461a      	mov	r2, r3
 800628c:	2151      	movs	r1, #81	; 0x51
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f001 fd7a 	bl	8007d88 <VL53L0X_RdWord>
 8006294:	4603      	mov	r3, r0
 8006296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800629a:	8bfb      	ldrh	r3, [r7, #30]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff ff23 	bl	80060e8 <VL53L0X_decode_timeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80062a6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80062aa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ac:	4619      	mov	r1, r3
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff ff5a 	bl	8006168 <VL53L0X_calc_timeout_us>
 80062b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80062b6:	e059      	b.n	800636c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d156      	bne.n	800636c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80062be:	f107 0314 	add.w	r3, r7, #20
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7fd fb25 	bl	8003914 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01d      	beq.n	8006310 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80062d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80062d8:	461a      	mov	r2, r3
 80062da:	2100      	movs	r1, #0
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7fd fa0d 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 80062e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10f      	bne.n	8006310 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80062f0:	f107 031e 	add.w	r3, r7, #30
 80062f4:	461a      	mov	r2, r3
 80062f6:	2151      	movs	r1, #81	; 0x51
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f001 fd45 	bl	8007d88 <VL53L0X_RdWord>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006304:	8bfb      	ldrh	r3, [r7, #30]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff feee 	bl	80060e8 <VL53L0X_decode_timeout>
 800630c:	4603      	mov	r3, r0
 800630e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006310:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006318:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800631c:	461a      	mov	r2, r3
 800631e:	2101      	movs	r1, #1
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f7fd f9eb 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800632c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10f      	bne.n	8006354 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006334:	f107 031c 	add.w	r3, r7, #28
 8006338:	461a      	mov	r2, r3
 800633a:	2171      	movs	r1, #113	; 0x71
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f001 fd23 	bl	8007d88 <VL53L0X_RdWord>
 8006342:	4603      	mov	r3, r0
 8006344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006348:	8bbb      	ldrh	r3, [r7, #28]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fecc 	bl	80060e8 <VL53L0X_decode_timeout>
 8006350:	4603      	mov	r3, r0
 8006352:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800635c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006362:	4619      	mov	r1, r3
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff feff 	bl	8006168 <VL53L0X_calc_timeout_us>
 800636a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006370:	601a      	str	r2, [r3, #0]

	return Status;
 8006372:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006376:	4618      	mov	r0, r3
 8006378:	3730      	adds	r7, #48	; 0x30
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b08a      	sub	sp, #40	; 0x28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	460b      	mov	r3, r1
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800638c:	2300      	movs	r3, #0
 800638e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <set_sequence_step_timeout+0x26>
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d002      	beq.n	80063a4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d138      	bne.n	8006416 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80063a4:	f107 031b 	add.w	r3, r7, #27
 80063a8:	461a      	mov	r2, r3
 80063aa:	2100      	movs	r1, #0
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7fd f9a5 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80063b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11a      	bne.n	80063f6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80063c0:	7efb      	ldrb	r3, [r7, #27]
 80063c2:	461a      	mov	r2, r3
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff fea4 	bl	8006114 <VL53L0X_calc_timeout_mclks>
 80063cc:	4603      	mov	r3, r0
 80063ce:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80063d0:	8bbb      	ldrh	r3, [r7, #28]
 80063d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d6:	d903      	bls.n	80063e0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80063d8:	23ff      	movs	r3, #255	; 0xff
 80063da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063de:	e004      	b.n	80063ea <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80063e0:	8bbb      	ldrh	r3, [r7, #28]
 80063e2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80063e4:	3b01      	subs	r3, #1
 80063e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80063ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80063f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f040 80ab 	bne.w	8006556 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8006400:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006404:	461a      	mov	r2, r3
 8006406:	2146      	movs	r1, #70	; 0x46
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f001 fc11 	bl	8007c30 <VL53L0X_WrByte>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8006414:	e09f      	b.n	8006556 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006416:	7afb      	ldrb	r3, [r7, #11]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d135      	bne.n	8006488 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800641c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11b      	bne.n	800645c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006424:	f107 031b 	add.w	r3, r7, #27
 8006428:	461a      	mov	r2, r3
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7fd f965 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006438:	7efb      	ldrb	r3, [r7, #27]
 800643a:	461a      	mov	r2, r3
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7ff fe68 	bl	8006114 <VL53L0X_calc_timeout_mclks>
 8006444:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8006446:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8006448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff fe20 	bl	8006090 <VL53L0X_encode_timeout>
 8006450:	4603      	mov	r3, r0
 8006452:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006454:	8b3a      	ldrh	r2, [r7, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800645c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006460:	2b00      	cmp	r3, #0
 8006462:	d108      	bne.n	8006476 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8006464:	8b3b      	ldrh	r3, [r7, #24]
 8006466:	461a      	mov	r2, r3
 8006468:	2151      	movs	r1, #81	; 0x51
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f001 fc04 	bl	8007c78 <VL53L0X_WrWord>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006476:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800647a:	2b00      	cmp	r3, #0
 800647c:	d16b      	bne.n	8006556 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006486:	e066      	b.n	8006556 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	2b04      	cmp	r3, #4
 800648c:	d160      	bne.n	8006550 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7fd fa3d 	bl	8003914 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01d      	beq.n	80064e0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80064a4:	f107 031b 	add.w	r3, r7, #27
 80064a8:	461a      	mov	r2, r3
 80064aa:	2100      	movs	r1, #0
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7fd f925 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 80064b2:	4603      	mov	r3, r0
 80064b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 80064b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80064c0:	f107 0318 	add.w	r3, r7, #24
 80064c4:	461a      	mov	r2, r3
 80064c6:	2151      	movs	r1, #81	; 0x51
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fc5d 	bl	8007d88 <VL53L0X_RdWord>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80064d4:	8b3b      	ldrh	r3, [r7, #24]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fe06 	bl	80060e8 <VL53L0X_decode_timeout>
 80064dc:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80064de:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80064e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d109      	bne.n	80064fc <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80064e8:	f107 031b 	add.w	r3, r7, #27
 80064ec:	461a      	mov	r2, r3
 80064ee:	2101      	movs	r1, #1
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7fd f903 	bl	80036fc <VL53L0X_GetVcselPulsePeriod>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80064fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006500:	2b00      	cmp	r3, #0
 8006502:	d128      	bne.n	8006556 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006504:	7efb      	ldrb	r3, [r7, #27]
 8006506:	461a      	mov	r2, r3
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff fe02 	bl	8006114 <VL53L0X_calc_timeout_mclks>
 8006510:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	4413      	add	r3, r2
 8006518:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800651a:	6a38      	ldr	r0, [r7, #32]
 800651c:	f7ff fdb8 	bl	8006090 <VL53L0X_encode_timeout>
 8006520:	4603      	mov	r3, r0
 8006522:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8006524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800652c:	8bfb      	ldrh	r3, [r7, #30]
 800652e:	461a      	mov	r2, r3
 8006530:	2171      	movs	r1, #113	; 0x71
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 fba0 	bl	8007c78 <VL53L0X_WrWord>
 8006538:	4603      	mov	r3, r0
 800653a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800653e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006542:	2b00      	cmp	r3, #0
 8006544:	d107      	bne.n	8006556 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800654e:	e002      	b.n	8006556 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006550:	23fc      	movs	r3, #252	; 0xfc
 8006552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8006556:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800655a:	4618      	mov	r0, r3
 800655c:	3728      	adds	r7, #40	; 0x28
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b08a      	sub	sp, #40	; 0x28
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	70fb      	strb	r3, [r7, #3]
 800656e:	4613      	mov	r3, r2
 8006570:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006578:	230c      	movs	r3, #12
 800657a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800657e:	2312      	movs	r3, #18
 8006580:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006584:	2308      	movs	r3, #8
 8006586:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800658a:	230e      	movs	r3, #14
 800658c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006594:	78bb      	ldrb	r3, [r7, #2]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065a0:	23fc      	movs	r3, #252	; 0xfc
 80065a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065a6:	e020      	b.n	80065ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10d      	bne.n	80065ca <VL53L0X_set_vcsel_pulse_period+0x68>
 80065ae:	78ba      	ldrb	r2, [r7, #2]
 80065b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d304      	bcc.n	80065c2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80065b8:	78ba      	ldrb	r2, [r7, #2]
 80065ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80065be:	429a      	cmp	r2, r3
 80065c0:	d903      	bls.n	80065ca <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065c2:	23fc      	movs	r3, #252	; 0xfc
 80065c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065c8:	e00f      	b.n	80065ea <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d10c      	bne.n	80065ea <VL53L0X_set_vcsel_pulse_period+0x88>
 80065d0:	78ba      	ldrb	r2, [r7, #2]
 80065d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d304      	bcc.n	80065e4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80065da:	78ba      	ldrb	r2, [r7, #2]
 80065dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d902      	bls.n	80065ea <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065e4:	23fc      	movs	r3, #252	; 0xfc
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80065ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80065f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f6:	e239      	b.n	8006a6c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d150      	bne.n	80066a0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 80065fe:	78bb      	ldrb	r3, [r7, #2]
 8006600:	2b0c      	cmp	r3, #12
 8006602:	d110      	bne.n	8006626 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006604:	2218      	movs	r2, #24
 8006606:	2157      	movs	r1, #87	; 0x57
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fb11 	bl	8007c30 <VL53L0X_WrByte>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8006614:	2208      	movs	r2, #8
 8006616:	2156      	movs	r1, #86	; 0x56
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 fb09 	bl	8007c30 <VL53L0X_WrByte>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006624:	e17f      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006626:	78bb      	ldrb	r3, [r7, #2]
 8006628:	2b0e      	cmp	r3, #14
 800662a:	d110      	bne.n	800664e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800662c:	2230      	movs	r2, #48	; 0x30
 800662e:	2157      	movs	r1, #87	; 0x57
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fafd 	bl	8007c30 <VL53L0X_WrByte>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800663c:	2208      	movs	r2, #8
 800663e:	2156      	movs	r1, #86	; 0x56
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 faf5 	bl	8007c30 <VL53L0X_WrByte>
 8006646:	4603      	mov	r3, r0
 8006648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800664c:	e16b      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800664e:	78bb      	ldrb	r3, [r7, #2]
 8006650:	2b10      	cmp	r3, #16
 8006652:	d110      	bne.n	8006676 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	2157      	movs	r1, #87	; 0x57
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fae9 	bl	8007c30 <VL53L0X_WrByte>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8006664:	2208      	movs	r2, #8
 8006666:	2156      	movs	r1, #86	; 0x56
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f001 fae1 	bl	8007c30 <VL53L0X_WrByte>
 800666e:	4603      	mov	r3, r0
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006674:	e157      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006676:	78bb      	ldrb	r3, [r7, #2]
 8006678:	2b12      	cmp	r3, #18
 800667a:	f040 8154 	bne.w	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800667e:	2250      	movs	r2, #80	; 0x50
 8006680:	2157      	movs	r1, #87	; 0x57
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fad4 	bl	8007c30 <VL53L0X_WrByte>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800668e:	2208      	movs	r2, #8
 8006690:	2156      	movs	r1, #86	; 0x56
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 facc 	bl	8007c30 <VL53L0X_WrByte>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800669e:	e142      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	f040 813f 	bne.w	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80066a8:	78bb      	ldrb	r3, [r7, #2]
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d14c      	bne.n	8006748 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80066ae:	2210      	movs	r2, #16
 80066b0:	2148      	movs	r1, #72	; 0x48
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fabc 	bl	8007c30 <VL53L0X_WrByte>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80066be:	2208      	movs	r2, #8
 80066c0:	2147      	movs	r1, #71	; 0x47
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fab4 	bl	8007c30 <VL53L0X_WrByte>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80066ce:	2202      	movs	r2, #2
 80066d0:	2132      	movs	r1, #50	; 0x32
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 faac 	bl	8007c30 <VL53L0X_WrByte>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
 80066dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e0:	4313      	orrs	r3, r2
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 80066e6:	220c      	movs	r2, #12
 80066e8:	2130      	movs	r1, #48	; 0x30
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 faa0 	bl	8007c30 <VL53L0X_WrByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80066fe:	2201      	movs	r2, #1
 8006700:	21ff      	movs	r1, #255	; 0xff
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 fa94 	bl	8007c30 <VL53L0X_WrByte>
 8006708:	4603      	mov	r3, r0
 800670a:	461a      	mov	r2, r3
 800670c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006710:	4313      	orrs	r3, r2
 8006712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006716:	2230      	movs	r2, #48	; 0x30
 8006718:	2130      	movs	r1, #48	; 0x30
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fa88 	bl	8007c30 <VL53L0X_WrByte>
 8006720:	4603      	mov	r3, r0
 8006722:	461a      	mov	r2, r3
 8006724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006728:	4313      	orrs	r3, r2
 800672a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800672e:	2200      	movs	r2, #0
 8006730:	21ff      	movs	r1, #255	; 0xff
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fa7c 	bl	8007c30 <VL53L0X_WrByte>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006740:	4313      	orrs	r3, r2
 8006742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006746:	e0ee      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8006748:	78bb      	ldrb	r3, [r7, #2]
 800674a:	2b0a      	cmp	r3, #10
 800674c:	d14c      	bne.n	80067e8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800674e:	2228      	movs	r2, #40	; 0x28
 8006750:	2148      	movs	r1, #72	; 0x48
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 fa6c 	bl	8007c30 <VL53L0X_WrByte>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800675e:	2208      	movs	r2, #8
 8006760:	2147      	movs	r1, #71	; 0x47
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f001 fa64 	bl	8007c30 <VL53L0X_WrByte>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800676e:	2203      	movs	r2, #3
 8006770:	2132      	movs	r1, #50	; 0x32
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fa5c 	bl	8007c30 <VL53L0X_WrByte>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006780:	4313      	orrs	r3, r2
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006786:	2209      	movs	r2, #9
 8006788:	2130      	movs	r1, #48	; 0x30
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fa50 	bl	8007c30 <VL53L0X_WrByte>
 8006790:	4603      	mov	r3, r0
 8006792:	461a      	mov	r2, r3
 8006794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006798:	4313      	orrs	r3, r2
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800679e:	2201      	movs	r2, #1
 80067a0:	21ff      	movs	r1, #255	; 0xff
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fa44 	bl	8007c30 <VL53L0X_WrByte>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80067b6:	2220      	movs	r2, #32
 80067b8:	2130      	movs	r1, #48	; 0x30
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fa38 	bl	8007c30 <VL53L0X_WrByte>
 80067c0:	4603      	mov	r3, r0
 80067c2:	461a      	mov	r2, r3
 80067c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80067ce:	2200      	movs	r2, #0
 80067d0:	21ff      	movs	r1, #255	; 0xff
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fa2c 	bl	8007c30 <VL53L0X_WrByte>
 80067d8:	4603      	mov	r3, r0
 80067da:	461a      	mov	r2, r3
 80067dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80067e6:	e09e      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80067e8:	78bb      	ldrb	r3, [r7, #2]
 80067ea:	2b0c      	cmp	r3, #12
 80067ec:	d14c      	bne.n	8006888 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 80067ee:	2238      	movs	r2, #56	; 0x38
 80067f0:	2148      	movs	r1, #72	; 0x48
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f001 fa1c 	bl	8007c30 <VL53L0X_WrByte>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 80067fe:	2208      	movs	r2, #8
 8006800:	2147      	movs	r1, #71	; 0x47
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fa14 	bl	8007c30 <VL53L0X_WrByte>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800680e:	2203      	movs	r2, #3
 8006810:	2132      	movs	r1, #50	; 0x32
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fa0c 	bl	8007c30 <VL53L0X_WrByte>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006820:	4313      	orrs	r3, r2
 8006822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006826:	2208      	movs	r2, #8
 8006828:	2130      	movs	r1, #48	; 0x30
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fa00 	bl	8007c30 <VL53L0X_WrByte>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006838:	4313      	orrs	r3, r2
 800683a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800683e:	2201      	movs	r2, #1
 8006840:	21ff      	movs	r1, #255	; 0xff
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 f9f4 	bl	8007c30 <VL53L0X_WrByte>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
 800684c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006850:	4313      	orrs	r3, r2
 8006852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006856:	2220      	movs	r2, #32
 8006858:	2130      	movs	r1, #48	; 0x30
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 f9e8 	bl	8007c30 <VL53L0X_WrByte>
 8006860:	4603      	mov	r3, r0
 8006862:	461a      	mov	r2, r3
 8006864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006868:	4313      	orrs	r3, r2
 800686a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800686e:	2200      	movs	r2, #0
 8006870:	21ff      	movs	r1, #255	; 0xff
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f9dc 	bl	8007c30 <VL53L0X_WrByte>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006880:	4313      	orrs	r3, r2
 8006882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006886:	e04e      	b.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006888:	78bb      	ldrb	r3, [r7, #2]
 800688a:	2b0e      	cmp	r3, #14
 800688c:	d14b      	bne.n	8006926 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800688e:	2248      	movs	r2, #72	; 0x48
 8006890:	2148      	movs	r1, #72	; 0x48
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 f9cc 	bl	8007c30 <VL53L0X_WrByte>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800689e:	2208      	movs	r2, #8
 80068a0:	2147      	movs	r1, #71	; 0x47
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f9c4 	bl	8007c30 <VL53L0X_WrByte>
 80068a8:	4603      	mov	r3, r0
 80068aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80068ae:	2203      	movs	r2, #3
 80068b0:	2132      	movs	r1, #50	; 0x32
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 f9bc 	bl	8007c30 <VL53L0X_WrByte>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80068c6:	2207      	movs	r2, #7
 80068c8:	2130      	movs	r1, #48	; 0x30
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 f9b0 	bl	8007c30 <VL53L0X_WrByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068d8:	4313      	orrs	r3, r2
 80068da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80068de:	2201      	movs	r2, #1
 80068e0:	21ff      	movs	r1, #255	; 0xff
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 f9a4 	bl	8007c30 <VL53L0X_WrByte>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80068f6:	2220      	movs	r2, #32
 80068f8:	2130      	movs	r1, #48	; 0x30
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f998 	bl	8007c30 <VL53L0X_WrByte>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006908:	4313      	orrs	r3, r2
 800690a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800690e:	2200      	movs	r2, #0
 8006910:	21ff      	movs	r1, #255	; 0xff
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f98c 	bl	8007c30 <VL53L0X_WrByte>
 8006918:	4603      	mov	r3, r0
 800691a:	461a      	mov	r2, r3
 800691c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006920:	4313      	orrs	r3, r2
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8006926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800692a:	2b00      	cmp	r3, #0
 800692c:	d17f      	bne.n	8006a2e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800692e:	78bb      	ldrb	r3, [r7, #2]
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe fe38 	bl	80055a6 <VL53L0X_encode_vcsel_period>
 8006936:	4603      	mov	r3, r0
 8006938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8006942:	2b01      	cmp	r3, #1
 8006944:	d045      	beq.n	80069d2 <VL53L0X_set_vcsel_pulse_period+0x470>
 8006946:	e06e      	b.n	8006a26 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006948:	f107 0314 	add.w	r3, r7, #20
 800694c:	461a      	mov	r2, r3
 800694e:	2103      	movs	r1, #3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fc33 	bl	80061bc <get_sequence_step_timeout>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800695c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8006964:	f107 0310 	add.w	r3, r7, #16
 8006968:	461a      	mov	r2, r3
 800696a:	2102      	movs	r1, #2
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff fc25 	bl	80061bc <get_sequence_step_timeout>
 8006972:	4603      	mov	r3, r0
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006980:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006984:	461a      	mov	r2, r3
 8006986:	2150      	movs	r1, #80	; 0x50
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f951 	bl	8007c30 <VL53L0X_WrByte>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006994:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006998:	2b00      	cmp	r3, #0
 800699a:	d108      	bne.n	80069ae <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	461a      	mov	r2, r3
 80069a0:	2103      	movs	r1, #3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fceb 	bl	800637e <set_sequence_step_timeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 80069ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	461a      	mov	r2, r3
 80069ba:	2102      	movs	r1, #2
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff fcde 	bl	800637e <set_sequence_step_timeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	78ba      	ldrb	r2, [r7, #2]
 80069cc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80069d0:	e02e      	b.n	8006a30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80069d2:	f107 0318 	add.w	r3, r7, #24
 80069d6:	461a      	mov	r2, r3
 80069d8:	2104      	movs	r1, #4
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7ff fbee 	bl	80061bc <get_sequence_step_timeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80069e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 80069ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069f2:	461a      	mov	r2, r3
 80069f4:	2170      	movs	r1, #112	; 0x70
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 f91a 	bl	8007c30 <VL53L0X_WrByte>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006a02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d108      	bne.n	8006a1c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2104      	movs	r1, #4
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff fcb4 	bl	800637e <set_sequence_step_timeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	78ba      	ldrb	r2, [r7, #2]
 8006a20:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006a24:	e004      	b.n	8006a30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a26:	23fc      	movs	r3, #252	; 0xfc
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a2c:	e000      	b.n	8006a30 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8006a2e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d109      	bne.n	8006a4c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006a3e:	69f9      	ldr	r1, [r7, #28]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7fc fe1d 	bl	8003680 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006a46:	4603      	mov	r3, r0
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8006a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8006a54:	f107 010f 	add.w	r1, r7, #15
 8006a58:	2301      	movs	r3, #1
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fe fcbd 	bl	80053dc <VL53L0X_perform_phase_calibration>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8006a68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3728      	adds	r7, #40	; 0x28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d00a      	beq.n	8006aa6 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006a90:	e013      	b.n	8006aba <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006a92:	f107 0316 	add.w	r3, r7, #22
 8006a96:	461a      	mov	r2, r3
 8006a98:	2150      	movs	r1, #80	; 0x50
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 f94a 	bl	8007d34 <VL53L0X_RdByte>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006aa4:	e00b      	b.n	8006abe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006aa6:	f107 0316 	add.w	r3, r7, #22
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2170      	movs	r1, #112	; 0x70
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 f940 	bl	8007d34 <VL53L0X_RdByte>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006ab8:	e001      	b.n	8006abe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006aba:	23fc      	movs	r3, #252	; 0xfc
 8006abc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d107      	bne.n	8006ad6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006ac6:	7dbb      	ldrb	r3, [r7, #22]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fe fd59 	bl	8005580 <VL53L0X_decode_vcsel_period>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	701a      	strb	r2, [r3, #0]

	return Status;
 8006ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b092      	sub	sp, #72	; 0x48
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006af2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006af6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006af8:	f240 7376 	movw	r3, #1910	; 0x776
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8006afe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006b02:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006b04:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8006b0a:	f240 234e 	movw	r3, #590	; 0x24e
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8006b10:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006b16:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006b1a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006b1c:	f240 2326 	movw	r3, #550	; 0x226
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8006b26:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006b2a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d205      	bcs.n	8006b44 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006b38:	23fc      	movs	r3, #252	; 0xfc
 8006b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8006b3e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006b42:	e0aa      	b.n	8006c9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8006b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006b50:	f107 0314 	add.w	r3, r7, #20
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fc fedc 	bl	8003914 <VL53L0X_GetSequenceStepEnables>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8006b62:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d15b      	bne.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8006b6a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d105      	bne.n	8006b7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006b70:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006b76:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d052      	beq.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8006b7c:	f107 0310 	add.w	r3, r7, #16
 8006b80:	461a      	mov	r2, r3
 8006b82:	2102      	movs	r1, #2
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fb19 	bl	80061bc <get_sequence_step_timeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006b90:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006b98:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006b9c:	e07d      	b.n	8006c9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8006b9e:	7d3b      	ldrb	r3, [r7, #20]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00f      	beq.n	8006bc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006ba4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba8:	4413      	add	r3, r2
 8006baa:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d204      	bcs.n	8006bbe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	643b      	str	r3, [r7, #64]	; 0x40
 8006bbc:	e002      	b.n	8006bc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bbe:	23fc      	movs	r3, #252	; 0xfc
 8006bc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006bc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8006bcc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006bd0:	e063      	b.n	8006c9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006bd2:	7dbb      	ldrb	r3, [r7, #22]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d011      	beq.n	8006bfc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	4413      	add	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d204      	bcs.n	8006bf4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf2:	e016      	b.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006bf4:	23fc      	movs	r3, #252	; 0xfc
 8006bf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006bfa:	e012      	b.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8006bfc:	7d7b      	ldrb	r3, [r7, #21]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00f      	beq.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c06:	4413      	add	r3, r2
 8006c08:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d204      	bcs.n	8006c1c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8006c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	643b      	str	r3, [r7, #64]	; 0x40
 8006c1a:	e002      	b.n	8006c22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c1c:	23fc      	movs	r3, #252	; 0xfc
 8006c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8006c22:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006c2a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006c2e:	e034      	b.n	8006c9a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d019      	beq.n	8006c6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	2103      	movs	r1, #3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fabc 	bl	80061bc <get_sequence_step_timeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4e:	4413      	add	r3, r2
 8006c50:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d204      	bcs.n	8006c64 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	643b      	str	r3, [r7, #64]	; 0x40
 8006c62:	e002      	b.n	8006c6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c64:	23fc      	movs	r3, #252	; 0xfc
 8006c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8006c6a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d111      	bne.n	8006c96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006c72:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006c78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8006c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c82:	2104      	movs	r1, #4
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff fb7a 	bl	800637e <set_sequence_step_timeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006c96:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3748      	adds	r7, #72	; 0x48
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b090      	sub	sp, #64	; 0x40
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cac:	2300      	movs	r3, #0
 8006cae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006cb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006cb6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006cb8:	f240 7376 	movw	r3, #1910	; 0x776
 8006cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006cbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006cc4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006cc8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006cca:	f240 234e 	movw	r3, #590	; 0x24e
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006cd0:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006cd6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006cdc:	f240 2326 	movw	r3, #550	; 0x226
 8006ce0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006ce6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	441a      	add	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006cf0:	f107 0318 	add.w	r3, r7, #24
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fc fe0c 	bl	8003914 <VL53L0X_GetSequenceStepEnables>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006d02:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006d0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d0e:	e075      	b.n	8006dfc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006d10:	7e3b      	ldrb	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d105      	bne.n	8006d22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006d16:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006d1c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d030      	beq.n	8006d84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	461a      	mov	r2, r3
 8006d28:	2102      	movs	r1, #2
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fa46 	bl	80061bc <get_sequence_step_timeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006d36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d122      	bne.n	8006d84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006d3e:	7e3b      	ldrb	r3, [r7, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006d48:	6939      	ldr	r1, [r7, #16]
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d4e:	441a      	add	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006d54:	7ebb      	ldrb	r3, [r7, #26]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006d5e:	6939      	ldr	r1, [r7, #16]
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	440b      	add	r3, r1
 8006d64:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d66:	441a      	add	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e00a      	b.n	8006d84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006d6e:	7e7b      	ldrb	r3, [r7, #25]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006d78:	6939      	ldr	r1, [r7, #16]
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006d7e:	441a      	add	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006d84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d114      	bne.n	8006db6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006d8c:	7efb      	ldrb	r3, [r7, #27]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d011      	beq.n	8006db6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	461a      	mov	r2, r3
 8006d98:	2103      	movs	r1, #3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff fa0e 	bl	80061bc <get_sequence_step_timeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006daa:	68f9      	ldr	r1, [r7, #12]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006db0:	441a      	add	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d114      	bne.n	8006de8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006dbe:	7f3b      	ldrb	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d011      	beq.n	8006de8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006dc4:	f107 0314 	add.w	r3, r7, #20
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2104      	movs	r1, #4
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff f9f5 	bl	80061bc <get_sequence_step_timeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006ddc:	6979      	ldr	r1, [r7, #20]
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006de2:	441a      	add	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006de8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d103      	bne.n	8006df8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006df8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3740      	adds	r7, #64	; 0x40
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006e16:	e0c6      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	3301      	adds	r3, #1
 8006e26:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006e28:	7cfb      	ldrb	r3, [r7, #19]
 8006e2a:	2bff      	cmp	r3, #255	; 0xff
 8006e2c:	f040 808d 	bne.w	8006f4a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	747b      	strb	r3, [r7, #17]
			Index++;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006e40:	7c7b      	ldrb	r3, [r7, #17]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d87e      	bhi.n	8006f44 <VL53L0X_load_tuning_settings+0x140>
 8006e46:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <VL53L0X_load_tuning_settings+0x48>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e5d 	.word	0x08006e5d
 8006e50:	08006e97 	.word	0x08006e97
 8006e54:	08006ed1 	.word	0x08006ed1
 8006e58:	08006f0b 	.word	0x08006f0b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4413      	add	r3, r2
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	743b      	strb	r3, [r7, #16]
				Index++;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4413      	add	r3, r2
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006e7c:	7c3b      	ldrb	r3, [r7, #16]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	021b      	lsls	r3, r3, #8
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	4413      	add	r3, r2
 8006e8a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	89ba      	ldrh	r2, [r7, #12]
 8006e90:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006e94:	e087      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	4413      	add	r3, r2
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006eb6:	7c3b      	ldrb	r3, [r7, #16]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4413      	add	r3, r2
 8006ec4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	89ba      	ldrh	r2, [r7, #12]
 8006eca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006ece:	e06a      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	743b      	strb	r3, [r7, #16]
				Index++;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	3301      	adds	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006ef0:	7c3b      	ldrb	r3, [r7, #16]
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4413      	add	r3, r2
 8006efe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	89ba      	ldrh	r2, [r7, #12]
 8006f04:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006f08:	e04d      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	4413      	add	r3, r2
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	743b      	strb	r3, [r7, #16]
				Index++;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	3301      	adds	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	4413      	add	r3, r2
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	3301      	adds	r3, #1
 8006f28:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006f2a:	7c3b      	ldrb	r3, [r7, #16]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4413      	add	r3, r2
 8006f38:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	89ba      	ldrh	r2, [r7, #12]
 8006f3e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8006f42:	e030      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f44:	23fc      	movs	r3, #252	; 0xfc
 8006f46:	77fb      	strb	r3, [r7, #31]
 8006f48:	e02d      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006f4a:	7cfb      	ldrb	r3, [r7, #19]
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d828      	bhi.n	8006fa2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	4413      	add	r3, r2
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	e00f      	b.n	8006f86 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	7819      	ldrb	r1, [r3, #0]
 8006f6e:	f107 0208 	add.w	r2, r7, #8
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	4413      	add	r3, r2
 8006f76:	460a      	mov	r2, r1
 8006f78:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	7cfb      	ldrb	r3, [r7, #19]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	dbeb      	blt.n	8006f66 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006f8e:	7cfb      	ldrb	r3, [r7, #19]
 8006f90:	f107 0208 	add.w	r2, r7, #8
 8006f94:	7cb9      	ldrb	r1, [r7, #18]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fdee 	bl	8007b78 <VL53L0X_WriteMulti>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e001      	b.n	8006fa6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006fa2:	23fc      	movs	r3, #252	; 0xfc
 8006fa4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	4413      	add	r3, r2
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d004      	beq.n	8006fbc <VL53L0X_load_tuning_settings+0x1b8>
 8006fb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f43f af2e 	beq.w	8006e18 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006fbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006fde:	f107 0313 	add.w	r3, r7, #19
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7fc fd21 	bl	8003a2c <VL53L0X_GetXTalkCompensationEnable>
 8006fea:	4603      	mov	r3, r0
 8006fec:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006fee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d111      	bne.n	800701a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006ff6:	7cfb      	ldrb	r3, [r7, #19]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00e      	beq.n	800701a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	8a9b      	ldrh	r3, [r3, #20]
 8007006:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	fb02 f303 	mul.w	r3, r2, r3
 800700e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	3380      	adds	r3, #128	; 0x80
 8007014:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800701a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007032:	2300      	movs	r3, #0
 8007034:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	461a      	mov	r2, r3
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff ffbe 	bl	8006fc8 <VL53L0X_get_total_xtalk_rate>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8007050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d105      	bne.n	8007064 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	441a      	add	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	601a      	str	r2, [r3, #0]

	return Status;
 8007064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b09a      	sub	sp, #104	; 0x68
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800707e:	2312      	movs	r3, #18
 8007080:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8007082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007086:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007088:	2342      	movs	r3, #66	; 0x42
 800708a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800708c:	2306      	movs	r3, #6
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8007090:	2307      	movs	r3, #7
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007094:	2300      	movs	r3, #0
 8007096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80070a0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80070a8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	3380      	adds	r3, #128	; 0x80
 80070b8:	0a1b      	lsrs	r3, r3, #8
 80070ba:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80070bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070c0:	fb02 f303 	mul.w	r3, r2, r3
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01a      	beq.n	8007106 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80070da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070dc:	4413      	add	r3, r2
 80070de:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80070e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80070ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070ec:	4613      	mov	r3, r2
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	4413      	add	r3, r2
 80070f2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80070f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070f6:	fb03 f303 	mul.w	r3, r3, r3
 80070fa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80070fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007102:	0c1b      	lsrs	r3, r3, #16
 8007104:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800710a:	fb02 f303 	mul.w	r3, r2, r3
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	fb03 f303 	mul.w	r3, r3, r3
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007124:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007128:	0c1b      	lsrs	r3, r3, #16
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800712c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800712e:	085a      	lsrs	r2, r3, #1
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	441a      	add	r2, r3
 8007134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007136:	fbb2 f3f3 	udiv	r3, r2, r3
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714c:	d302      	bcc.n	8007154 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800714e:	4b54      	ldr	r3, [pc, #336]	; (80072a0 <VL53L0X_calc_dmax+0x230>)
 8007150:	663b      	str	r3, [r7, #96]	; 0x60
 8007152:	e015      	b.n	8007180 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007156:	085a      	lsrs	r2, r3, #1
 8007158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800715a:	441a      	add	r2, r3
 800715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8007164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007170:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8007178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800717a:	fb03 f303 	mul.w	r3, r3, r3
 800717e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8007180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007182:	039b      	lsls	r3, r3, #14
 8007184:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007188:	4a46      	ldr	r2, [pc, #280]	; (80072a4 <VL53L0X_calc_dmax+0x234>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	fb03 f303 	mul.w	r3, r3, r3
 8007198:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800719a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719c:	fb03 f303 	mul.w	r3, r3, r3
 80071a0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
 80071a4:	3308      	adds	r3, #8
 80071a6:	091b      	lsrs	r3, r3, #4
 80071a8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80071aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80071b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b4:	4613      	mov	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	4413      	add	r3, r2
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071c4:	0b9b      	lsrs	r3, r3, #14
 80071c6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80071c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071cc:	4413      	add	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80071d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	039b      	lsls	r3, r3, #14
 80071e8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	4413      	add	r3, r2
 80071f2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007202:	fb02 f303 	mul.w	r3, r2, r3
 8007206:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800720e:	4a25      	ldr	r2, [pc, #148]	; (80072a4 <VL53L0X_calc_dmax+0x234>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007224:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <VL53L0X_calc_dmax+0x234>)
 8007226:	fba2 2303 	umull	r2, r3, r2, r3
 800722a:	099b      	lsrs	r3, r3, #6
 800722c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800722e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007230:	3380      	adds	r3, #128	; 0x80
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	085a      	lsrs	r2, r3, #1
 8007240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007242:	441a      	add	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	fbb2 f3f3 	udiv	r3, r2, r3
 800724a:	65bb      	str	r3, [r7, #88]	; 0x58
 800724c:	e001      	b.n	8007252 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007252:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007254:	f7fe f9ba 	bl	80055cc <VL53L0X_isqrt>
 8007258:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d008      	beq.n	8007272 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	085a      	lsrs	r2, r3, #1
 8007264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007266:	441a      	add	r2, r3
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	fbb2 f3f3 	udiv	r3, r2, r3
 800726e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007270:	e001      	b.n	8007276 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007276:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007278:	f7fe f9a8 	bl	80055cc <VL53L0X_isqrt>
 800727c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800727e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007288:	429a      	cmp	r2, r3
 800728a:	d902      	bls.n	8007292 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800728c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800728e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007290:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007292:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007296:	4618      	mov	r0, r3
 8007298:	3768      	adds	r7, #104	; 0x68
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	fff00000 	.word	0xfff00000
 80072a4:	10624dd3 	.word	0x10624dd3

080072a8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b0b4      	sub	sp, #208	; 0xd0
 80072ac:	af04      	add	r7, sp, #16
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80072b6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80072ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80072be:	f44f 7316 	mov.w	r3, #600	; 0x258
 80072c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80072c6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80072ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80072ce:	f241 235c 	movw	r3, #4700	; 0x125c
 80072d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80072d6:	4b9e      	ldr	r3, [pc, #632]	; (8007550 <VL53L0X_calc_sigma_estimate+0x2a8>)
 80072d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80072dc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80072e0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80072e2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80072e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80072f0:	4b98      	ldr	r3, [pc, #608]	; (8007554 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80072f2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80072f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80072fa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80072fe:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007300:	f240 6377 	movw	r3, #1655	; 0x677
 8007304:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007306:	2300      	movs	r3, #0
 8007308:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800731a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007328:	f107 0310 	add.w	r3, r7, #16
 800732c:	461a      	mov	r2, r3
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff fe78 	bl	8007026 <VL53L0X_get_total_signal_rate>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	461a      	mov	r2, r3
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f7ff fe3f 	bl	8006fc8 <VL53L0X_get_total_xtalk_rate>
 800734a:	4603      	mov	r3, r0
 800734c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800735c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800735e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007374:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800737a:	429a      	cmp	r2, r3
 800737c:	d902      	bls.n	8007384 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800737e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007384:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007388:	2b00      	cmp	r3, #0
 800738a:	d168      	bne.n	800745e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800739c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80073a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80073a4:	461a      	mov	r2, r3
 80073a6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7fe feb2 	bl	8006114 <VL53L0X_calc_timeout_mclks>
 80073b0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80073c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80073c6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80073ca:	461a      	mov	r2, r3
 80073cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7fe fe9f 	bl	8006114 <VL53L0X_calc_timeout_mclks>
 80073d6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80073d8:	2303      	movs	r3, #3
 80073da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80073de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d102      	bne.n	80073ec <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80073e6:	2302      	movs	r3, #2
 80073e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80073ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80073f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	02db      	lsls	r3, r3, #11
 80073fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007400:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007404:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007408:	4a53      	ldr	r2, [pc, #332]	; (8007558 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800740a:	fba2 2303 	umull	r2, r3, r2, r3
 800740e:	099b      	lsrs	r3, r3, #6
 8007410:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007414:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007418:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007422:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007426:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800742a:	4a4b      	ldr	r2, [pc, #300]	; (8007558 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800742c:	fba2 2303 	umull	r2, r3, r2, r3
 8007430:	099b      	lsrs	r3, r3, #6
 8007432:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	3380      	adds	r3, #128	; 0x80
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800744c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007450:	3380      	adds	r3, #128	; 0x80
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800745e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007466:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800746a:	e15e      	b.n	800772a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800746c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10c      	bne.n	800748c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007478:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007480:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e14c      	b.n	8007726 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800748c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007494:	2301      	movs	r3, #1
 8007496:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800749a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80074a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074a2:	041a      	lsls	r2, r3, #16
 80074a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80074ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d902      	bls.n	80074be <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80074b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80074be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80074c6:	fb02 f303 	mul.w	r3, r2, r3
 80074ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80074ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074d2:	4613      	mov	r3, r2
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f876 	bl	80055cc <VL53L0X_isqrt>
 80074e0:	4603      	mov	r3, r0
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	891b      	ldrh	r3, [r3, #8]
 80074ea:	461a      	mov	r2, r3
 80074ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ee:	fb02 f303 	mul.w	r3, r2, r3
 80074f2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80074f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80074f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074fc:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80074fe:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007500:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007504:	4a14      	ldr	r2, [pc, #80]	; (8007558 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007506:	fba2 2303 	umull	r2, r3, r2, r3
 800750a:	099b      	lsrs	r3, r3, #6
 800750c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800750e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007510:	041b      	lsls	r3, r3, #16
 8007512:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007518:	fba2 2303 	umull	r2, r3, r2, r3
 800751c:	099b      	lsrs	r3, r3, #6
 800751e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	fbb2 f3f3 	udiv	r3, r2, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfb8      	it	lt
 8007532:	425b      	neglt	r3, r3
 8007534:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	7e1b      	ldrb	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800754c:	e033      	b.n	80075b6 <VL53L0X_calc_sigma_estimate+0x30e>
 800754e:	bf00      	nop
 8007550:	028f87ae 	.word	0x028f87ae
 8007554:	0006999a 	.word	0x0006999a
 8007558:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800755c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800755e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007562:	fbb2 f3f3 	udiv	r3, r2, r3
 8007566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800756a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800757c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007582:	4413      	add	r3, r2
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800758a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800758e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80075a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075a4:	fb03 f303 	mul.w	r3, r3, r3
 80075a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80075ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075b0:	0b9b      	lsrs	r3, r3, #14
 80075b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80075b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075bc:	fb02 f303 	mul.w	r3, r2, r3
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80075c8:	0c1b      	lsrs	r3, r3, #16
 80075ca:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	fb03 f303 	mul.w	r3, r3, r3
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80075d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80075e0:	0c1b      	lsrs	r3, r3, #16
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	fb03 f303 	mul.w	r3, r3, r3
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80075ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	4413      	add	r3, r2
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	f7fd ffe9 	bl	80055cc <VL53L0X_isqrt>
 80075fa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	3332      	adds	r3, #50	; 0x32
 8007606:	4a4b      	ldr	r2, [pc, #300]	; (8007734 <VL53L0X_calc_sigma_estimate+0x48c>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	095a      	lsrs	r2, r3, #5
 800760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800761c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007628:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800762c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007630:	3308      	adds	r3, #8
 8007632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007636:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800763a:	4a3f      	ldr	r2, [pc, #252]	; (8007738 <VL53L0X_calc_sigma_estimate+0x490>)
 800763c:	fba2 2303 	umull	r2, r3, r2, r3
 8007640:	0b5b      	lsrs	r3, r3, #13
 8007642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800764a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800764c:	429a      	cmp	r2, r3
 800764e:	d902      	bls.n	8007656 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007650:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007652:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800765a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800765e:	4413      	add	r3, r2
 8007660:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007664:	4a35      	ldr	r2, [pc, #212]	; (800773c <VL53L0X_calc_sigma_estimate+0x494>)
 8007666:	fba2 2303 	umull	r2, r3, r2, r3
 800766a:	099b      	lsrs	r3, r3, #6
 800766c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007672:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007676:	441a      	add	r2, r3
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	fbb2 f3f3 	udiv	r3, r2, r3
 800767e:	4618      	mov	r0, r3
 8007680:	f7fd ffa4 	bl	80055cc <VL53L0X_isqrt>
 8007684:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007692:	4a2a      	ldr	r2, [pc, #168]	; (800773c <VL53L0X_calc_sigma_estimate+0x494>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	099b      	lsrs	r3, r3, #6
 800769a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800769c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076a0:	fb03 f303 	mul.w	r3, r3, r3
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	fb03 f303 	mul.w	r3, r3, r3
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80076ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	4413      	add	r3, r2
 80076b4:	4618      	mov	r0, r3
 80076b6:	f7fd ff89 	bl	80055cc <VL53L0X_isqrt>
 80076ba:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80076ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <VL53L0X_calc_sigma_estimate+0x43c>
 80076d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <VL53L0X_calc_sigma_estimate+0x43c>
 80076d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80076dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d903      	bls.n	80076ec <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80076e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80076f2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 80076fe:	6939      	ldr	r1, [r7, #16]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	9303      	str	r3, [sp, #12]
 8007704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7ff fca8 	bl	8007070 <VL53L0X_calc_dmax>
 8007720:	4603      	mov	r3, r0
 8007722:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007726:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800772a:	4618      	mov	r0, r3
 800772c:	37c0      	adds	r7, #192	; 0xc0
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	51eb851f 	.word	0x51eb851f
 8007738:	d1b71759 	.word	0xd1b71759
 800773c:	10624dd3 	.word	0x10624dd3

08007740 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b090      	sub	sp, #64	; 0x40
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	607a      	str	r2, [r7, #4]
 800774a:	461a      	mov	r2, r3
 800774c:	460b      	mov	r3, r1
 800774e:	72fb      	strb	r3, [r7, #11]
 8007750:	4613      	mov	r3, r2
 8007752:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	10db      	asrs	r3, r3, #3
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 030f 	and.w	r3, r3, #15
 800779c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80077a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d017      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
 80077a8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077ac:	2b05      	cmp	r3, #5
 80077ae:	d013      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80077b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	d00f      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80077b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d00b      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80077c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077c4:	2b0d      	cmp	r3, #13
 80077c6:	d007      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80077c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077cc:	2b0e      	cmp	r3, #14
 80077ce:	d003      	beq.n	80077d8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80077d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077d4:	2b0f      	cmp	r3, #15
 80077d6:	d103      	bne.n	80077e0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80077de:	e002      	b.n	80077e6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80077e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80077ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80077f2:	461a      	mov	r2, r3
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f7fc f9ec 	bl	8003bd4 <VL53L0X_GetLimitCheckEnable>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02e      	beq.n	8007868 <VL53L0X_get_pal_range_status+0x128>
 800780a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800780e:	2b00      	cmp	r3, #0
 8007810:	d12a      	bne.n	8007868 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007812:	f107 0310 	add.w	r3, r7, #16
 8007816:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800781a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f7ff fd43 	bl	80072a8 <VL53L0X_calc_sigma_estimate>
 8007822:	4603      	mov	r3, r0
 8007824:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007828:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	b29a      	uxth	r2, r3
 8007834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007836:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007838:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800783c:	2b00      	cmp	r3, #0
 800783e:	d113      	bne.n	8007868 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007840:	f107 0320 	add.w	r3, r7, #32
 8007844:	461a      	mov	r2, r3
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f7fc fa49 	bl	8003ce0 <VL53L0X_GetLimitCheckValue>
 800784e:	4603      	mov	r3, r0
 8007850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d006      	beq.n	8007868 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800785e:	429a      	cmp	r2, r3
 8007860:	d902      	bls.n	8007868 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007868:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007870:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007874:	461a      	mov	r2, r3
 8007876:	2102      	movs	r1, #2
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7fc f9ab 	bl	8003bd4 <VL53L0X_GetLimitCheckEnable>
 800787e:	4603      	mov	r3, r0
 8007880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007884:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007888:	2b00      	cmp	r3, #0
 800788a:	d044      	beq.n	8007916 <VL53L0X_get_pal_range_status+0x1d6>
 800788c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007890:	2b00      	cmp	r3, #0
 8007892:	d140      	bne.n	8007916 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007894:	f107 031c 	add.w	r3, r7, #28
 8007898:	461a      	mov	r2, r3
 800789a:	2102      	movs	r1, #2
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fc fa1f 	bl	8003ce0 <VL53L0X_GetLimitCheckValue>
 80078a2:	4603      	mov	r3, r0
 80078a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80078a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d107      	bne.n	80078c0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80078b0:	2201      	movs	r2, #1
 80078b2:	21ff      	movs	r1, #255	; 0xff
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 f9bb 	bl	8007c30 <VL53L0X_WrByte>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80078c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 80078c8:	f107 0316 	add.w	r3, r7, #22
 80078cc:	461a      	mov	r2, r3
 80078ce:	21b6      	movs	r1, #182	; 0xb6
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fa59 	bl	8007d88 <VL53L0X_RdWord>
 80078d6:	4603      	mov	r3, r0
 80078d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80078dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d107      	bne.n	80078f4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80078e4:	2200      	movs	r2, #0
 80078e6:	21ff      	movs	r1, #255	; 0xff
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f9a1 	bl	8007c30 <VL53L0X_WrByte>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80078f4:	8afb      	ldrh	r3, [r7, #22]
 80078f6:	025b      	lsls	r3, r3, #9
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078fe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d006      	beq.n	8007916 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007908:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800790a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800790c:	429a      	cmp	r2, r3
 800790e:	d902      	bls.n	8007916 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007910:	2301      	movs	r3, #1
 8007912:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007916:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800791a:	2b00      	cmp	r3, #0
 800791c:	d109      	bne.n	8007932 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800791e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007922:	461a      	mov	r2, r3
 8007924:	2103      	movs	r1, #3
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f7fc f954 	bl	8003bd4 <VL53L0X_GetLimitCheckEnable>
 800792c:	4603      	mov	r3, r0
 800792e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d023      	beq.n	8007982 <VL53L0X_get_pal_range_status+0x242>
 800793a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800793e:	2b00      	cmp	r3, #0
 8007940:	d11f      	bne.n	8007982 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d102      	bne.n	800794e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007948:	2300      	movs	r3, #0
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
 800794c:	e005      	b.n	800795a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	021a      	lsls	r2, r3, #8
 8007952:	893b      	ldrh	r3, [r7, #8]
 8007954:	fbb2 f3f3 	udiv	r3, r2, r3
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800795a:	f107 0318 	add.w	r3, r7, #24
 800795e:	461a      	mov	r2, r3
 8007960:	2103      	movs	r1, #3
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f7fc f9bc 	bl	8003ce0 <VL53L0X_GetLimitCheckValue>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8007974:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8007976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007978:	429a      	cmp	r2, r3
 800797a:	d202      	bcs.n	8007982 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800797c:	2301      	movs	r3, #1
 800797e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007982:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007986:	2b00      	cmp	r3, #0
 8007988:	d14a      	bne.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800798a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800798e:	2b01      	cmp	r3, #1
 8007990:	d103      	bne.n	800799a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	701a      	strb	r2, [r3, #0]
 8007998:	e042      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800799a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d007      	beq.n	80079b2 <VL53L0X_get_pal_range_status+0x272>
 80079a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d003      	beq.n	80079b2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80079aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d103      	bne.n	80079ba <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80079b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b4:	2205      	movs	r2, #5
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e032      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80079ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d003      	beq.n	80079ca <VL53L0X_get_pal_range_status+0x28a>
 80079c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079c6:	2b09      	cmp	r3, #9
 80079c8:	d103      	bne.n	80079d2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80079ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079cc:	2204      	movs	r2, #4
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e026      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80079d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d007      	beq.n	80079ea <VL53L0X_get_pal_range_status+0x2aa>
 80079da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079de:	2b0a      	cmp	r3, #10
 80079e0:	d003      	beq.n	80079ea <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80079e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d103      	bne.n	80079f2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80079ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ec:	2203      	movs	r2, #3
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e016      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80079f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d003      	beq.n	8007a02 <VL53L0X_get_pal_range_status+0x2c2>
 80079fa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d103      	bne.n	8007a0a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	2202      	movs	r2, #2
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e00a      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007a0a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d103      	bne.n	8007a1a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e002      	b.n	8007a20 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007a2e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8007a32:	461a      	mov	r2, r3
 8007a34:	2101      	movs	r1, #1
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7fc f8cc 	bl	8003bd4 <VL53L0X_GetLimitCheckEnable>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007a42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14f      	bne.n	8007aea <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d003      	beq.n	8007a5a <VL53L0X_get_pal_range_status+0x31a>
 8007a52:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d103      	bne.n	8007a62 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a60:	e002      	b.n	8007a68 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007a6e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8007a72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d003      	beq.n	8007a82 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007a7a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a88:	e002      	b.n	8007a90 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007a9a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <VL53L0X_get_pal_range_status+0x36a>
 8007aa2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d103      	bne.n	8007ab2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ab0:	e002      	b.n	8007ab8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007abe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <VL53L0X_get_pal_range_status+0x392>
 8007aca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d103      	bne.n	8007ada <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ad8:	e002      	b.n	8007ae0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007ae6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007aea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3740      	adds	r7, #64	; 0x40
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b088      	sub	sp, #32
 8007afa:	af02      	add	r7, sp, #8
 8007afc:	60f8      	str	r0, [r7, #12]
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	330a      	adds	r3, #10
 8007b06:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007b14:	b299      	uxth	r1, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	f7f9 fd91 	bl	8001648 <HAL_I2C_Master_Transmit>
 8007b26:	4603      	mov	r3, r0
 8007b28:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007b2a:	693b      	ldr	r3, [r7, #16]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	330a      	adds	r3, #10
 8007b44:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007b52:	f043 0301 	orr.w	r3, r3, #1
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	b299      	uxth	r1, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	f7f9 fe6d 	bl	8001844 <HAL_I2C_Master_Receive>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8007b6e:	693b      	ldr	r3, [r7, #16]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3718      	adds	r7, #24
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	460b      	mov	r3, r1
 8007b86:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b3f      	cmp	r3, #63	; 0x3f
 8007b90:	d902      	bls.n	8007b98 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007b92:	f06f 0303 	mvn.w	r3, #3
 8007b96:	e016      	b.n	8007bc6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8007b98:	4a0d      	ldr	r2, [pc, #52]	; (8007bd0 <VL53L0X_WriteMulti+0x58>)
 8007b9a:	7afb      	ldrb	r3, [r7, #11]
 8007b9c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	480c      	ldr	r0, [pc, #48]	; (8007bd4 <VL53L0X_WriteMulti+0x5c>)
 8007ba4:	f000 f99e 	bl	8007ee4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	3301      	adds	r3, #1
 8007bac:	461a      	mov	r2, r3
 8007bae:	4908      	ldr	r1, [pc, #32]	; (8007bd0 <VL53L0X_WriteMulti+0x58>)
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f7ff ffa0 	bl	8007af6 <_I2CWrite>
 8007bb6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007bbe:	23ec      	movs	r3, #236	; 0xec
 8007bc0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007bc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	2000053c 	.word	0x2000053c
 8007bd4:	2000053d 	.word	0x2000053d

08007bd8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	607a      	str	r2, [r7, #4]
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	460b      	mov	r3, r1
 8007be6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007bec:	f107 030b 	add.w	r3, r7, #11
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff ff7e 	bl	8007af6 <_I2CWrite>
 8007bfa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c02:	23ec      	movs	r3, #236	; 0xec
 8007c04:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007c06:	e00c      	b.n	8007c22 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff ff91 	bl	8007b34 <_I2CRead>
 8007c12:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c1a:	23ec      	movs	r3, #236	; 0xec
 8007c1c:	75fb      	strb	r3, [r7, #23]
 8007c1e:	e000      	b.n	8007c22 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007c20:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3718      	adds	r7, #24
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007c44:	4a0b      	ldr	r2, [pc, #44]	; (8007c74 <VL53L0X_WrByte+0x44>)
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <VL53L0X_WrByte+0x44>)
 8007c4c:	78bb      	ldrb	r3, [r7, #2]
 8007c4e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007c50:	2202      	movs	r2, #2
 8007c52:	4908      	ldr	r1, [pc, #32]	; (8007c74 <VL53L0X_WrByte+0x44>)
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff ff4e 	bl	8007af6 <_I2CWrite>
 8007c5a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c62:	23ec      	movs	r3, #236	; 0xec
 8007c64:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	2000053c 	.word	0x2000053c

08007c78 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
 8007c84:	4613      	mov	r3, r2
 8007c86:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007c8c:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <VL53L0X_WrWord+0x50>)
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007c92:	883b      	ldrh	r3, [r7, #0]
 8007c94:	0a1b      	lsrs	r3, r3, #8
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <VL53L0X_WrWord+0x50>)
 8007c9c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007c9e:	883b      	ldrh	r3, [r7, #0]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <VL53L0X_WrWord+0x50>)
 8007ca4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	4907      	ldr	r1, [pc, #28]	; (8007cc8 <VL53L0X_WrWord+0x50>)
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ff23 	bl	8007af6 <_I2CWrite>
 8007cb0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007cb8:	23ec      	movs	r3, #236	; 0xec
 8007cba:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8007cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	2000053c 	.word	0x2000053c

08007ccc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	70fb      	strb	r3, [r7, #3]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	70bb      	strb	r3, [r7, #2]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007cea:	f107 020e 	add.w	r2, r7, #14
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f81e 	bl	8007d34 <VL53L0X_RdByte>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8007cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d110      	bne.n	8007d26 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8007d04:	7bba      	ldrb	r2, [r7, #14]
 8007d06:	78bb      	ldrb	r3, [r7, #2]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	b2da      	uxtb	r2, r3
 8007d0c:	787b      	ldrb	r3, [r7, #1]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007d14:	7bba      	ldrb	r2, [r7, #14]
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ff88 	bl	8007c30 <VL53L0X_WrByte>
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]
 8007d24:	e000      	b.n	8007d28 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8007d26:	bf00      	nop
done:
    return Status;
 8007d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d42:	2300      	movs	r3, #0
 8007d44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007d46:	f107 030b 	add.w	r3, r7, #11
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fed1 	bl	8007af6 <_I2CWrite>
 8007d54:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d5c:	23ec      	movs	r3, #236	; 0xec
 8007d5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007d60:	e00c      	b.n	8007d7c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8007d62:	2201      	movs	r2, #1
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff fee4 	bl	8007b34 <_I2CRead>
 8007d6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d74:	23ec      	movs	r3, #236	; 0xec
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	e000      	b.n	8007d7c <VL53L0X_RdByte+0x48>
    }
done:
 8007d7a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8007d7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	460b      	mov	r3, r1
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007d9a:	f107 030b 	add.w	r3, r7, #11
 8007d9e:	2201      	movs	r2, #1
 8007da0:	4619      	mov	r1, r3
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fea7 	bl	8007af6 <_I2CWrite>
 8007da8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007db0:	23ec      	movs	r3, #236	; 0xec
 8007db2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007db4:	e017      	b.n	8007de6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007db6:	2202      	movs	r2, #2
 8007db8:	490e      	ldr	r1, [pc, #56]	; (8007df4 <VL53L0X_RdWord+0x6c>)
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff feba 	bl	8007b34 <_I2CRead>
 8007dc0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d002      	beq.n	8007dce <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007dc8:	23ec      	movs	r3, #236	; 0xec
 8007dca:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007dcc:	e00b      	b.n	8007de6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007dce:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <VL53L0X_RdWord+0x6c>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <VL53L0X_RdWord+0x6c>)
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	4413      	add	r3, r2
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8007de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	2000053c 	.word	0x2000053c

08007df8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	460b      	mov	r3, r1
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8007e0a:	f107 030b 	add.w	r3, r7, #11
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4619      	mov	r1, r3
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f7ff fe6f 	bl	8007af6 <_I2CWrite>
 8007e18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e20:	23ec      	movs	r3, #236	; 0xec
 8007e22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007e24:	e01b      	b.n	8007e5e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007e26:	2204      	movs	r2, #4
 8007e28:	4910      	ldr	r1, [pc, #64]	; (8007e6c <VL53L0X_RdDWord+0x74>)
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff fe82 	bl	8007b34 <_I2CRead>
 8007e30:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e38:	23ec      	movs	r3, #236	; 0xec
 8007e3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007e3c:	e00f      	b.n	8007e5e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <VL53L0X_RdDWord+0x74>)
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	061a      	lsls	r2, r3, #24
 8007e44:	4b09      	ldr	r3, [pc, #36]	; (8007e6c <VL53L0X_RdDWord+0x74>)
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	441a      	add	r2, r3
 8007e4c:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <VL53L0X_RdDWord+0x74>)
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	4413      	add	r3, r2
 8007e54:	4a05      	ldr	r2, [pc, #20]	; (8007e6c <VL53L0X_RdDWord+0x74>)
 8007e56:	78d2      	ldrb	r2, [r2, #3]
 8007e58:	441a      	add	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8007e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	2000053c 	.word	0x2000053c

08007e70 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8007e7c:	2002      	movs	r0, #2
 8007e7e:	f7f8 ffe7 	bl	8000e50 <HAL_Delay>
    return status;
 8007e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <__errno>:
 8007e90:	4b01      	ldr	r3, [pc, #4]	; (8007e98 <__errno+0x8>)
 8007e92:	6818      	ldr	r0, [r3, #0]
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	200002cc 	.word	0x200002cc

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	4d0d      	ldr	r5, [pc, #52]	; (8007ed4 <__libc_init_array+0x38>)
 8007ea0:	4c0d      	ldr	r4, [pc, #52]	; (8007ed8 <__libc_init_array+0x3c>)
 8007ea2:	1b64      	subs	r4, r4, r5
 8007ea4:	10a4      	asrs	r4, r4, #2
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	4d0b      	ldr	r5, [pc, #44]	; (8007edc <__libc_init_array+0x40>)
 8007eae:	4c0c      	ldr	r4, [pc, #48]	; (8007ee0 <__libc_init_array+0x44>)
 8007eb0:	f000 ffc4 	bl	8008e3c <_init>
 8007eb4:	1b64      	subs	r4, r4, r5
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	2600      	movs	r6, #0
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	08008f44 	.word	0x08008f44
 8007ed8:	08008f44 	.word	0x08008f44
 8007edc:	08008f44 	.word	0x08008f44
 8007ee0:	08008f48 	.word	0x08008f48

08007ee4 <memcpy>:
 8007ee4:	440a      	add	r2, r1
 8007ee6:	4291      	cmp	r1, r2
 8007ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eec:	d100      	bne.n	8007ef0 <memcpy+0xc>
 8007eee:	4770      	bx	lr
 8007ef0:	b510      	push	{r4, lr}
 8007ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007efa:	4291      	cmp	r1, r2
 8007efc:	d1f9      	bne.n	8007ef2 <memcpy+0xe>
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <memset>:
 8007f00:	4402      	add	r2, r0
 8007f02:	4603      	mov	r3, r0
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d100      	bne.n	8007f0a <memset+0xa>
 8007f08:	4770      	bx	lr
 8007f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f0e:	e7f9      	b.n	8007f04 <memset+0x4>

08007f10 <iprintf>:
 8007f10:	b40f      	push	{r0, r1, r2, r3}
 8007f12:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <iprintf+0x2c>)
 8007f14:	b513      	push	{r0, r1, r4, lr}
 8007f16:	681c      	ldr	r4, [r3, #0]
 8007f18:	b124      	cbz	r4, 8007f24 <iprintf+0x14>
 8007f1a:	69a3      	ldr	r3, [r4, #24]
 8007f1c:	b913      	cbnz	r3, 8007f24 <iprintf+0x14>
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 f86e 	bl	8008000 <__sinit>
 8007f24:	ab05      	add	r3, sp, #20
 8007f26:	9a04      	ldr	r2, [sp, #16]
 8007f28:	68a1      	ldr	r1, [r4, #8]
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f9c5 	bl	80082bc <_vfiprintf_r>
 8007f32:	b002      	add	sp, #8
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	b004      	add	sp, #16
 8007f3a:	4770      	bx	lr
 8007f3c:	200002cc 	.word	0x200002cc

08007f40 <strcpy>:
 8007f40:	4603      	mov	r3, r0
 8007f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f46:	f803 2b01 	strb.w	r2, [r3], #1
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1f9      	bne.n	8007f42 <strcpy+0x2>
 8007f4e:	4770      	bx	lr

08007f50 <std>:
 8007f50:	2300      	movs	r3, #0
 8007f52:	b510      	push	{r4, lr}
 8007f54:	4604      	mov	r4, r0
 8007f56:	e9c0 3300 	strd	r3, r3, [r0]
 8007f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5e:	6083      	str	r3, [r0, #8]
 8007f60:	8181      	strh	r1, [r0, #12]
 8007f62:	6643      	str	r3, [r0, #100]	; 0x64
 8007f64:	81c2      	strh	r2, [r0, #14]
 8007f66:	6183      	str	r3, [r0, #24]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	2208      	movs	r2, #8
 8007f6c:	305c      	adds	r0, #92	; 0x5c
 8007f6e:	f7ff ffc7 	bl	8007f00 <memset>
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <std+0x38>)
 8007f74:	6263      	str	r3, [r4, #36]	; 0x24
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x3c>)
 8007f78:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x40>)
 8007f7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x44>)
 8007f80:	6224      	str	r4, [r4, #32]
 8007f82:	6323      	str	r3, [r4, #48]	; 0x30
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	bf00      	nop
 8007f88:	08008865 	.word	0x08008865
 8007f8c:	08008887 	.word	0x08008887
 8007f90:	080088bf 	.word	0x080088bf
 8007f94:	080088e3 	.word	0x080088e3

08007f98 <_cleanup_r>:
 8007f98:	4901      	ldr	r1, [pc, #4]	; (8007fa0 <_cleanup_r+0x8>)
 8007f9a:	f000 b8af 	b.w	80080fc <_fwalk_reent>
 8007f9e:	bf00      	nop
 8007fa0:	08008bbd 	.word	0x08008bbd

08007fa4 <__sfmoreglue>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	2268      	movs	r2, #104	; 0x68
 8007fa8:	1e4d      	subs	r5, r1, #1
 8007faa:	4355      	muls	r5, r2
 8007fac:	460e      	mov	r6, r1
 8007fae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fb2:	f000 f8e5 	bl	8008180 <_malloc_r>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	b140      	cbz	r0, 8007fcc <__sfmoreglue+0x28>
 8007fba:	2100      	movs	r1, #0
 8007fbc:	e9c0 1600 	strd	r1, r6, [r0]
 8007fc0:	300c      	adds	r0, #12
 8007fc2:	60a0      	str	r0, [r4, #8]
 8007fc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fc8:	f7ff ff9a 	bl	8007f00 <memset>
 8007fcc:	4620      	mov	r0, r4
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__sfp_lock_acquire>:
 8007fd0:	4801      	ldr	r0, [pc, #4]	; (8007fd8 <__sfp_lock_acquire+0x8>)
 8007fd2:	f000 b8b3 	b.w	800813c <__retarget_lock_acquire_recursive>
 8007fd6:	bf00      	nop
 8007fd8:	2000057d 	.word	0x2000057d

08007fdc <__sfp_lock_release>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__sfp_lock_release+0x8>)
 8007fde:	f000 b8ae 	b.w	800813e <__retarget_lock_release_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	2000057d 	.word	0x2000057d

08007fe8 <__sinit_lock_acquire>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sinit_lock_acquire+0x8>)
 8007fea:	f000 b8a7 	b.w	800813c <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	2000057e 	.word	0x2000057e

08007ff4 <__sinit_lock_release>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sinit_lock_release+0x8>)
 8007ff6:	f000 b8a2 	b.w	800813e <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	2000057e 	.word	0x2000057e

08008000 <__sinit>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	f7ff fff0 	bl	8007fe8 <__sinit_lock_acquire>
 8008008:	69a3      	ldr	r3, [r4, #24]
 800800a:	b11b      	cbz	r3, 8008014 <__sinit+0x14>
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008010:	f7ff bff0 	b.w	8007ff4 <__sinit_lock_release>
 8008014:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008018:	6523      	str	r3, [r4, #80]	; 0x50
 800801a:	4b13      	ldr	r3, [pc, #76]	; (8008068 <__sinit+0x68>)
 800801c:	4a13      	ldr	r2, [pc, #76]	; (800806c <__sinit+0x6c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	62a2      	str	r2, [r4, #40]	; 0x28
 8008022:	42a3      	cmp	r3, r4
 8008024:	bf04      	itt	eq
 8008026:	2301      	moveq	r3, #1
 8008028:	61a3      	streq	r3, [r4, #24]
 800802a:	4620      	mov	r0, r4
 800802c:	f000 f820 	bl	8008070 <__sfp>
 8008030:	6060      	str	r0, [r4, #4]
 8008032:	4620      	mov	r0, r4
 8008034:	f000 f81c 	bl	8008070 <__sfp>
 8008038:	60a0      	str	r0, [r4, #8]
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f818 	bl	8008070 <__sfp>
 8008040:	2200      	movs	r2, #0
 8008042:	60e0      	str	r0, [r4, #12]
 8008044:	2104      	movs	r1, #4
 8008046:	6860      	ldr	r0, [r4, #4]
 8008048:	f7ff ff82 	bl	8007f50 <std>
 800804c:	68a0      	ldr	r0, [r4, #8]
 800804e:	2201      	movs	r2, #1
 8008050:	2109      	movs	r1, #9
 8008052:	f7ff ff7d 	bl	8007f50 <std>
 8008056:	68e0      	ldr	r0, [r4, #12]
 8008058:	2202      	movs	r2, #2
 800805a:	2112      	movs	r1, #18
 800805c:	f7ff ff78 	bl	8007f50 <std>
 8008060:	2301      	movs	r3, #1
 8008062:	61a3      	str	r3, [r4, #24]
 8008064:	e7d2      	b.n	800800c <__sinit+0xc>
 8008066:	bf00      	nop
 8008068:	08008ea4 	.word	0x08008ea4
 800806c:	08007f99 	.word	0x08007f99

08008070 <__sfp>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	4607      	mov	r7, r0
 8008074:	f7ff ffac 	bl	8007fd0 <__sfp_lock_acquire>
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <__sfp+0x84>)
 800807a:	681e      	ldr	r6, [r3, #0]
 800807c:	69b3      	ldr	r3, [r6, #24]
 800807e:	b913      	cbnz	r3, 8008086 <__sfp+0x16>
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ffbd 	bl	8008000 <__sinit>
 8008086:	3648      	adds	r6, #72	; 0x48
 8008088:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800808c:	3b01      	subs	r3, #1
 800808e:	d503      	bpl.n	8008098 <__sfp+0x28>
 8008090:	6833      	ldr	r3, [r6, #0]
 8008092:	b30b      	cbz	r3, 80080d8 <__sfp+0x68>
 8008094:	6836      	ldr	r6, [r6, #0]
 8008096:	e7f7      	b.n	8008088 <__sfp+0x18>
 8008098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800809c:	b9d5      	cbnz	r5, 80080d4 <__sfp+0x64>
 800809e:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <__sfp+0x88>)
 80080a0:	60e3      	str	r3, [r4, #12]
 80080a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a6:	6665      	str	r5, [r4, #100]	; 0x64
 80080a8:	f000 f847 	bl	800813a <__retarget_lock_init_recursive>
 80080ac:	f7ff ff96 	bl	8007fdc <__sfp_lock_release>
 80080b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080b8:	6025      	str	r5, [r4, #0]
 80080ba:	61a5      	str	r5, [r4, #24]
 80080bc:	2208      	movs	r2, #8
 80080be:	4629      	mov	r1, r5
 80080c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080c4:	f7ff ff1c 	bl	8007f00 <memset>
 80080c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080d0:	4620      	mov	r0, r4
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	3468      	adds	r4, #104	; 0x68
 80080d6:	e7d9      	b.n	800808c <__sfp+0x1c>
 80080d8:	2104      	movs	r1, #4
 80080da:	4638      	mov	r0, r7
 80080dc:	f7ff ff62 	bl	8007fa4 <__sfmoreglue>
 80080e0:	4604      	mov	r4, r0
 80080e2:	6030      	str	r0, [r6, #0]
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1d5      	bne.n	8008094 <__sfp+0x24>
 80080e8:	f7ff ff78 	bl	8007fdc <__sfp_lock_release>
 80080ec:	230c      	movs	r3, #12
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	e7ee      	b.n	80080d0 <__sfp+0x60>
 80080f2:	bf00      	nop
 80080f4:	08008ea4 	.word	0x08008ea4
 80080f8:	ffff0001 	.word	0xffff0001

080080fc <_fwalk_reent>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	4606      	mov	r6, r0
 8008102:	4688      	mov	r8, r1
 8008104:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008108:	2700      	movs	r7, #0
 800810a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800810e:	f1b9 0901 	subs.w	r9, r9, #1
 8008112:	d505      	bpl.n	8008120 <_fwalk_reent+0x24>
 8008114:	6824      	ldr	r4, [r4, #0]
 8008116:	2c00      	cmp	r4, #0
 8008118:	d1f7      	bne.n	800810a <_fwalk_reent+0xe>
 800811a:	4638      	mov	r0, r7
 800811c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008120:	89ab      	ldrh	r3, [r5, #12]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d907      	bls.n	8008136 <_fwalk_reent+0x3a>
 8008126:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800812a:	3301      	adds	r3, #1
 800812c:	d003      	beq.n	8008136 <_fwalk_reent+0x3a>
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	47c0      	blx	r8
 8008134:	4307      	orrs	r7, r0
 8008136:	3568      	adds	r5, #104	; 0x68
 8008138:	e7e9      	b.n	800810e <_fwalk_reent+0x12>

0800813a <__retarget_lock_init_recursive>:
 800813a:	4770      	bx	lr

0800813c <__retarget_lock_acquire_recursive>:
 800813c:	4770      	bx	lr

0800813e <__retarget_lock_release_recursive>:
 800813e:	4770      	bx	lr

08008140 <sbrk_aligned>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	4e0e      	ldr	r6, [pc, #56]	; (800817c <sbrk_aligned+0x3c>)
 8008144:	460c      	mov	r4, r1
 8008146:	6831      	ldr	r1, [r6, #0]
 8008148:	4605      	mov	r5, r0
 800814a:	b911      	cbnz	r1, 8008152 <sbrk_aligned+0x12>
 800814c:	f000 fb7a 	bl	8008844 <_sbrk_r>
 8008150:	6030      	str	r0, [r6, #0]
 8008152:	4621      	mov	r1, r4
 8008154:	4628      	mov	r0, r5
 8008156:	f000 fb75 	bl	8008844 <_sbrk_r>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d00a      	beq.n	8008174 <sbrk_aligned+0x34>
 800815e:	1cc4      	adds	r4, r0, #3
 8008160:	f024 0403 	bic.w	r4, r4, #3
 8008164:	42a0      	cmp	r0, r4
 8008166:	d007      	beq.n	8008178 <sbrk_aligned+0x38>
 8008168:	1a21      	subs	r1, r4, r0
 800816a:	4628      	mov	r0, r5
 800816c:	f000 fb6a 	bl	8008844 <_sbrk_r>
 8008170:	3001      	adds	r0, #1
 8008172:	d101      	bne.n	8008178 <sbrk_aligned+0x38>
 8008174:	f04f 34ff 	mov.w	r4, #4294967295
 8008178:	4620      	mov	r0, r4
 800817a:	bd70      	pop	{r4, r5, r6, pc}
 800817c:	20000584 	.word	0x20000584

08008180 <_malloc_r>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	1ccd      	adds	r5, r1, #3
 8008186:	f025 0503 	bic.w	r5, r5, #3
 800818a:	3508      	adds	r5, #8
 800818c:	2d0c      	cmp	r5, #12
 800818e:	bf38      	it	cc
 8008190:	250c      	movcc	r5, #12
 8008192:	2d00      	cmp	r5, #0
 8008194:	4607      	mov	r7, r0
 8008196:	db01      	blt.n	800819c <_malloc_r+0x1c>
 8008198:	42a9      	cmp	r1, r5
 800819a:	d905      	bls.n	80081a8 <_malloc_r+0x28>
 800819c:	230c      	movs	r3, #12
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	2600      	movs	r6, #0
 80081a2:	4630      	mov	r0, r6
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	4e2e      	ldr	r6, [pc, #184]	; (8008264 <_malloc_r+0xe4>)
 80081aa:	f000 fdbb 	bl	8008d24 <__malloc_lock>
 80081ae:	6833      	ldr	r3, [r6, #0]
 80081b0:	461c      	mov	r4, r3
 80081b2:	bb34      	cbnz	r4, 8008202 <_malloc_r+0x82>
 80081b4:	4629      	mov	r1, r5
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ffc2 	bl	8008140 <sbrk_aligned>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	4604      	mov	r4, r0
 80081c0:	d14d      	bne.n	800825e <_malloc_r+0xde>
 80081c2:	6834      	ldr	r4, [r6, #0]
 80081c4:	4626      	mov	r6, r4
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d140      	bne.n	800824c <_malloc_r+0xcc>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	4631      	mov	r1, r6
 80081ce:	4638      	mov	r0, r7
 80081d0:	eb04 0803 	add.w	r8, r4, r3
 80081d4:	f000 fb36 	bl	8008844 <_sbrk_r>
 80081d8:	4580      	cmp	r8, r0
 80081da:	d13a      	bne.n	8008252 <_malloc_r+0xd2>
 80081dc:	6821      	ldr	r1, [r4, #0]
 80081de:	3503      	adds	r5, #3
 80081e0:	1a6d      	subs	r5, r5, r1
 80081e2:	f025 0503 	bic.w	r5, r5, #3
 80081e6:	3508      	adds	r5, #8
 80081e8:	2d0c      	cmp	r5, #12
 80081ea:	bf38      	it	cc
 80081ec:	250c      	movcc	r5, #12
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ffa5 	bl	8008140 <sbrk_aligned>
 80081f6:	3001      	adds	r0, #1
 80081f8:	d02b      	beq.n	8008252 <_malloc_r+0xd2>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	442b      	add	r3, r5
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	e00e      	b.n	8008220 <_malloc_r+0xa0>
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	1b52      	subs	r2, r2, r5
 8008206:	d41e      	bmi.n	8008246 <_malloc_r+0xc6>
 8008208:	2a0b      	cmp	r2, #11
 800820a:	d916      	bls.n	800823a <_malloc_r+0xba>
 800820c:	1961      	adds	r1, r4, r5
 800820e:	42a3      	cmp	r3, r4
 8008210:	6025      	str	r5, [r4, #0]
 8008212:	bf18      	it	ne
 8008214:	6059      	strne	r1, [r3, #4]
 8008216:	6863      	ldr	r3, [r4, #4]
 8008218:	bf08      	it	eq
 800821a:	6031      	streq	r1, [r6, #0]
 800821c:	5162      	str	r2, [r4, r5]
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	4638      	mov	r0, r7
 8008222:	f104 060b 	add.w	r6, r4, #11
 8008226:	f000 fd83 	bl	8008d30 <__malloc_unlock>
 800822a:	f026 0607 	bic.w	r6, r6, #7
 800822e:	1d23      	adds	r3, r4, #4
 8008230:	1af2      	subs	r2, r6, r3
 8008232:	d0b6      	beq.n	80081a2 <_malloc_r+0x22>
 8008234:	1b9b      	subs	r3, r3, r6
 8008236:	50a3      	str	r3, [r4, r2]
 8008238:	e7b3      	b.n	80081a2 <_malloc_r+0x22>
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	42a3      	cmp	r3, r4
 800823e:	bf0c      	ite	eq
 8008240:	6032      	streq	r2, [r6, #0]
 8008242:	605a      	strne	r2, [r3, #4]
 8008244:	e7ec      	b.n	8008220 <_malloc_r+0xa0>
 8008246:	4623      	mov	r3, r4
 8008248:	6864      	ldr	r4, [r4, #4]
 800824a:	e7b2      	b.n	80081b2 <_malloc_r+0x32>
 800824c:	4634      	mov	r4, r6
 800824e:	6876      	ldr	r6, [r6, #4]
 8008250:	e7b9      	b.n	80081c6 <_malloc_r+0x46>
 8008252:	230c      	movs	r3, #12
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4638      	mov	r0, r7
 8008258:	f000 fd6a 	bl	8008d30 <__malloc_unlock>
 800825c:	e7a1      	b.n	80081a2 <_malloc_r+0x22>
 800825e:	6025      	str	r5, [r4, #0]
 8008260:	e7de      	b.n	8008220 <_malloc_r+0xa0>
 8008262:	bf00      	nop
 8008264:	20000580 	.word	0x20000580

08008268 <__sfputc_r>:
 8008268:	6893      	ldr	r3, [r2, #8]
 800826a:	3b01      	subs	r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	b410      	push	{r4}
 8008270:	6093      	str	r3, [r2, #8]
 8008272:	da08      	bge.n	8008286 <__sfputc_r+0x1e>
 8008274:	6994      	ldr	r4, [r2, #24]
 8008276:	42a3      	cmp	r3, r4
 8008278:	db01      	blt.n	800827e <__sfputc_r+0x16>
 800827a:	290a      	cmp	r1, #10
 800827c:	d103      	bne.n	8008286 <__sfputc_r+0x1e>
 800827e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008282:	f000 bb33 	b.w	80088ec <__swbuf_r>
 8008286:	6813      	ldr	r3, [r2, #0]
 8008288:	1c58      	adds	r0, r3, #1
 800828a:	6010      	str	r0, [r2, #0]
 800828c:	7019      	strb	r1, [r3, #0]
 800828e:	4608      	mov	r0, r1
 8008290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008294:	4770      	bx	lr

08008296 <__sfputs_r>:
 8008296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008298:	4606      	mov	r6, r0
 800829a:	460f      	mov	r7, r1
 800829c:	4614      	mov	r4, r2
 800829e:	18d5      	adds	r5, r2, r3
 80082a0:	42ac      	cmp	r4, r5
 80082a2:	d101      	bne.n	80082a8 <__sfputs_r+0x12>
 80082a4:	2000      	movs	r0, #0
 80082a6:	e007      	b.n	80082b8 <__sfputs_r+0x22>
 80082a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ac:	463a      	mov	r2, r7
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ffda 	bl	8008268 <__sfputc_r>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	d1f3      	bne.n	80082a0 <__sfputs_r+0xa>
 80082b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082bc <_vfiprintf_r>:
 80082bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c0:	460d      	mov	r5, r1
 80082c2:	b09d      	sub	sp, #116	; 0x74
 80082c4:	4614      	mov	r4, r2
 80082c6:	4698      	mov	r8, r3
 80082c8:	4606      	mov	r6, r0
 80082ca:	b118      	cbz	r0, 80082d4 <_vfiprintf_r+0x18>
 80082cc:	6983      	ldr	r3, [r0, #24]
 80082ce:	b90b      	cbnz	r3, 80082d4 <_vfiprintf_r+0x18>
 80082d0:	f7ff fe96 	bl	8008000 <__sinit>
 80082d4:	4b89      	ldr	r3, [pc, #548]	; (80084fc <_vfiprintf_r+0x240>)
 80082d6:	429d      	cmp	r5, r3
 80082d8:	d11b      	bne.n	8008312 <_vfiprintf_r+0x56>
 80082da:	6875      	ldr	r5, [r6, #4]
 80082dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082de:	07d9      	lsls	r1, r3, #31
 80082e0:	d405      	bmi.n	80082ee <_vfiprintf_r+0x32>
 80082e2:	89ab      	ldrh	r3, [r5, #12]
 80082e4:	059a      	lsls	r2, r3, #22
 80082e6:	d402      	bmi.n	80082ee <_vfiprintf_r+0x32>
 80082e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ea:	f7ff ff27 	bl	800813c <__retarget_lock_acquire_recursive>
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	071b      	lsls	r3, r3, #28
 80082f2:	d501      	bpl.n	80082f8 <_vfiprintf_r+0x3c>
 80082f4:	692b      	ldr	r3, [r5, #16]
 80082f6:	b9eb      	cbnz	r3, 8008334 <_vfiprintf_r+0x78>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f000 fb5a 	bl	80089b4 <__swsetup_r>
 8008300:	b1c0      	cbz	r0, 8008334 <_vfiprintf_r+0x78>
 8008302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008304:	07dc      	lsls	r4, r3, #31
 8008306:	d50e      	bpl.n	8008326 <_vfiprintf_r+0x6a>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b01d      	add	sp, #116	; 0x74
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008312:	4b7b      	ldr	r3, [pc, #492]	; (8008500 <_vfiprintf_r+0x244>)
 8008314:	429d      	cmp	r5, r3
 8008316:	d101      	bne.n	800831c <_vfiprintf_r+0x60>
 8008318:	68b5      	ldr	r5, [r6, #8]
 800831a:	e7df      	b.n	80082dc <_vfiprintf_r+0x20>
 800831c:	4b79      	ldr	r3, [pc, #484]	; (8008504 <_vfiprintf_r+0x248>)
 800831e:	429d      	cmp	r5, r3
 8008320:	bf08      	it	eq
 8008322:	68f5      	ldreq	r5, [r6, #12]
 8008324:	e7da      	b.n	80082dc <_vfiprintf_r+0x20>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	0598      	lsls	r0, r3, #22
 800832a:	d4ed      	bmi.n	8008308 <_vfiprintf_r+0x4c>
 800832c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800832e:	f7ff ff06 	bl	800813e <__retarget_lock_release_recursive>
 8008332:	e7e9      	b.n	8008308 <_vfiprintf_r+0x4c>
 8008334:	2300      	movs	r3, #0
 8008336:	9309      	str	r3, [sp, #36]	; 0x24
 8008338:	2320      	movs	r3, #32
 800833a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800833e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008342:	2330      	movs	r3, #48	; 0x30
 8008344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008508 <_vfiprintf_r+0x24c>
 8008348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800834c:	f04f 0901 	mov.w	r9, #1
 8008350:	4623      	mov	r3, r4
 8008352:	469a      	mov	sl, r3
 8008354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008358:	b10a      	cbz	r2, 800835e <_vfiprintf_r+0xa2>
 800835a:	2a25      	cmp	r2, #37	; 0x25
 800835c:	d1f9      	bne.n	8008352 <_vfiprintf_r+0x96>
 800835e:	ebba 0b04 	subs.w	fp, sl, r4
 8008362:	d00b      	beq.n	800837c <_vfiprintf_r+0xc0>
 8008364:	465b      	mov	r3, fp
 8008366:	4622      	mov	r2, r4
 8008368:	4629      	mov	r1, r5
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ff93 	bl	8008296 <__sfputs_r>
 8008370:	3001      	adds	r0, #1
 8008372:	f000 80aa 	beq.w	80084ca <_vfiprintf_r+0x20e>
 8008376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008378:	445a      	add	r2, fp
 800837a:	9209      	str	r2, [sp, #36]	; 0x24
 800837c:	f89a 3000 	ldrb.w	r3, [sl]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 80a2 	beq.w	80084ca <_vfiprintf_r+0x20e>
 8008386:	2300      	movs	r3, #0
 8008388:	f04f 32ff 	mov.w	r2, #4294967295
 800838c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008390:	f10a 0a01 	add.w	sl, sl, #1
 8008394:	9304      	str	r3, [sp, #16]
 8008396:	9307      	str	r3, [sp, #28]
 8008398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800839c:	931a      	str	r3, [sp, #104]	; 0x68
 800839e:	4654      	mov	r4, sl
 80083a0:	2205      	movs	r2, #5
 80083a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a6:	4858      	ldr	r0, [pc, #352]	; (8008508 <_vfiprintf_r+0x24c>)
 80083a8:	f7f7 ff32 	bl	8000210 <memchr>
 80083ac:	9a04      	ldr	r2, [sp, #16]
 80083ae:	b9d8      	cbnz	r0, 80083e8 <_vfiprintf_r+0x12c>
 80083b0:	06d1      	lsls	r1, r2, #27
 80083b2:	bf44      	itt	mi
 80083b4:	2320      	movmi	r3, #32
 80083b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ba:	0713      	lsls	r3, r2, #28
 80083bc:	bf44      	itt	mi
 80083be:	232b      	movmi	r3, #43	; 0x2b
 80083c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083c4:	f89a 3000 	ldrb.w	r3, [sl]
 80083c8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ca:	d015      	beq.n	80083f8 <_vfiprintf_r+0x13c>
 80083cc:	9a07      	ldr	r2, [sp, #28]
 80083ce:	4654      	mov	r4, sl
 80083d0:	2000      	movs	r0, #0
 80083d2:	f04f 0c0a 	mov.w	ip, #10
 80083d6:	4621      	mov	r1, r4
 80083d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083dc:	3b30      	subs	r3, #48	; 0x30
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d94e      	bls.n	8008480 <_vfiprintf_r+0x1c4>
 80083e2:	b1b0      	cbz	r0, 8008412 <_vfiprintf_r+0x156>
 80083e4:	9207      	str	r2, [sp, #28]
 80083e6:	e014      	b.n	8008412 <_vfiprintf_r+0x156>
 80083e8:	eba0 0308 	sub.w	r3, r0, r8
 80083ec:	fa09 f303 	lsl.w	r3, r9, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	46a2      	mov	sl, r4
 80083f6:	e7d2      	b.n	800839e <_vfiprintf_r+0xe2>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	1d19      	adds	r1, r3, #4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	9103      	str	r1, [sp, #12]
 8008400:	2b00      	cmp	r3, #0
 8008402:	bfbb      	ittet	lt
 8008404:	425b      	neglt	r3, r3
 8008406:	f042 0202 	orrlt.w	r2, r2, #2
 800840a:	9307      	strge	r3, [sp, #28]
 800840c:	9307      	strlt	r3, [sp, #28]
 800840e:	bfb8      	it	lt
 8008410:	9204      	strlt	r2, [sp, #16]
 8008412:	7823      	ldrb	r3, [r4, #0]
 8008414:	2b2e      	cmp	r3, #46	; 0x2e
 8008416:	d10c      	bne.n	8008432 <_vfiprintf_r+0x176>
 8008418:	7863      	ldrb	r3, [r4, #1]
 800841a:	2b2a      	cmp	r3, #42	; 0x2a
 800841c:	d135      	bne.n	800848a <_vfiprintf_r+0x1ce>
 800841e:	9b03      	ldr	r3, [sp, #12]
 8008420:	1d1a      	adds	r2, r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	9203      	str	r2, [sp, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	bfb8      	it	lt
 800842a:	f04f 33ff 	movlt.w	r3, #4294967295
 800842e:	3402      	adds	r4, #2
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008518 <_vfiprintf_r+0x25c>
 8008436:	7821      	ldrb	r1, [r4, #0]
 8008438:	2203      	movs	r2, #3
 800843a:	4650      	mov	r0, sl
 800843c:	f7f7 fee8 	bl	8000210 <memchr>
 8008440:	b140      	cbz	r0, 8008454 <_vfiprintf_r+0x198>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	eba0 000a 	sub.w	r0, r0, sl
 8008448:	fa03 f000 	lsl.w	r0, r3, r0
 800844c:	9b04      	ldr	r3, [sp, #16]
 800844e:	4303      	orrs	r3, r0
 8008450:	3401      	adds	r4, #1
 8008452:	9304      	str	r3, [sp, #16]
 8008454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008458:	482c      	ldr	r0, [pc, #176]	; (800850c <_vfiprintf_r+0x250>)
 800845a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845e:	2206      	movs	r2, #6
 8008460:	f7f7 fed6 	bl	8000210 <memchr>
 8008464:	2800      	cmp	r0, #0
 8008466:	d03f      	beq.n	80084e8 <_vfiprintf_r+0x22c>
 8008468:	4b29      	ldr	r3, [pc, #164]	; (8008510 <_vfiprintf_r+0x254>)
 800846a:	bb1b      	cbnz	r3, 80084b4 <_vfiprintf_r+0x1f8>
 800846c:	9b03      	ldr	r3, [sp, #12]
 800846e:	3307      	adds	r3, #7
 8008470:	f023 0307 	bic.w	r3, r3, #7
 8008474:	3308      	adds	r3, #8
 8008476:	9303      	str	r3, [sp, #12]
 8008478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847a:	443b      	add	r3, r7
 800847c:	9309      	str	r3, [sp, #36]	; 0x24
 800847e:	e767      	b.n	8008350 <_vfiprintf_r+0x94>
 8008480:	fb0c 3202 	mla	r2, ip, r2, r3
 8008484:	460c      	mov	r4, r1
 8008486:	2001      	movs	r0, #1
 8008488:	e7a5      	b.n	80083d6 <_vfiprintf_r+0x11a>
 800848a:	2300      	movs	r3, #0
 800848c:	3401      	adds	r4, #1
 800848e:	9305      	str	r3, [sp, #20]
 8008490:	4619      	mov	r1, r3
 8008492:	f04f 0c0a 	mov.w	ip, #10
 8008496:	4620      	mov	r0, r4
 8008498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800849c:	3a30      	subs	r2, #48	; 0x30
 800849e:	2a09      	cmp	r2, #9
 80084a0:	d903      	bls.n	80084aa <_vfiprintf_r+0x1ee>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0c5      	beq.n	8008432 <_vfiprintf_r+0x176>
 80084a6:	9105      	str	r1, [sp, #20]
 80084a8:	e7c3      	b.n	8008432 <_vfiprintf_r+0x176>
 80084aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ae:	4604      	mov	r4, r0
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7f0      	b.n	8008496 <_vfiprintf_r+0x1da>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	462a      	mov	r2, r5
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <_vfiprintf_r+0x258>)
 80084bc:	a904      	add	r1, sp, #16
 80084be:	4630      	mov	r0, r6
 80084c0:	f3af 8000 	nop.w
 80084c4:	4607      	mov	r7, r0
 80084c6:	1c78      	adds	r0, r7, #1
 80084c8:	d1d6      	bne.n	8008478 <_vfiprintf_r+0x1bc>
 80084ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084cc:	07d9      	lsls	r1, r3, #31
 80084ce:	d405      	bmi.n	80084dc <_vfiprintf_r+0x220>
 80084d0:	89ab      	ldrh	r3, [r5, #12]
 80084d2:	059a      	lsls	r2, r3, #22
 80084d4:	d402      	bmi.n	80084dc <_vfiprintf_r+0x220>
 80084d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d8:	f7ff fe31 	bl	800813e <__retarget_lock_release_recursive>
 80084dc:	89ab      	ldrh	r3, [r5, #12]
 80084de:	065b      	lsls	r3, r3, #25
 80084e0:	f53f af12 	bmi.w	8008308 <_vfiprintf_r+0x4c>
 80084e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e6:	e711      	b.n	800830c <_vfiprintf_r+0x50>
 80084e8:	ab03      	add	r3, sp, #12
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	462a      	mov	r2, r5
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <_vfiprintf_r+0x258>)
 80084f0:	a904      	add	r1, sp, #16
 80084f2:	4630      	mov	r0, r6
 80084f4:	f000 f880 	bl	80085f8 <_printf_i>
 80084f8:	e7e4      	b.n	80084c4 <_vfiprintf_r+0x208>
 80084fa:	bf00      	nop
 80084fc:	08008ec8 	.word	0x08008ec8
 8008500:	08008ee8 	.word	0x08008ee8
 8008504:	08008ea8 	.word	0x08008ea8
 8008508:	08008f08 	.word	0x08008f08
 800850c:	08008f12 	.word	0x08008f12
 8008510:	00000000 	.word	0x00000000
 8008514:	08008297 	.word	0x08008297
 8008518:	08008f0e 	.word	0x08008f0e

0800851c <_printf_common>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	4616      	mov	r6, r2
 8008522:	4699      	mov	r9, r3
 8008524:	688a      	ldr	r2, [r1, #8]
 8008526:	690b      	ldr	r3, [r1, #16]
 8008528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800852c:	4293      	cmp	r3, r2
 800852e:	bfb8      	it	lt
 8008530:	4613      	movlt	r3, r2
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008538:	4607      	mov	r7, r0
 800853a:	460c      	mov	r4, r1
 800853c:	b10a      	cbz	r2, 8008542 <_printf_common+0x26>
 800853e:	3301      	adds	r3, #1
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	0699      	lsls	r1, r3, #26
 8008546:	bf42      	ittt	mi
 8008548:	6833      	ldrmi	r3, [r6, #0]
 800854a:	3302      	addmi	r3, #2
 800854c:	6033      	strmi	r3, [r6, #0]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	f015 0506 	ands.w	r5, r5, #6
 8008554:	d106      	bne.n	8008564 <_printf_common+0x48>
 8008556:	f104 0a19 	add.w	sl, r4, #25
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	6832      	ldr	r2, [r6, #0]
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc26      	bgt.n	80085b2 <_printf_common+0x96>
 8008564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008568:	1e13      	subs	r3, r2, #0
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	bf18      	it	ne
 800856e:	2301      	movne	r3, #1
 8008570:	0692      	lsls	r2, r2, #26
 8008572:	d42b      	bmi.n	80085cc <_printf_common+0xb0>
 8008574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008578:	4649      	mov	r1, r9
 800857a:	4638      	mov	r0, r7
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d01e      	beq.n	80085c0 <_printf_common+0xa4>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	68e5      	ldr	r5, [r4, #12]
 8008586:	6832      	ldr	r2, [r6, #0]
 8008588:	f003 0306 	and.w	r3, r3, #6
 800858c:	2b04      	cmp	r3, #4
 800858e:	bf08      	it	eq
 8008590:	1aad      	subeq	r5, r5, r2
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	6922      	ldr	r2, [r4, #16]
 8008596:	bf0c      	ite	eq
 8008598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800859c:	2500      	movne	r5, #0
 800859e:	4293      	cmp	r3, r2
 80085a0:	bfc4      	itt	gt
 80085a2:	1a9b      	subgt	r3, r3, r2
 80085a4:	18ed      	addgt	r5, r5, r3
 80085a6:	2600      	movs	r6, #0
 80085a8:	341a      	adds	r4, #26
 80085aa:	42b5      	cmp	r5, r6
 80085ac:	d11a      	bne.n	80085e4 <_printf_common+0xc8>
 80085ae:	2000      	movs	r0, #0
 80085b0:	e008      	b.n	80085c4 <_printf_common+0xa8>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4652      	mov	r2, sl
 80085b6:	4649      	mov	r1, r9
 80085b8:	4638      	mov	r0, r7
 80085ba:	47c0      	blx	r8
 80085bc:	3001      	adds	r0, #1
 80085be:	d103      	bne.n	80085c8 <_printf_common+0xac>
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	3501      	adds	r5, #1
 80085ca:	e7c6      	b.n	800855a <_printf_common+0x3e>
 80085cc:	18e1      	adds	r1, r4, r3
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	2030      	movs	r0, #48	; 0x30
 80085d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085d6:	4422      	add	r2, r4
 80085d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085e0:	3302      	adds	r3, #2
 80085e2:	e7c7      	b.n	8008574 <_printf_common+0x58>
 80085e4:	2301      	movs	r3, #1
 80085e6:	4622      	mov	r2, r4
 80085e8:	4649      	mov	r1, r9
 80085ea:	4638      	mov	r0, r7
 80085ec:	47c0      	blx	r8
 80085ee:	3001      	adds	r0, #1
 80085f0:	d0e6      	beq.n	80085c0 <_printf_common+0xa4>
 80085f2:	3601      	adds	r6, #1
 80085f4:	e7d9      	b.n	80085aa <_printf_common+0x8e>
	...

080085f8 <_printf_i>:
 80085f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	7e0f      	ldrb	r7, [r1, #24]
 80085fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008600:	2f78      	cmp	r7, #120	; 0x78
 8008602:	4691      	mov	r9, r2
 8008604:	4680      	mov	r8, r0
 8008606:	460c      	mov	r4, r1
 8008608:	469a      	mov	sl, r3
 800860a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800860e:	d807      	bhi.n	8008620 <_printf_i+0x28>
 8008610:	2f62      	cmp	r7, #98	; 0x62
 8008612:	d80a      	bhi.n	800862a <_printf_i+0x32>
 8008614:	2f00      	cmp	r7, #0
 8008616:	f000 80d8 	beq.w	80087ca <_printf_i+0x1d2>
 800861a:	2f58      	cmp	r7, #88	; 0x58
 800861c:	f000 80a3 	beq.w	8008766 <_printf_i+0x16e>
 8008620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008628:	e03a      	b.n	80086a0 <_printf_i+0xa8>
 800862a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800862e:	2b15      	cmp	r3, #21
 8008630:	d8f6      	bhi.n	8008620 <_printf_i+0x28>
 8008632:	a101      	add	r1, pc, #4	; (adr r1, 8008638 <_printf_i+0x40>)
 8008634:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008638:	08008691 	.word	0x08008691
 800863c:	080086a5 	.word	0x080086a5
 8008640:	08008621 	.word	0x08008621
 8008644:	08008621 	.word	0x08008621
 8008648:	08008621 	.word	0x08008621
 800864c:	08008621 	.word	0x08008621
 8008650:	080086a5 	.word	0x080086a5
 8008654:	08008621 	.word	0x08008621
 8008658:	08008621 	.word	0x08008621
 800865c:	08008621 	.word	0x08008621
 8008660:	08008621 	.word	0x08008621
 8008664:	080087b1 	.word	0x080087b1
 8008668:	080086d5 	.word	0x080086d5
 800866c:	08008793 	.word	0x08008793
 8008670:	08008621 	.word	0x08008621
 8008674:	08008621 	.word	0x08008621
 8008678:	080087d3 	.word	0x080087d3
 800867c:	08008621 	.word	0x08008621
 8008680:	080086d5 	.word	0x080086d5
 8008684:	08008621 	.word	0x08008621
 8008688:	08008621 	.word	0x08008621
 800868c:	0800879b 	.word	0x0800879b
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	1d1a      	adds	r2, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	602a      	str	r2, [r5, #0]
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a0:	2301      	movs	r3, #1
 80086a2:	e0a3      	b.n	80087ec <_printf_i+0x1f4>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	6829      	ldr	r1, [r5, #0]
 80086a8:	0606      	lsls	r6, r0, #24
 80086aa:	f101 0304 	add.w	r3, r1, #4
 80086ae:	d50a      	bpl.n	80086c6 <_printf_i+0xce>
 80086b0:	680e      	ldr	r6, [r1, #0]
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	2e00      	cmp	r6, #0
 80086b6:	da03      	bge.n	80086c0 <_printf_i+0xc8>
 80086b8:	232d      	movs	r3, #45	; 0x2d
 80086ba:	4276      	negs	r6, r6
 80086bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c0:	485e      	ldr	r0, [pc, #376]	; (800883c <_printf_i+0x244>)
 80086c2:	230a      	movs	r3, #10
 80086c4:	e019      	b.n	80086fa <_printf_i+0x102>
 80086c6:	680e      	ldr	r6, [r1, #0]
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ce:	bf18      	it	ne
 80086d0:	b236      	sxthne	r6, r6
 80086d2:	e7ef      	b.n	80086b4 <_printf_i+0xbc>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	1d19      	adds	r1, r3, #4
 80086da:	6029      	str	r1, [r5, #0]
 80086dc:	0601      	lsls	r1, r0, #24
 80086de:	d501      	bpl.n	80086e4 <_printf_i+0xec>
 80086e0:	681e      	ldr	r6, [r3, #0]
 80086e2:	e002      	b.n	80086ea <_printf_i+0xf2>
 80086e4:	0646      	lsls	r6, r0, #25
 80086e6:	d5fb      	bpl.n	80086e0 <_printf_i+0xe8>
 80086e8:	881e      	ldrh	r6, [r3, #0]
 80086ea:	4854      	ldr	r0, [pc, #336]	; (800883c <_printf_i+0x244>)
 80086ec:	2f6f      	cmp	r7, #111	; 0x6f
 80086ee:	bf0c      	ite	eq
 80086f0:	2308      	moveq	r3, #8
 80086f2:	230a      	movne	r3, #10
 80086f4:	2100      	movs	r1, #0
 80086f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086fa:	6865      	ldr	r5, [r4, #4]
 80086fc:	60a5      	str	r5, [r4, #8]
 80086fe:	2d00      	cmp	r5, #0
 8008700:	bfa2      	ittt	ge
 8008702:	6821      	ldrge	r1, [r4, #0]
 8008704:	f021 0104 	bicge.w	r1, r1, #4
 8008708:	6021      	strge	r1, [r4, #0]
 800870a:	b90e      	cbnz	r6, 8008710 <_printf_i+0x118>
 800870c:	2d00      	cmp	r5, #0
 800870e:	d04d      	beq.n	80087ac <_printf_i+0x1b4>
 8008710:	4615      	mov	r5, r2
 8008712:	fbb6 f1f3 	udiv	r1, r6, r3
 8008716:	fb03 6711 	mls	r7, r3, r1, r6
 800871a:	5dc7      	ldrb	r7, [r0, r7]
 800871c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008720:	4637      	mov	r7, r6
 8008722:	42bb      	cmp	r3, r7
 8008724:	460e      	mov	r6, r1
 8008726:	d9f4      	bls.n	8008712 <_printf_i+0x11a>
 8008728:	2b08      	cmp	r3, #8
 800872a:	d10b      	bne.n	8008744 <_printf_i+0x14c>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	07de      	lsls	r6, r3, #31
 8008730:	d508      	bpl.n	8008744 <_printf_i+0x14c>
 8008732:	6923      	ldr	r3, [r4, #16]
 8008734:	6861      	ldr	r1, [r4, #4]
 8008736:	4299      	cmp	r1, r3
 8008738:	bfde      	ittt	le
 800873a:	2330      	movle	r3, #48	; 0x30
 800873c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008740:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008744:	1b52      	subs	r2, r2, r5
 8008746:	6122      	str	r2, [r4, #16]
 8008748:	f8cd a000 	str.w	sl, [sp]
 800874c:	464b      	mov	r3, r9
 800874e:	aa03      	add	r2, sp, #12
 8008750:	4621      	mov	r1, r4
 8008752:	4640      	mov	r0, r8
 8008754:	f7ff fee2 	bl	800851c <_printf_common>
 8008758:	3001      	adds	r0, #1
 800875a:	d14c      	bne.n	80087f6 <_printf_i+0x1fe>
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	b004      	add	sp, #16
 8008762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008766:	4835      	ldr	r0, [pc, #212]	; (800883c <_printf_i+0x244>)
 8008768:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800876c:	6829      	ldr	r1, [r5, #0]
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	f851 6b04 	ldr.w	r6, [r1], #4
 8008774:	6029      	str	r1, [r5, #0]
 8008776:	061d      	lsls	r5, r3, #24
 8008778:	d514      	bpl.n	80087a4 <_printf_i+0x1ac>
 800877a:	07df      	lsls	r7, r3, #31
 800877c:	bf44      	itt	mi
 800877e:	f043 0320 	orrmi.w	r3, r3, #32
 8008782:	6023      	strmi	r3, [r4, #0]
 8008784:	b91e      	cbnz	r6, 800878e <_printf_i+0x196>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f023 0320 	bic.w	r3, r3, #32
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	2310      	movs	r3, #16
 8008790:	e7b0      	b.n	80086f4 <_printf_i+0xfc>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f043 0320 	orr.w	r3, r3, #32
 8008798:	6023      	str	r3, [r4, #0]
 800879a:	2378      	movs	r3, #120	; 0x78
 800879c:	4828      	ldr	r0, [pc, #160]	; (8008840 <_printf_i+0x248>)
 800879e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087a2:	e7e3      	b.n	800876c <_printf_i+0x174>
 80087a4:	0659      	lsls	r1, r3, #25
 80087a6:	bf48      	it	mi
 80087a8:	b2b6      	uxthmi	r6, r6
 80087aa:	e7e6      	b.n	800877a <_printf_i+0x182>
 80087ac:	4615      	mov	r5, r2
 80087ae:	e7bb      	b.n	8008728 <_printf_i+0x130>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6826      	ldr	r6, [r4, #0]
 80087b4:	6961      	ldr	r1, [r4, #20]
 80087b6:	1d18      	adds	r0, r3, #4
 80087b8:	6028      	str	r0, [r5, #0]
 80087ba:	0635      	lsls	r5, r6, #24
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	d501      	bpl.n	80087c4 <_printf_i+0x1cc>
 80087c0:	6019      	str	r1, [r3, #0]
 80087c2:	e002      	b.n	80087ca <_printf_i+0x1d2>
 80087c4:	0670      	lsls	r0, r6, #25
 80087c6:	d5fb      	bpl.n	80087c0 <_printf_i+0x1c8>
 80087c8:	8019      	strh	r1, [r3, #0]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6123      	str	r3, [r4, #16]
 80087ce:	4615      	mov	r5, r2
 80087d0:	e7ba      	b.n	8008748 <_printf_i+0x150>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	1d1a      	adds	r2, r3, #4
 80087d6:	602a      	str	r2, [r5, #0]
 80087d8:	681d      	ldr	r5, [r3, #0]
 80087da:	6862      	ldr	r2, [r4, #4]
 80087dc:	2100      	movs	r1, #0
 80087de:	4628      	mov	r0, r5
 80087e0:	f7f7 fd16 	bl	8000210 <memchr>
 80087e4:	b108      	cbz	r0, 80087ea <_printf_i+0x1f2>
 80087e6:	1b40      	subs	r0, r0, r5
 80087e8:	6060      	str	r0, [r4, #4]
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	2300      	movs	r3, #0
 80087f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f4:	e7a8      	b.n	8008748 <_printf_i+0x150>
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	47d0      	blx	sl
 8008800:	3001      	adds	r0, #1
 8008802:	d0ab      	beq.n	800875c <_printf_i+0x164>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	d413      	bmi.n	8008832 <_printf_i+0x23a>
 800880a:	68e0      	ldr	r0, [r4, #12]
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	4298      	cmp	r0, r3
 8008810:	bfb8      	it	lt
 8008812:	4618      	movlt	r0, r3
 8008814:	e7a4      	b.n	8008760 <_printf_i+0x168>
 8008816:	2301      	movs	r3, #1
 8008818:	4632      	mov	r2, r6
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d09b      	beq.n	800875c <_printf_i+0x164>
 8008824:	3501      	adds	r5, #1
 8008826:	68e3      	ldr	r3, [r4, #12]
 8008828:	9903      	ldr	r1, [sp, #12]
 800882a:	1a5b      	subs	r3, r3, r1
 800882c:	42ab      	cmp	r3, r5
 800882e:	dcf2      	bgt.n	8008816 <_printf_i+0x21e>
 8008830:	e7eb      	b.n	800880a <_printf_i+0x212>
 8008832:	2500      	movs	r5, #0
 8008834:	f104 0619 	add.w	r6, r4, #25
 8008838:	e7f5      	b.n	8008826 <_printf_i+0x22e>
 800883a:	bf00      	nop
 800883c:	08008f19 	.word	0x08008f19
 8008840:	08008f2a 	.word	0x08008f2a

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	; (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f8 f950 	bl	8000af4 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000588 	.word	0x20000588

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 fab2 	bl	8008dd4 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__swrite>:
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	461f      	mov	r7, r3
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	05db      	lsls	r3, r3, #23
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4616      	mov	r6, r2
 8008896:	d505      	bpl.n	80088a4 <__swrite+0x1e>
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	2302      	movs	r3, #2
 800889e:	2200      	movs	r2, #0
 80088a0:	f000 f9c8 	bl	8008c34 <_lseek_r>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	4628      	mov	r0, r5
 80088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	f000 b869 	b.w	8008990 <_write_r>

080088be <__sseek>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 f9b5 	bl	8008c34 <_lseek_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	bf15      	itete	ne
 80088d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088da:	81a3      	strheq	r3, [r4, #12]
 80088dc:	bf18      	it	ne
 80088de:	81a3      	strhne	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__sclose>:
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 b8d3 	b.w	8008a90 <_close_r>
	...

080088ec <__swbuf_r>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	460e      	mov	r6, r1
 80088f0:	4614      	mov	r4, r2
 80088f2:	4605      	mov	r5, r0
 80088f4:	b118      	cbz	r0, 80088fe <__swbuf_r+0x12>
 80088f6:	6983      	ldr	r3, [r0, #24]
 80088f8:	b90b      	cbnz	r3, 80088fe <__swbuf_r+0x12>
 80088fa:	f7ff fb81 	bl	8008000 <__sinit>
 80088fe:	4b21      	ldr	r3, [pc, #132]	; (8008984 <__swbuf_r+0x98>)
 8008900:	429c      	cmp	r4, r3
 8008902:	d12b      	bne.n	800895c <__swbuf_r+0x70>
 8008904:	686c      	ldr	r4, [r5, #4]
 8008906:	69a3      	ldr	r3, [r4, #24]
 8008908:	60a3      	str	r3, [r4, #8]
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	071a      	lsls	r2, r3, #28
 800890e:	d52f      	bpl.n	8008970 <__swbuf_r+0x84>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	b36b      	cbz	r3, 8008970 <__swbuf_r+0x84>
 8008914:	6923      	ldr	r3, [r4, #16]
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	1ac0      	subs	r0, r0, r3
 800891a:	6963      	ldr	r3, [r4, #20]
 800891c:	b2f6      	uxtb	r6, r6
 800891e:	4283      	cmp	r3, r0
 8008920:	4637      	mov	r7, r6
 8008922:	dc04      	bgt.n	800892e <__swbuf_r+0x42>
 8008924:	4621      	mov	r1, r4
 8008926:	4628      	mov	r0, r5
 8008928:	f000 f948 	bl	8008bbc <_fflush_r>
 800892c:	bb30      	cbnz	r0, 800897c <__swbuf_r+0x90>
 800892e:	68a3      	ldr	r3, [r4, #8]
 8008930:	3b01      	subs	r3, #1
 8008932:	60a3      	str	r3, [r4, #8]
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	6022      	str	r2, [r4, #0]
 800893a:	701e      	strb	r6, [r3, #0]
 800893c:	6963      	ldr	r3, [r4, #20]
 800893e:	3001      	adds	r0, #1
 8008940:	4283      	cmp	r3, r0
 8008942:	d004      	beq.n	800894e <__swbuf_r+0x62>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	07db      	lsls	r3, r3, #31
 8008948:	d506      	bpl.n	8008958 <__swbuf_r+0x6c>
 800894a:	2e0a      	cmp	r6, #10
 800894c:	d104      	bne.n	8008958 <__swbuf_r+0x6c>
 800894e:	4621      	mov	r1, r4
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f933 	bl	8008bbc <_fflush_r>
 8008956:	b988      	cbnz	r0, 800897c <__swbuf_r+0x90>
 8008958:	4638      	mov	r0, r7
 800895a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <__swbuf_r+0x9c>)
 800895e:	429c      	cmp	r4, r3
 8008960:	d101      	bne.n	8008966 <__swbuf_r+0x7a>
 8008962:	68ac      	ldr	r4, [r5, #8]
 8008964:	e7cf      	b.n	8008906 <__swbuf_r+0x1a>
 8008966:	4b09      	ldr	r3, [pc, #36]	; (800898c <__swbuf_r+0xa0>)
 8008968:	429c      	cmp	r4, r3
 800896a:	bf08      	it	eq
 800896c:	68ec      	ldreq	r4, [r5, #12]
 800896e:	e7ca      	b.n	8008906 <__swbuf_r+0x1a>
 8008970:	4621      	mov	r1, r4
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f81e 	bl	80089b4 <__swsetup_r>
 8008978:	2800      	cmp	r0, #0
 800897a:	d0cb      	beq.n	8008914 <__swbuf_r+0x28>
 800897c:	f04f 37ff 	mov.w	r7, #4294967295
 8008980:	e7ea      	b.n	8008958 <__swbuf_r+0x6c>
 8008982:	bf00      	nop
 8008984:	08008ec8 	.word	0x08008ec8
 8008988:	08008ee8 	.word	0x08008ee8
 800898c:	08008ea8 	.word	0x08008ea8

08008990 <_write_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d07      	ldr	r5, [pc, #28]	; (80089b0 <_write_r+0x20>)
 8008994:	4604      	mov	r4, r0
 8008996:	4608      	mov	r0, r1
 8008998:	4611      	mov	r1, r2
 800899a:	2200      	movs	r2, #0
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	461a      	mov	r2, r3
 80089a0:	f7f8 f857 	bl	8000a52 <_write>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_write_r+0x1e>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_write_r+0x1e>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000588 	.word	0x20000588

080089b4 <__swsetup_r>:
 80089b4:	4b32      	ldr	r3, [pc, #200]	; (8008a80 <__swsetup_r+0xcc>)
 80089b6:	b570      	push	{r4, r5, r6, lr}
 80089b8:	681d      	ldr	r5, [r3, #0]
 80089ba:	4606      	mov	r6, r0
 80089bc:	460c      	mov	r4, r1
 80089be:	b125      	cbz	r5, 80089ca <__swsetup_r+0x16>
 80089c0:	69ab      	ldr	r3, [r5, #24]
 80089c2:	b913      	cbnz	r3, 80089ca <__swsetup_r+0x16>
 80089c4:	4628      	mov	r0, r5
 80089c6:	f7ff fb1b 	bl	8008000 <__sinit>
 80089ca:	4b2e      	ldr	r3, [pc, #184]	; (8008a84 <__swsetup_r+0xd0>)
 80089cc:	429c      	cmp	r4, r3
 80089ce:	d10f      	bne.n	80089f0 <__swsetup_r+0x3c>
 80089d0:	686c      	ldr	r4, [r5, #4]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089d8:	0719      	lsls	r1, r3, #28
 80089da:	d42c      	bmi.n	8008a36 <__swsetup_r+0x82>
 80089dc:	06dd      	lsls	r5, r3, #27
 80089de:	d411      	bmi.n	8008a04 <__swsetup_r+0x50>
 80089e0:	2309      	movs	r3, #9
 80089e2:	6033      	str	r3, [r6, #0]
 80089e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	f04f 30ff 	mov.w	r0, #4294967295
 80089ee:	e03e      	b.n	8008a6e <__swsetup_r+0xba>
 80089f0:	4b25      	ldr	r3, [pc, #148]	; (8008a88 <__swsetup_r+0xd4>)
 80089f2:	429c      	cmp	r4, r3
 80089f4:	d101      	bne.n	80089fa <__swsetup_r+0x46>
 80089f6:	68ac      	ldr	r4, [r5, #8]
 80089f8:	e7eb      	b.n	80089d2 <__swsetup_r+0x1e>
 80089fa:	4b24      	ldr	r3, [pc, #144]	; (8008a8c <__swsetup_r+0xd8>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	bf08      	it	eq
 8008a00:	68ec      	ldreq	r4, [r5, #12]
 8008a02:	e7e6      	b.n	80089d2 <__swsetup_r+0x1e>
 8008a04:	0758      	lsls	r0, r3, #29
 8008a06:	d512      	bpl.n	8008a2e <__swsetup_r+0x7a>
 8008a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a0a:	b141      	cbz	r1, 8008a1e <__swsetup_r+0x6a>
 8008a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <__swsetup_r+0x66>
 8008a14:	4630      	mov	r0, r6
 8008a16:	f000 f991 	bl	8008d3c <_free_r>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a1e:	89a3      	ldrh	r3, [r4, #12]
 8008a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	2300      	movs	r3, #0
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f043 0308 	orr.w	r3, r3, #8
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	6923      	ldr	r3, [r4, #16]
 8008a38:	b94b      	cbnz	r3, 8008a4e <__swsetup_r+0x9a>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a44:	d003      	beq.n	8008a4e <__swsetup_r+0x9a>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 f92b 	bl	8008ca4 <__smakebuf_r>
 8008a4e:	89a0      	ldrh	r0, [r4, #12]
 8008a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a54:	f010 0301 	ands.w	r3, r0, #1
 8008a58:	d00a      	beq.n	8008a70 <__swsetup_r+0xbc>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60a3      	str	r3, [r4, #8]
 8008a5e:	6963      	ldr	r3, [r4, #20]
 8008a60:	425b      	negs	r3, r3
 8008a62:	61a3      	str	r3, [r4, #24]
 8008a64:	6923      	ldr	r3, [r4, #16]
 8008a66:	b943      	cbnz	r3, 8008a7a <__swsetup_r+0xc6>
 8008a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a6c:	d1ba      	bne.n	80089e4 <__swsetup_r+0x30>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	0781      	lsls	r1, r0, #30
 8008a72:	bf58      	it	pl
 8008a74:	6963      	ldrpl	r3, [r4, #20]
 8008a76:	60a3      	str	r3, [r4, #8]
 8008a78:	e7f4      	b.n	8008a64 <__swsetup_r+0xb0>
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	e7f7      	b.n	8008a6e <__swsetup_r+0xba>
 8008a7e:	bf00      	nop
 8008a80:	200002cc 	.word	0x200002cc
 8008a84:	08008ec8 	.word	0x08008ec8
 8008a88:	08008ee8 	.word	0x08008ee8
 8008a8c:	08008ea8 	.word	0x08008ea8

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	; (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7f7 fff5 	bl	8000a8a <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20000588 	.word	0x20000588

08008ab0 <__sflush_r>:
 8008ab0:	898a      	ldrh	r2, [r1, #12]
 8008ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	0710      	lsls	r0, r2, #28
 8008aba:	460c      	mov	r4, r1
 8008abc:	d458      	bmi.n	8008b70 <__sflush_r+0xc0>
 8008abe:	684b      	ldr	r3, [r1, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dc05      	bgt.n	8008ad0 <__sflush_r+0x20>
 8008ac4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dc02      	bgt.n	8008ad0 <__sflush_r+0x20>
 8008aca:	2000      	movs	r0, #0
 8008acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ad0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ad2:	2e00      	cmp	r6, #0
 8008ad4:	d0f9      	beq.n	8008aca <__sflush_r+0x1a>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008adc:	682f      	ldr	r7, [r5, #0]
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	d032      	beq.n	8008b48 <__sflush_r+0x98>
 8008ae2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	075a      	lsls	r2, r3, #29
 8008ae8:	d505      	bpl.n	8008af6 <__sflush_r+0x46>
 8008aea:	6863      	ldr	r3, [r4, #4]
 8008aec:	1ac0      	subs	r0, r0, r3
 8008aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008af0:	b10b      	cbz	r3, 8008af6 <__sflush_r+0x46>
 8008af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008af4:	1ac0      	subs	r0, r0, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	4602      	mov	r2, r0
 8008afa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afc:	6a21      	ldr	r1, [r4, #32]
 8008afe:	4628      	mov	r0, r5
 8008b00:	47b0      	blx	r6
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	d106      	bne.n	8008b16 <__sflush_r+0x66>
 8008b08:	6829      	ldr	r1, [r5, #0]
 8008b0a:	291d      	cmp	r1, #29
 8008b0c:	d82c      	bhi.n	8008b68 <__sflush_r+0xb8>
 8008b0e:	4a2a      	ldr	r2, [pc, #168]	; (8008bb8 <__sflush_r+0x108>)
 8008b10:	40ca      	lsrs	r2, r1
 8008b12:	07d6      	lsls	r6, r2, #31
 8008b14:	d528      	bpl.n	8008b68 <__sflush_r+0xb8>
 8008b16:	2200      	movs	r2, #0
 8008b18:	6062      	str	r2, [r4, #4]
 8008b1a:	04d9      	lsls	r1, r3, #19
 8008b1c:	6922      	ldr	r2, [r4, #16]
 8008b1e:	6022      	str	r2, [r4, #0]
 8008b20:	d504      	bpl.n	8008b2c <__sflush_r+0x7c>
 8008b22:	1c42      	adds	r2, r0, #1
 8008b24:	d101      	bne.n	8008b2a <__sflush_r+0x7a>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	b903      	cbnz	r3, 8008b2c <__sflush_r+0x7c>
 8008b2a:	6560      	str	r0, [r4, #84]	; 0x54
 8008b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2e:	602f      	str	r7, [r5, #0]
 8008b30:	2900      	cmp	r1, #0
 8008b32:	d0ca      	beq.n	8008aca <__sflush_r+0x1a>
 8008b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	d002      	beq.n	8008b42 <__sflush_r+0x92>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 f8fd 	bl	8008d3c <_free_r>
 8008b42:	2000      	movs	r0, #0
 8008b44:	6360      	str	r0, [r4, #52]	; 0x34
 8008b46:	e7c1      	b.n	8008acc <__sflush_r+0x1c>
 8008b48:	6a21      	ldr	r1, [r4, #32]
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	47b0      	blx	r6
 8008b50:	1c41      	adds	r1, r0, #1
 8008b52:	d1c7      	bne.n	8008ae4 <__sflush_r+0x34>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d0c4      	beq.n	8008ae4 <__sflush_r+0x34>
 8008b5a:	2b1d      	cmp	r3, #29
 8008b5c:	d001      	beq.n	8008b62 <__sflush_r+0xb2>
 8008b5e:	2b16      	cmp	r3, #22
 8008b60:	d101      	bne.n	8008b66 <__sflush_r+0xb6>
 8008b62:	602f      	str	r7, [r5, #0]
 8008b64:	e7b1      	b.n	8008aca <__sflush_r+0x1a>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	e7ad      	b.n	8008acc <__sflush_r+0x1c>
 8008b70:	690f      	ldr	r7, [r1, #16]
 8008b72:	2f00      	cmp	r7, #0
 8008b74:	d0a9      	beq.n	8008aca <__sflush_r+0x1a>
 8008b76:	0793      	lsls	r3, r2, #30
 8008b78:	680e      	ldr	r6, [r1, #0]
 8008b7a:	bf08      	it	eq
 8008b7c:	694b      	ldreq	r3, [r1, #20]
 8008b7e:	600f      	str	r7, [r1, #0]
 8008b80:	bf18      	it	ne
 8008b82:	2300      	movne	r3, #0
 8008b84:	eba6 0807 	sub.w	r8, r6, r7
 8008b88:	608b      	str	r3, [r1, #8]
 8008b8a:	f1b8 0f00 	cmp.w	r8, #0
 8008b8e:	dd9c      	ble.n	8008aca <__sflush_r+0x1a>
 8008b90:	6a21      	ldr	r1, [r4, #32]
 8008b92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b94:	4643      	mov	r3, r8
 8008b96:	463a      	mov	r2, r7
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b0      	blx	r6
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	dc06      	bgt.n	8008bae <__sflush_r+0xfe>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e78e      	b.n	8008acc <__sflush_r+0x1c>
 8008bae:	4407      	add	r7, r0
 8008bb0:	eba8 0800 	sub.w	r8, r8, r0
 8008bb4:	e7e9      	b.n	8008b8a <__sflush_r+0xda>
 8008bb6:	bf00      	nop
 8008bb8:	20400001 	.word	0x20400001

08008bbc <_fflush_r>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	690b      	ldr	r3, [r1, #16]
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	b913      	cbnz	r3, 8008bcc <_fflush_r+0x10>
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	4628      	mov	r0, r5
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	b118      	cbz	r0, 8008bd6 <_fflush_r+0x1a>
 8008bce:	6983      	ldr	r3, [r0, #24]
 8008bd0:	b90b      	cbnz	r3, 8008bd6 <_fflush_r+0x1a>
 8008bd2:	f7ff fa15 	bl	8008000 <__sinit>
 8008bd6:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <_fflush_r+0x6c>)
 8008bd8:	429c      	cmp	r4, r3
 8008bda:	d11b      	bne.n	8008c14 <_fflush_r+0x58>
 8008bdc:	686c      	ldr	r4, [r5, #4]
 8008bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d0ef      	beq.n	8008bc6 <_fflush_r+0xa>
 8008be6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008be8:	07d0      	lsls	r0, r2, #31
 8008bea:	d404      	bmi.n	8008bf6 <_fflush_r+0x3a>
 8008bec:	0599      	lsls	r1, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_fflush_r+0x3a>
 8008bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bf2:	f7ff faa3 	bl	800813c <__retarget_lock_acquire_recursive>
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	f7ff ff59 	bl	8008ab0 <__sflush_r>
 8008bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c00:	07da      	lsls	r2, r3, #31
 8008c02:	4605      	mov	r5, r0
 8008c04:	d4e0      	bmi.n	8008bc8 <_fflush_r+0xc>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	059b      	lsls	r3, r3, #22
 8008c0a:	d4dd      	bmi.n	8008bc8 <_fflush_r+0xc>
 8008c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0e:	f7ff fa96 	bl	800813e <__retarget_lock_release_recursive>
 8008c12:	e7d9      	b.n	8008bc8 <_fflush_r+0xc>
 8008c14:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <_fflush_r+0x70>)
 8008c16:	429c      	cmp	r4, r3
 8008c18:	d101      	bne.n	8008c1e <_fflush_r+0x62>
 8008c1a:	68ac      	ldr	r4, [r5, #8]
 8008c1c:	e7df      	b.n	8008bde <_fflush_r+0x22>
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <_fflush_r+0x74>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	bf08      	it	eq
 8008c24:	68ec      	ldreq	r4, [r5, #12]
 8008c26:	e7da      	b.n	8008bde <_fflush_r+0x22>
 8008c28:	08008ec8 	.word	0x08008ec8
 8008c2c:	08008ee8 	.word	0x08008ee8
 8008c30:	08008ea8 	.word	0x08008ea8

08008c34 <_lseek_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4d07      	ldr	r5, [pc, #28]	; (8008c54 <_lseek_r+0x20>)
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4608      	mov	r0, r1
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f7f7 ff48 	bl	8000ad8 <_lseek>
 8008c48:	1c43      	adds	r3, r0, #1
 8008c4a:	d102      	bne.n	8008c52 <_lseek_r+0x1e>
 8008c4c:	682b      	ldr	r3, [r5, #0]
 8008c4e:	b103      	cbz	r3, 8008c52 <_lseek_r+0x1e>
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	bd38      	pop	{r3, r4, r5, pc}
 8008c54:	20000588 	.word	0x20000588

08008c58 <__swhatbuf_r>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	460e      	mov	r6, r1
 8008c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c60:	2900      	cmp	r1, #0
 8008c62:	b096      	sub	sp, #88	; 0x58
 8008c64:	4614      	mov	r4, r2
 8008c66:	461d      	mov	r5, r3
 8008c68:	da08      	bge.n	8008c7c <__swhatbuf_r+0x24>
 8008c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	061a      	lsls	r2, r3, #24
 8008c74:	d410      	bmi.n	8008c98 <__swhatbuf_r+0x40>
 8008c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7a:	e00e      	b.n	8008c9a <__swhatbuf_r+0x42>
 8008c7c:	466a      	mov	r2, sp
 8008c7e:	f000 f8bb 	bl	8008df8 <_fstat_r>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	dbf1      	blt.n	8008c6a <__swhatbuf_r+0x12>
 8008c86:	9a01      	ldr	r2, [sp, #4]
 8008c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c90:	425a      	negs	r2, r3
 8008c92:	415a      	adcs	r2, r3
 8008c94:	602a      	str	r2, [r5, #0]
 8008c96:	e7ee      	b.n	8008c76 <__swhatbuf_r+0x1e>
 8008c98:	2340      	movs	r3, #64	; 0x40
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	b016      	add	sp, #88	; 0x58
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ca4 <__smakebuf_r>:
 8008ca4:	898b      	ldrh	r3, [r1, #12]
 8008ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca8:	079d      	lsls	r5, r3, #30
 8008caa:	4606      	mov	r6, r0
 8008cac:	460c      	mov	r4, r1
 8008cae:	d507      	bpl.n	8008cc0 <__smakebuf_r+0x1c>
 8008cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	6123      	str	r3, [r4, #16]
 8008cb8:	2301      	movs	r3, #1
 8008cba:	6163      	str	r3, [r4, #20]
 8008cbc:	b002      	add	sp, #8
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	ab01      	add	r3, sp, #4
 8008cc2:	466a      	mov	r2, sp
 8008cc4:	f7ff ffc8 	bl	8008c58 <__swhatbuf_r>
 8008cc8:	9900      	ldr	r1, [sp, #0]
 8008cca:	4605      	mov	r5, r0
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f7ff fa57 	bl	8008180 <_malloc_r>
 8008cd2:	b948      	cbnz	r0, 8008ce8 <__smakebuf_r+0x44>
 8008cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd8:	059a      	lsls	r2, r3, #22
 8008cda:	d4ef      	bmi.n	8008cbc <__smakebuf_r+0x18>
 8008cdc:	f023 0303 	bic.w	r3, r3, #3
 8008ce0:	f043 0302 	orr.w	r3, r3, #2
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	e7e3      	b.n	8008cb0 <__smakebuf_r+0xc>
 8008ce8:	4b0d      	ldr	r3, [pc, #52]	; (8008d20 <__smakebuf_r+0x7c>)
 8008cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	6020      	str	r0, [r4, #0]
 8008cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	6163      	str	r3, [r4, #20]
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	6120      	str	r0, [r4, #16]
 8008cfe:	b15b      	cbz	r3, 8008d18 <__smakebuf_r+0x74>
 8008d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d04:	4630      	mov	r0, r6
 8008d06:	f000 f889 	bl	8008e1c <_isatty_r>
 8008d0a:	b128      	cbz	r0, 8008d18 <__smakebuf_r+0x74>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	f043 0301 	orr.w	r3, r3, #1
 8008d16:	81a3      	strh	r3, [r4, #12]
 8008d18:	89a0      	ldrh	r0, [r4, #12]
 8008d1a:	4305      	orrs	r5, r0
 8008d1c:	81a5      	strh	r5, [r4, #12]
 8008d1e:	e7cd      	b.n	8008cbc <__smakebuf_r+0x18>
 8008d20:	08007f99 	.word	0x08007f99

08008d24 <__malloc_lock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	; (8008d2c <__malloc_lock+0x8>)
 8008d26:	f7ff ba09 	b.w	800813c <__retarget_lock_acquire_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	2000057c 	.word	0x2000057c

08008d30 <__malloc_unlock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__malloc_unlock+0x8>)
 8008d32:	f7ff ba04 	b.w	800813e <__retarget_lock_release_recursive>
 8008d36:	bf00      	nop
 8008d38:	2000057c 	.word	0x2000057c

08008d3c <_free_r>:
 8008d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d3e:	2900      	cmp	r1, #0
 8008d40:	d044      	beq.n	8008dcc <_free_r+0x90>
 8008d42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d4e:	bfb8      	it	lt
 8008d50:	18e4      	addlt	r4, r4, r3
 8008d52:	f7ff ffe7 	bl	8008d24 <__malloc_lock>
 8008d56:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <_free_r+0x94>)
 8008d58:	9801      	ldr	r0, [sp, #4]
 8008d5a:	6813      	ldr	r3, [r2, #0]
 8008d5c:	b933      	cbnz	r3, 8008d6c <_free_r+0x30>
 8008d5e:	6063      	str	r3, [r4, #4]
 8008d60:	6014      	str	r4, [r2, #0]
 8008d62:	b003      	add	sp, #12
 8008d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d68:	f7ff bfe2 	b.w	8008d30 <__malloc_unlock>
 8008d6c:	42a3      	cmp	r3, r4
 8008d6e:	d908      	bls.n	8008d82 <_free_r+0x46>
 8008d70:	6825      	ldr	r5, [r4, #0]
 8008d72:	1961      	adds	r1, r4, r5
 8008d74:	428b      	cmp	r3, r1
 8008d76:	bf01      	itttt	eq
 8008d78:	6819      	ldreq	r1, [r3, #0]
 8008d7a:	685b      	ldreq	r3, [r3, #4]
 8008d7c:	1949      	addeq	r1, r1, r5
 8008d7e:	6021      	streq	r1, [r4, #0]
 8008d80:	e7ed      	b.n	8008d5e <_free_r+0x22>
 8008d82:	461a      	mov	r2, r3
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b10b      	cbz	r3, 8008d8c <_free_r+0x50>
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d9fa      	bls.n	8008d82 <_free_r+0x46>
 8008d8c:	6811      	ldr	r1, [r2, #0]
 8008d8e:	1855      	adds	r5, r2, r1
 8008d90:	42a5      	cmp	r5, r4
 8008d92:	d10b      	bne.n	8008dac <_free_r+0x70>
 8008d94:	6824      	ldr	r4, [r4, #0]
 8008d96:	4421      	add	r1, r4
 8008d98:	1854      	adds	r4, r2, r1
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	6011      	str	r1, [r2, #0]
 8008d9e:	d1e0      	bne.n	8008d62 <_free_r+0x26>
 8008da0:	681c      	ldr	r4, [r3, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	6053      	str	r3, [r2, #4]
 8008da6:	4421      	add	r1, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	e7da      	b.n	8008d62 <_free_r+0x26>
 8008dac:	d902      	bls.n	8008db4 <_free_r+0x78>
 8008dae:	230c      	movs	r3, #12
 8008db0:	6003      	str	r3, [r0, #0]
 8008db2:	e7d6      	b.n	8008d62 <_free_r+0x26>
 8008db4:	6825      	ldr	r5, [r4, #0]
 8008db6:	1961      	adds	r1, r4, r5
 8008db8:	428b      	cmp	r3, r1
 8008dba:	bf04      	itt	eq
 8008dbc:	6819      	ldreq	r1, [r3, #0]
 8008dbe:	685b      	ldreq	r3, [r3, #4]
 8008dc0:	6063      	str	r3, [r4, #4]
 8008dc2:	bf04      	itt	eq
 8008dc4:	1949      	addeq	r1, r1, r5
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	6054      	str	r4, [r2, #4]
 8008dca:	e7ca      	b.n	8008d62 <_free_r+0x26>
 8008dcc:	b003      	add	sp, #12
 8008dce:	bd30      	pop	{r4, r5, pc}
 8008dd0:	20000580 	.word	0x20000580

08008dd4 <_read_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	; (8008df4 <_read_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7f7 fe18 	bl	8000a18 <_read>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_read_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_read_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000588 	.word	0x20000588

08008df8 <_fstat_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_fstat_r+0x20>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	f7f7 fe4c 	bl	8000aa2 <_fstat>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d102      	bne.n	8008e14 <_fstat_r+0x1c>
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	b103      	cbz	r3, 8008e14 <_fstat_r+0x1c>
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	20000588 	.word	0x20000588

08008e1c <_isatty_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d06      	ldr	r5, [pc, #24]	; (8008e38 <_isatty_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	602b      	str	r3, [r5, #0]
 8008e28:	f7f7 fe4b 	bl	8000ac2 <_isatty>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_isatty_r+0x1a>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_isatty_r+0x1a>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	20000588 	.word	0x20000588

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
