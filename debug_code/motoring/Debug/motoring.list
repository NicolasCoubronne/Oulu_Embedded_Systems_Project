
motoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e8c  08003e8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e8c  08003e8c  00013e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e94  08003e94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08003f0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003f0c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000178b  00000000  00000000  00029147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000708  00000000  00000000  0002b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f8c  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b10  00000000  00000000  0004d70c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca8fc  00000000  00000000  0005721c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002700  00000000  00000000  00121b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003bec 	.word	0x08003bec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003bec 	.word	0x08003bec

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)

{   int DataIdx;
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]

    for(DataIdx = 0; DataIdx < len; DataIdx ++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x26>

    {
    	ITM_SendChar(*ptr ++);
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffc9 	bl	80005b4 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx ++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x12>
    }

     return len;
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <arprint>:

void arprint(uint8_t* ar, uint8_t len)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < len; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00a      	b.n	8000664 <arprint+0x28>
	{
		printf("%x ", ar[i]);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	4619      	mov	r1, r3
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <arprint+0x40>)
 800065a:	f002 faf9 	bl	8002c50 <iprintf>
	for (int i = 0; i < len; i++)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf0      	blt.n	800064e <arprint+0x12>
	}
	printf("\n");
 800066c:	200a      	movs	r0, #10
 800066e:	f002 fb07 	bl	8002c80 <putchar>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	08003c04 	.word	0x08003c04

08000680 <bio_chksm>:

  //HAL_Delay(100);
}

uint8_t bio_chksm(uint8_t* buffer)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	uint32_t sm = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < buffer[3] + 1; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	e00c      	b.n	80006ac <bio_chksm+0x2c>
		sm += buffer[2 + i];
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	3302      	adds	r3, #2
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < buffer[3] + 1; i++) {
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	3301      	adds	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3303      	adds	r3, #3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	ddeb      	ble.n	8000692 <bio_chksm+0x12>
	}
	//printf("got checksum %x\n", ~((uint8_t)sm));
	return ~((uint8_t)sm);
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	b2db      	uxtb	r3, r3
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <move_servo>:
	  printf("ID set via broadcast mode to %u\n", test[6]);
  }
}

void move_servo(UART_HandleTypeDef *huart)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint8_t *test = (uint8_t*)calloc(9, sizeof(uint8_t));
 80006d8:	2101      	movs	r1, #1
 80006da:	2009      	movs	r0, #9
 80006dc:	f002 f9d4 	bl	8002a88 <calloc>
 80006e0:	4603      	mov	r3, r0
 80006e2:	60fb      	str	r3, [r7, #12]
  test[0] = 0xFF;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	22ff      	movs	r2, #255	; 0xff
 80006e8:	701a      	strb	r2, [r3, #0]
  test[1] = 0xFF;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	701a      	strb	r2, [r3, #0]
  test[2] = 0x03;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3302      	adds	r3, #2
 80006f6:	2203      	movs	r2, #3
 80006f8:	701a      	strb	r2, [r3, #0]
  test[3] = 0x05;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3303      	adds	r3, #3
 80006fe:	2205      	movs	r2, #5
 8000700:	701a      	strb	r2, [r3, #0]
  test[4] = 0x03;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3304      	adds	r3, #4
 8000706:	2203      	movs	r2, #3
 8000708:	701a      	strb	r2, [r3, #0]
  test[5] = 0x1E;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3305      	adds	r3, #5
 800070e:	221e      	movs	r2, #30
 8000710:	701a      	strb	r2, [r3, #0]
  test[6] = 0x02;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3306      	adds	r3, #6
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
  test[7] = 0x00;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3307      	adds	r3, #7
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
  test[8] = bio_chksm(test);
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f103 0408 	add.w	r4, r3, #8
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	f7ff ffa9 	bl	8000680 <bio_chksm>
 800072e:	4603      	mov	r3, r0
 8000730:	7023      	strb	r3, [r4, #0]

  HAL_HalfDuplex_EnableTransmitter(huart);
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f001 fe5e 	bl	80023f4 <HAL_HalfDuplex_EnableTransmitter>

  if (HAL_UART_Transmit(huart, test, 9, 2000) != HAL_OK) {
 8000738:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800073c:	2209      	movs	r2, #9
 800073e:	68f9      	ldr	r1, [r7, #12]
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f001 fd23 	bl	800218c <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d003      	beq.n	8000754 <move_servo+0x84>
	  printf("Failed to send move command via uart\n");
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <move_servo+0x94>)
 800074e:	f002 fb1b 	bl	8002d88 <puts>
  } else {
	  printf("Move goal set via broadcast mode");
  }
}
 8000752:	e002      	b.n	800075a <move_servo+0x8a>
	  printf("Move goal set via broadcast mode");
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <move_servo+0x98>)
 8000756:	f002 fa7b 	bl	8002c50 <iprintf>
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	bf00      	nop
 8000764:	08003d1c 	.word	0x08003d1c
 8000768:	08003d44 	.word	0x08003d44

0800076c <set_servo_led>:


void set_servo_led(UART_HandleTypeDef *huart, uint8_t* ret)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]

  printf("value of ret before: ");
 8000776:	4830      	ldr	r0, [pc, #192]	; (8000838 <set_servo_led+0xcc>)
 8000778:	f002 fa6a 	bl	8002c50 <iprintf>
  arprint(ret, 6);
 800077c:	2106      	movs	r1, #6
 800077e:	6838      	ldr	r0, [r7, #0]
 8000780:	f7ff ff5c 	bl	800063c <arprint>

  uint8_t *test = (uint8_t*)calloc(8, sizeof(uint8_t));
 8000784:	2101      	movs	r1, #1
 8000786:	2008      	movs	r0, #8
 8000788:	f002 f97e 	bl	8002a88 <calloc>
 800078c:	4603      	mov	r3, r0
 800078e:	60fb      	str	r3, [r7, #12]
  test[0] = 0xFF;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	701a      	strb	r2, [r3, #0]
  test[1] = 0xFF;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	3301      	adds	r3, #1
 800079a:	22ff      	movs	r2, #255	; 0xff
 800079c:	701a      	strb	r2, [r3, #0]
  test[2] = 0x03;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3302      	adds	r3, #2
 80007a2:	2203      	movs	r2, #3
 80007a4:	701a      	strb	r2, [r3, #0]
  test[3] = 0x04;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	3303      	adds	r3, #3
 80007aa:	2204      	movs	r2, #4
 80007ac:	701a      	strb	r2, [r3, #0]
  test[4] = 0x03;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2203      	movs	r2, #3
 80007b4:	701a      	strb	r2, [r3, #0]
  test[5] = 0x19;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3305      	adds	r3, #5
 80007ba:	2219      	movs	r2, #25
 80007bc:	701a      	strb	r2, [r3, #0]
  test[6] = 0x01;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	3306      	adds	r3, #6
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
  test[7] = bio_chksm(test);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1ddc      	adds	r4, r3, #7
 80007ca:	68f8      	ldr	r0, [r7, #12]
 80007cc:	f7ff ff58 	bl	8000680 <bio_chksm>
 80007d0:	4603      	mov	r3, r0
 80007d2:	7023      	strb	r3, [r4, #0]

  arprint(test, 8);
 80007d4:	2108      	movs	r1, #8
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff ff30 	bl	800063c <arprint>

  HAL_HalfDuplex_EnableTransmitter(huart);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f001 fe09 	bl	80023f4 <HAL_HalfDuplex_EnableTransmitter>
  if (HAL_UART_Transmit(huart, test, 8, 2000) != HAL_OK) {
 80007e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007e6:	2208      	movs	r2, #8
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f001 fcce 	bl	800218c <HAL_UART_Transmit>
	  //printf("Failed to send set led command via uart\n");
  } else {
	//  printf("Set led set via broadcast mode\n");
  }
  HAL_HalfDuplex_EnableReceiver(huart);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f001 fe33 	bl	800245c <HAL_HalfDuplex_EnableReceiver>
  uint8_t retval;
  if ((retval = HAL_UART_Receive(huart, ret, 6, 10000)) != HAL_OK) {
 80007f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80007fa:	2206      	movs	r2, #6
 80007fc:	6839      	ldr	r1, [r7, #0]
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f001 fd56 	bl	80022b0 <HAL_UART_Receive>
 8000804:	4603      	mov	r3, r0
 8000806:	72fb      	strb	r3, [r7, #11]
 8000808:	7afb      	ldrb	r3, [r7, #11]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d005      	beq.n	800081a <set_servo_led+0xae>
	  printf("Failed to read data via uart: %u\n", retval);
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	4619      	mov	r1, r3
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <set_servo_led+0xd0>)
 8000814:	f002 fa1c 	bl	8002c50 <iprintf>
 8000818:	e002      	b.n	8000820 <set_servo_led+0xb4>
  } else {
	  printf("Read data via uart\n");
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <set_servo_led+0xd4>)
 800081c:	f002 fab4 	bl	8002d88 <puts>
  }

  printf("value of ret after: ");
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <set_servo_led+0xd8>)
 8000822:	f002 fa15 	bl	8002c50 <iprintf>
  arprint(ret, 6);
 8000826:	2106      	movs	r1, #6
 8000828:	6838      	ldr	r0, [r7, #0]
 800082a:	f7ff ff07 	bl	800063c <arprint>

}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	08003d68 	.word	0x08003d68
 800083c:	08003d80 	.word	0x08003d80
 8000840:	08003da4 	.word	0x08003da4
 8000844:	08003db8 	.word	0x08003db8

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fae9 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f81b 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 f8db 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800085a:	f000 f8af 	bl	80009bc <MX_USART2_UART_Init>
  MX_UART4_Init();
 800085e:	f000 f883 	bl	8000968 <MX_UART4_Init>
	  move_servo(&huart4);
	  HAL_Delay(2000);
  }*/

  //set_nucleo_baud(&huart4, 1000000);
  uint8_t *ret = (uint8_t*)calloc(6, sizeof(uint8_t));
 8000862:	2101      	movs	r1, #1
 8000864:	2006      	movs	r0, #6
 8000866:	f002 f90f 	bl	8002a88 <calloc>
 800086a:	4603      	mov	r3, r0
 800086c:	607b      	str	r3, [r7, #4]
  set_servo_led(&huart4, ret);
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <main+0x40>)
 8000872:	f7ff ff7b 	bl	800076c <set_servo_led>
  HAL_Delay(2000);
 8000876:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087a:	f000 fb45 	bl	8000f08 <HAL_Delay>
  move_servo(&huart4);
 800087e:	4802      	ldr	r0, [pc, #8]	; (8000888 <main+0x40>)
 8000880:	f7ff ff26 	bl	80006d0 <move_servo>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x3c>
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f002 f926 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <SystemClock_Config+0xd4>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a29      	ldr	r2, [pc, #164]	; (8000960 <SystemClock_Config+0xd4>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <SystemClock_Config+0xd4>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xd8>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <SystemClock_Config+0xd8>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <SystemClock_Config+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000900:	2310      	movs	r3, #16
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000904:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000908:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800090a:	2304      	movs	r3, #4
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f8f6 	bl	8001b0c <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000926:	f000 f8e1 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2102      	movs	r1, #2
 8000946:	4618      	mov	r0, r3
 8000948:	f000 fd96 	bl	8001478 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000952:	f000 f8cb 	bl	8000aec <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_UART4_Init+0x48>)
 800096e:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <MX_UART4_Init+0x4c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1000000;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_UART4_Init+0x48>)
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <MX_UART4_Init+0x50>)
 8000976:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_UART4_Init+0x48>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_UART4_Init+0x48>)
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_UART4_Init+0x48>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_UART4_Init+0x48>)
 800098c:	220c      	movs	r2, #12
 800098e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_UART4_Init+0x48>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_UART4_Init+0x48>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_UART4_Init+0x48>)
 800099e:	f001 fba0 	bl	80020e2 <HAL_HalfDuplex_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_UART4_Init+0x44>
  {
    Error_Handler();
 80009a8:	f000 f8a0 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	40004c00 	.word	0x40004c00
 80009b8:	000f4240 	.word	0x000f4240

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART2_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f001 fb28 	bl	8002048 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f875 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d0 	.word	0x200000d0
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2120      	movs	r1, #32
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0xd4>)
 8000a9c:	f000 fcd2 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0xd8>)
 8000ab8:	f000 fb30 	bl	800111c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000abc:	2320      	movs	r3, #32
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0xd4>)
 8000ad4:	f000 fb22 	bl	800111c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020800 	.word	0x40020800

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Got error\n");
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <Error_Handler+0x10>)
 8000af2:	f002 f949 	bl	8002d88 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop
  __disable_irq();
  while (1)
 8000afa:	e7fe      	b.n	8000afa <Error_Handler+0xe>
 8000afc:	08003dd0 	.word	0x08003dd0

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3e:	2007      	movs	r0, #7
 8000b40:	f000 fab8 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <HAL_UART_MspInit+0xe8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
 8000b76:	4b31      	ldr	r3, [pc, #196]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a30      	ldr	r2, [pc, #192]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0xf0>)
 8000bc6:	f000 faa9 	bl	800111c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	e030      	b.n	8000c2e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1c      	ldr	r2, [pc, #112]	; (8000c44 <HAL_UART_MspInit+0xf4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0xec>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0xf0>)
 8000c2a:	f000 fa77 	bl	800111c <HAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004c00 	.word	0x40004c00
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40004400 	.word	0x40004400

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c94:	f000 f918 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
  }

  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_isatty>:

int _isatty(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f001 fe92 	bl	8002a98 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20020000 	.word	0x20020000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000114 	.word	0x20000114
 8000da8:	20000130 	.word	0x20000130

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f001 fe51 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fd21 	bl	8000848 <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e14:	08003e9c 	.word	0x08003e9c
  ldr r2, =_sbss
 8000e18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e1c:	2000012c 	.word	0x2000012c

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f931 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe52 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f93b 	bl	8001102 <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 f911 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x24>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a04      	ldr	r2, [pc, #16]	; (8000eec <HAL_IncTick+0x24>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000118 	.word	0x20000118

08000ef0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_GetTick+0x14>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	20000118 	.word	0x20000118

08000f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff ffee 	bl	8000ef0 <HAL_GetTick>
 8000f14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d005      	beq.n	8000f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Delay+0x44>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2e:	bf00      	nop
 8000f30:	f7ff ffde 	bl	8000ef0 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d8f7      	bhi.n	8000f30 <HAL_Delay+0x28>
  {
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008

08000f50 <__NVIC_SetPriorityGrouping>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_SetPriority>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff47 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff5c 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb0 	bl	8001070 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e165      	b.n	8001404 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001138:	2201      	movs	r2, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8154 	bne.w	80013fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	2b02      	cmp	r3, #2
 800116c:	d130      	bne.n	80011d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68da      	ldr	r2, [r3, #12]
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	091b      	lsrs	r3, r3, #4
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	69b9      	ldr	r1, [r7, #24]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80ae 	beq.w	80013fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HAL_GPIO_Init+0x300>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a5c      	ldr	r2, [pc, #368]	; (800141c <HAL_GPIO_Init+0x300>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HAL_GPIO_Init+0x300>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012be:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_GPIO_Init+0x304>)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	220f      	movs	r2, #15
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x308>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x21a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x30c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x216>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x310>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x212>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x314>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x20e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x318>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x20a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4a      	ldr	r2, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x31c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x206>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a49      	ldr	r2, [pc, #292]	; (800143c <HAL_GPIO_Init+0x320>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x202>
 800131a:	2306      	movs	r3, #6
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 800131e:	2307      	movs	r3, #7
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x21c>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_GPIO_Init+0x304>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a31      	ldr	r2, [pc, #196]	; (8001440 <HAL_GPIO_Init+0x324>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x324>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a11      	ldr	r2, [pc, #68]	; (8001440 <HAL_GPIO_Init+0x324>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae96 	bls.w	8001138 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90c      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d044      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d119      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e067      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fcc2 	bl	8000ef0 <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fcbe 	bl	8000ef0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f855 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001602:	4602      	mov	r2, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	490a      	ldr	r1, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	5ccb      	ldrb	r3, [r1, r3]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc22 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00
 8001634:	40023800 	.word	0x40023800
 8001638:	08003ddc 	.word	0x08003ddc
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_GetHCLKFreq+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000

0800165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001660:	f7ff fff0 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0a9b      	lsrs	r3, r3, #10
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	; (8001680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	08003dec 	.word	0x08003dec

08001684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001688:	f7ff ffdc 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	0b5b      	lsrs	r3, r3, #13
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	4903      	ldr	r1, [pc, #12]	; (80016a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	08003dec 	.word	0x08003dec

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016b0:	b0ae      	sub	sp, #184	; 0xb8
 80016b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016d2:	4bcb      	ldr	r3, [pc, #812]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	f200 8206 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x440>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	0800171d 	.word	0x0800171d
 80016ec:	08001aed 	.word	0x08001aed
 80016f0:	08001aed 	.word	0x08001aed
 80016f4:	08001aed 	.word	0x08001aed
 80016f8:	08001725 	.word	0x08001725
 80016fc:	08001aed 	.word	0x08001aed
 8001700:	08001aed 	.word	0x08001aed
 8001704:	08001aed 	.word	0x08001aed
 8001708:	0800172d 	.word	0x0800172d
 800170c:	08001aed 	.word	0x08001aed
 8001710:	08001aed 	.word	0x08001aed
 8001714:	08001aed 	.word	0x08001aed
 8001718:	0800191d 	.word	0x0800191d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800171c:	4bb9      	ldr	r3, [pc, #740]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x358>)
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001722:	e1e7      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001724:	4bb8      	ldr	r3, [pc, #736]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800172a:	e1e3      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172c:	4bb4      	ldr	r3, [pc, #720]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001738:	4bb1      	ldr	r3, [pc, #708]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d071      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001744:	4bae      	ldr	r3, [pc, #696]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	2200      	movs	r2, #0
 800174c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001750:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800176a:	4622      	mov	r2, r4
 800176c:	462b      	mov	r3, r5
 800176e:	f04f 0000 	mov.w	r0, #0
 8001772:	f04f 0100 	mov.w	r1, #0
 8001776:	0159      	lsls	r1, r3, #5
 8001778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800177c:	0150      	lsls	r0, r2, #5
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4621      	mov	r1, r4
 8001784:	1a51      	subs	r1, r2, r1
 8001786:	6439      	str	r1, [r7, #64]	; 0x40
 8001788:	4629      	mov	r1, r5
 800178a:	eb63 0301 	sbc.w	r3, r3, r1
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800179c:	4649      	mov	r1, r9
 800179e:	018b      	lsls	r3, r1, #6
 80017a0:	4641      	mov	r1, r8
 80017a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a6:	4641      	mov	r1, r8
 80017a8:	018a      	lsls	r2, r1, #6
 80017aa:	4641      	mov	r1, r8
 80017ac:	1a51      	subs	r1, r2, r1
 80017ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80017b0:	4649      	mov	r1, r9
 80017b2:	eb63 0301 	sbc.w	r3, r3, r1
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017c4:	4649      	mov	r1, r9
 80017c6:	00cb      	lsls	r3, r1, #3
 80017c8:	4641      	mov	r1, r8
 80017ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017ce:	4641      	mov	r1, r8
 80017d0:	00ca      	lsls	r2, r1, #3
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	4622      	mov	r2, r4
 80017da:	189b      	adds	r3, r3, r2
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
 80017de:	462b      	mov	r3, r5
 80017e0:	460a      	mov	r2, r1
 80017e2:	eb42 0303 	adc.w	r3, r2, r3
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017f4:	4629      	mov	r1, r5
 80017f6:	024b      	lsls	r3, r1, #9
 80017f8:	4621      	mov	r1, r4
 80017fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017fe:	4621      	mov	r1, r4
 8001800:	024a      	lsls	r2, r1, #9
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001810:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001814:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001818:	f7fe fd4a 	bl	80002b0 <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001826:	e067      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001828:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	099b      	lsrs	r3, r3, #6
 800182e:	2200      	movs	r2, #0
 8001830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001834:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800183c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001840:	67bb      	str	r3, [r7, #120]	; 0x78
 8001842:	2300      	movs	r3, #0
 8001844:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001846:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800184a:	4622      	mov	r2, r4
 800184c:	462b      	mov	r3, r5
 800184e:	f04f 0000 	mov.w	r0, #0
 8001852:	f04f 0100 	mov.w	r1, #0
 8001856:	0159      	lsls	r1, r3, #5
 8001858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185c:	0150      	lsls	r0, r2, #5
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4621      	mov	r1, r4
 8001864:	1a51      	subs	r1, r2, r1
 8001866:	62b9      	str	r1, [r7, #40]	; 0x28
 8001868:	4629      	mov	r1, r5
 800186a:	eb63 0301 	sbc.w	r3, r3, r1
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800187c:	4649      	mov	r1, r9
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001886:	4641      	mov	r1, r8
 8001888:	018a      	lsls	r2, r1, #6
 800188a:	4641      	mov	r1, r8
 800188c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001890:	4649      	mov	r1, r9
 8001892:	eb63 0b01 	sbc.w	fp, r3, r1
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018aa:	4692      	mov	sl, r2
 80018ac:	469b      	mov	fp, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	eb1a 0303 	adds.w	r3, sl, r3
 80018b4:	623b      	str	r3, [r7, #32]
 80018b6:	462b      	mov	r3, r5
 80018b8:	eb4b 0303 	adc.w	r3, fp, r3
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ca:	4629      	mov	r1, r5
 80018cc:	028b      	lsls	r3, r1, #10
 80018ce:	4621      	mov	r1, r4
 80018d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018d4:	4621      	mov	r1, r4
 80018d6:	028a      	lsls	r2, r1, #10
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e0:	2200      	movs	r2, #0
 80018e2:	673b      	str	r3, [r7, #112]	; 0x70
 80018e4:	677a      	str	r2, [r7, #116]	; 0x74
 80018e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018ea:	f7fe fce1 	bl	80002b0 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4613      	mov	r3, r2
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	3301      	adds	r3, #1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800190a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800190e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800191a:	e0eb      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001928:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d06b      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	66bb      	str	r3, [r7, #104]	; 0x68
 800193e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001946:	663b      	str	r3, [r7, #96]	; 0x60
 8001948:	2300      	movs	r3, #0
 800194a:	667b      	str	r3, [r7, #100]	; 0x64
 800194c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001950:	4622      	mov	r2, r4
 8001952:	462b      	mov	r3, r5
 8001954:	f04f 0000 	mov.w	r0, #0
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	0159      	lsls	r1, r3, #5
 800195e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001962:	0150      	lsls	r0, r2, #5
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4621      	mov	r1, r4
 800196a:	1a51      	subs	r1, r2, r1
 800196c:	61b9      	str	r1, [r7, #24]
 800196e:	4629      	mov	r1, r5
 8001970:	eb63 0301 	sbc.w	r3, r3, r1
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001982:	4659      	mov	r1, fp
 8001984:	018b      	lsls	r3, r1, #6
 8001986:	4651      	mov	r1, sl
 8001988:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198c:	4651      	mov	r1, sl
 800198e:	018a      	lsls	r2, r1, #6
 8001990:	4651      	mov	r1, sl
 8001992:	ebb2 0801 	subs.w	r8, r2, r1
 8001996:	4659      	mov	r1, fp
 8001998:	eb63 0901 	sbc.w	r9, r3, r1
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b0:	4690      	mov	r8, r2
 80019b2:	4699      	mov	r9, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	eb18 0303 	adds.w	r3, r8, r3
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	462b      	mov	r3, r5
 80019be:	eb49 0303 	adc.w	r3, r9, r3
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019d0:	4629      	mov	r1, r5
 80019d2:	024b      	lsls	r3, r1, #9
 80019d4:	4621      	mov	r1, r4
 80019d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019da:	4621      	mov	r1, r4
 80019dc:	024a      	lsls	r2, r1, #9
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e6:	2200      	movs	r2, #0
 80019e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80019ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019f0:	f7fe fc5e 	bl	80002b0 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019fe:	e065      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x420>
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400
 8001a08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	4611      	mov	r1, r2
 8001a18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a1e:	2300      	movs	r3, #0
 8001a20:	657b      	str	r3, [r7, #84]	; 0x54
 8001a22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a26:	4642      	mov	r2, r8
 8001a28:	464b      	mov	r3, r9
 8001a2a:	f04f 0000 	mov.w	r0, #0
 8001a2e:	f04f 0100 	mov.w	r1, #0
 8001a32:	0159      	lsls	r1, r3, #5
 8001a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a38:	0150      	lsls	r0, r2, #5
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4641      	mov	r1, r8
 8001a40:	1a51      	subs	r1, r2, r1
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	4649      	mov	r1, r9
 8001a46:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a58:	4659      	mov	r1, fp
 8001a5a:	018b      	lsls	r3, r1, #6
 8001a5c:	4651      	mov	r1, sl
 8001a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a62:	4651      	mov	r1, sl
 8001a64:	018a      	lsls	r2, r1, #6
 8001a66:	4651      	mov	r1, sl
 8001a68:	1a54      	subs	r4, r2, r1
 8001a6a:	4659      	mov	r1, fp
 8001a6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	f04f 0300 	mov.w	r3, #0
 8001a78:	00eb      	lsls	r3, r5, #3
 8001a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a7e:	00e2      	lsls	r2, r4, #3
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	4643      	mov	r3, r8
 8001a86:	18e3      	adds	r3, r4, r3
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	eb45 0303 	adc.w	r3, r5, r3
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ab8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001abe:	f7fe fbf7 	bl	80002b0 <__aeabi_uldivmod>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0f1b      	lsrs	r3, r3, #28
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001aea:	e003      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	37b8      	adds	r7, #184	; 0xb8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400

08001b0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e28d      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8083 	beq.w	8001c32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b2c:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d019      	beq.n	8001b6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b38:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b44:	4b8e      	ldr	r3, [pc, #568]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b50:	d00c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b8b      	ldr	r3, [pc, #556]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d112      	bne.n	8001b84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5e:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6a:	d10b      	bne.n	8001b84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6c:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d05b      	beq.n	8001c30 <HAL_RCC_OscConfig+0x124>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d157      	bne.n	8001c30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e25a      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d106      	bne.n	8001b9c <HAL_RCC_OscConfig+0x90>
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7b      	ldr	r2, [pc, #492]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xcc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xb4>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xcc>
 8001bc0:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6e      	ldr	r2, [pc, #440]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6b      	ldr	r2, [pc, #428]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f986 	bl	8000ef0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff f982 	bl	8000ef0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e21f      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xdc>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f972 	bl	8000ef0 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff f96e 	bl	8000ef0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e20b      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x104>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d06f      	beq.n	8001d1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d017      	beq.n	8001c7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d11c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d116      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x186>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e1d3      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4937      	ldr	r1, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	e03a      	b.n	8001d1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f91b 	bl	8000ef0 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f917 	bl	8000ef0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e1b4      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4925      	ldr	r1, [pc, #148]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x278>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7ff f8fa 	bl	8000ef0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d00:	f7ff f8f6 	bl	8000ef0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e193      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f0      	bne.n	8001d00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d036      	beq.n	8001d98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d016      	beq.n	8001d60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d38:	f7ff f8da 	bl	8000ef0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff f8d6 	bl	8000ef0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e173      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d52:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x274>)
 8001d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x234>
 8001d5e:	e01b      	b.n	8001d98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7ff f8c3 	bl	8000ef0 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	e00e      	b.n	8001d8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f8bf 	bl	8000ef0 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d907      	bls.n	8001d8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e15c      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
 8001d80:	40023800 	.word	0x40023800
 8001d84:	42470000 	.word	0x42470000
 8001d88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8c:	4b8a      	ldr	r3, [pc, #552]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1ea      	bne.n	8001d6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8097 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001daa:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10f      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a7e      	ldr	r2, [pc, #504]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b7c      	ldr	r3, [pc, #496]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b79      	ldr	r3, [pc, #484]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f87f 	bl	8000ef0 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff f87b 	bl	8000ef0 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e118      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x4b0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x31e>
 8001e1c:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a65      	ldr	r2, [pc, #404]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e01c      	b.n	8001e64 <HAL_RCC_OscConfig+0x358>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x340>
 8001e32:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a60      	ldr	r2, [pc, #384]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	4a5d      	ldr	r2, [pc, #372]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4a:	e00b      	b.n	8001e64 <HAL_RCC_OscConfig+0x358>
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
 8001e58:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	f023 0304 	bic.w	r3, r3, #4
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d015      	beq.n	8001e98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f840 	bl	8000ef0 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e72:	e00a      	b.n	8001e8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e74:	f7ff f83c 	bl	8000ef0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e0d7      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0ee      	beq.n	8001e74 <HAL_RCC_OscConfig+0x368>
 8001e96:	e014      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff f82a 	bl	8000ef0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f826 	bl	8000ef0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0c1      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb6:	4b40      	ldr	r3, [pc, #256]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1ee      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80ad 	beq.w	8002038 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d060      	beq.n	8001fac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d145      	bne.n	8001f7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x4b4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fffa 	bl	8000ef0 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fff6 	bl	8000ef0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e093      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	3b01      	subs	r3, #1
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	061b      	lsls	r3, r3, #24
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	071b      	lsls	r3, r3, #28
 8001f4a:	491b      	ldr	r1, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <HAL_RCC_OscConfig+0x4b4>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffcb 	bl	8000ef0 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe ffc7 	bl	8000ef0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e064      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x452>
 8001f7c:	e05c      	b.n	8002038 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_OscConfig+0x4b4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ffb4 	bl	8000ef0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe ffb0 	bl	8000ef0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e04d      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x480>
 8001faa:	e045      	b.n	8002038 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e040      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_RCC_OscConfig+0x538>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d030      	beq.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d129      	bne.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d122      	bne.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ffa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d119      	bne.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	3b01      	subs	r3, #1
 800200e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d10f      	bne.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e03f      	b.n	80020da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd6e 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 fa87 	bl	80025a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e047      	b.n	8002184 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7fe fd21 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2224      	movs	r2, #36	; 0x24
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002124:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa3a 	bl	80025a0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800213a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800214a:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0208 	orr.w	r2, r2, #8
 800215a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	d17c      	bne.n	80022a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_UART_Transmit+0x2c>
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e075      	b.n	80022a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_UART_Transmit+0x3e>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e06e      	b.n	80022a8 <HAL_UART_Transmit+0x11c>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2221      	movs	r2, #33	; 0x21
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fe86 	bl	8000ef0 <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d108      	bne.n	800220e <HAL_UART_Transmit+0x82>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e003      	b.n	8002216 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800221e:	e02a      	b.n	8002276 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2200      	movs	r2, #0
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f94a 	bl	80024c4 <UART_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e036      	b.n	80022a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800224e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3302      	adds	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e007      	b.n	8002268 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1cf      	bne.n	8002220 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2200      	movs	r2, #0
 8002288:	2140      	movs	r1, #64	; 0x40
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f91a 	bl	80024c4 <UART_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e006      	b.n	80022a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	f040 808c 	bne.w	80023ea <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_UART_Receive+0x2e>
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e084      	b.n	80023ec <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <HAL_UART_Receive+0x40>
 80022ec:	2302      	movs	r3, #2
 80022ee:	e07d      	b.n	80023ec <HAL_UART_Receive+0x13c>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2222      	movs	r2, #34	; 0x22
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230c:	f7fe fdf0 	bl	8000ef0 <HAL_GetTick>
 8002310:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	88fa      	ldrh	r2, [r7, #6]
 8002316:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002326:	d108      	bne.n	800233a <HAL_UART_Receive+0x8a>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e003      	b.n	8002342 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800234a:	e043      	b.n	80023d4 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2200      	movs	r2, #0
 8002354:	2120      	movs	r1, #32
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f8b4 	bl	80024c4 <UART_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e042      	b.n	80023ec <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10c      	bne.n	8002386 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	b29a      	uxth	r2, r3
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	3302      	adds	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e01f      	b.n	80023c6 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	d007      	beq.n	80023a0 <HAL_UART_Receive+0xf0>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <HAL_UART_Receive+0xfe>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d106      	bne.n	80023ae <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	e008      	b.n	80023c0 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1b6      	bne.n	800234c <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800240a:	2302      	movs	r3, #2
 800240c:	e020      	b.n	8002450 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2224      	movs	r2, #36	; 0x24
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f023 030c 	bic.w	r3, r3, #12
 800242c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8002472:	2302      	movs	r3, #2
 8002474:	e020      	b.n	80024b8 <HAL_HalfDuplex_EnableReceiver+0x5c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2224      	movs	r2, #36	; 0x24
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f023 030c 	bic.w	r3, r3, #12
 8002494:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b090      	sub	sp, #64	; 0x40
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d4:	e050      	b.n	8002578 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d04c      	beq.n	8002578 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80024e4:	f7fe fd04 	bl	8000ef0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d241      	bcs.n	8002578 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	330c      	adds	r3, #12
 8002512:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002514:	637a      	str	r2, [r7, #52]	; 0x34
 8002516:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800251a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800251c:	e841 2300 	strex	r3, r2, [r1]
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e5      	bne.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3314      	adds	r3, #20
 800252e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	e853 3f00 	ldrex	r3, [r3]
 8002536:	613b      	str	r3, [r7, #16]
   return(result);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3314      	adds	r3, #20
 8002546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002548:	623a      	str	r2, [r7, #32]
 800254a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254c:	69f9      	ldr	r1, [r7, #28]
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	e841 2300 	strex	r3, r2, [r1]
 8002554:	61bb      	str	r3, [r7, #24]
   return(result);
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e5      	bne.n	8002528 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e00f      	b.n	8002598 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	429a      	cmp	r2, r3
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d09f      	beq.n	80024d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3740      	adds	r7, #64	; 0x40
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b0c0      	sub	sp, #256	; 0x100
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	68d9      	ldr	r1, [r3, #12]
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	ea40 0301 	orr.w	r3, r0, r1
 80025c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	431a      	orrs	r2, r3
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025f8:	f021 010c 	bic.w	r1, r1, #12
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002606:	430b      	orrs	r3, r1
 8002608:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800260a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800261a:	6999      	ldr	r1, [r3, #24]
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	ea40 0301 	orr.w	r3, r0, r1
 8002626:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b8f      	ldr	r3, [pc, #572]	; (800286c <UART_SetConfig+0x2cc>)
 8002630:	429a      	cmp	r2, r3
 8002632:	d005      	beq.n	8002640 <UART_SetConfig+0xa0>
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <UART_SetConfig+0x2d0>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d104      	bne.n	800264a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002640:	f7ff f820 	bl	8001684 <HAL_RCC_GetPCLK2Freq>
 8002644:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002648:	e003      	b.n	8002652 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800264a:	f7ff f807 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 800264e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265c:	f040 810c 	bne.w	8002878 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002664:	2200      	movs	r2, #0
 8002666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800266a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800266e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002672:	4622      	mov	r2, r4
 8002674:	462b      	mov	r3, r5
 8002676:	1891      	adds	r1, r2, r2
 8002678:	65b9      	str	r1, [r7, #88]	; 0x58
 800267a:	415b      	adcs	r3, r3
 800267c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800267e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002682:	4621      	mov	r1, r4
 8002684:	eb12 0801 	adds.w	r8, r2, r1
 8002688:	4629      	mov	r1, r5
 800268a:	eb43 0901 	adc.w	r9, r3, r1
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800269e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a2:	4690      	mov	r8, r2
 80026a4:	4699      	mov	r9, r3
 80026a6:	4623      	mov	r3, r4
 80026a8:	eb18 0303 	adds.w	r3, r8, r3
 80026ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026b0:	462b      	mov	r3, r5
 80026b2:	eb49 0303 	adc.w	r3, r9, r3
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80026ce:	460b      	mov	r3, r1
 80026d0:	18db      	adds	r3, r3, r3
 80026d2:	653b      	str	r3, [r7, #80]	; 0x50
 80026d4:	4613      	mov	r3, r2
 80026d6:	eb42 0303 	adc.w	r3, r2, r3
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
 80026dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026e4:	f7fd fde4 	bl	80002b0 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4b61      	ldr	r3, [pc, #388]	; (8002874 <UART_SetConfig+0x2d4>)
 80026ee:	fba3 2302 	umull	r2, r3, r3, r2
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	011c      	lsls	r4, r3, #4
 80026f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002700:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002704:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002708:	4642      	mov	r2, r8
 800270a:	464b      	mov	r3, r9
 800270c:	1891      	adds	r1, r2, r2
 800270e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002710:	415b      	adcs	r3, r3
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002718:	4641      	mov	r1, r8
 800271a:	eb12 0a01 	adds.w	sl, r2, r1
 800271e:	4649      	mov	r1, r9
 8002720:	eb43 0b01 	adc.w	fp, r3, r1
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002730:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002734:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002738:	4692      	mov	sl, r2
 800273a:	469b      	mov	fp, r3
 800273c:	4643      	mov	r3, r8
 800273e:	eb1a 0303 	adds.w	r3, sl, r3
 8002742:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002746:	464b      	mov	r3, r9
 8002748:	eb4b 0303 	adc.w	r3, fp, r3
 800274c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800275c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002760:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002764:	460b      	mov	r3, r1
 8002766:	18db      	adds	r3, r3, r3
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
 800276a:	4613      	mov	r3, r2
 800276c:	eb42 0303 	adc.w	r3, r2, r3
 8002770:	647b      	str	r3, [r7, #68]	; 0x44
 8002772:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002776:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800277a:	f7fd fd99 	bl	80002b0 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4611      	mov	r1, r2
 8002784:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <UART_SetConfig+0x2d4>)
 8002786:	fba3 2301 	umull	r2, r3, r3, r1
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2264      	movs	r2, #100	; 0x64
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800279a:	4b36      	ldr	r3, [pc, #216]	; (8002874 <UART_SetConfig+0x2d4>)
 800279c:	fba3 2302 	umull	r2, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027a8:	441c      	add	r4, r3
 80027aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027bc:	4642      	mov	r2, r8
 80027be:	464b      	mov	r3, r9
 80027c0:	1891      	adds	r1, r2, r2
 80027c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027c4:	415b      	adcs	r3, r3
 80027c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027cc:	4641      	mov	r1, r8
 80027ce:	1851      	adds	r1, r2, r1
 80027d0:	6339      	str	r1, [r7, #48]	; 0x30
 80027d2:	4649      	mov	r1, r9
 80027d4:	414b      	adcs	r3, r1
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027e4:	4659      	mov	r1, fp
 80027e6:	00cb      	lsls	r3, r1, #3
 80027e8:	4651      	mov	r1, sl
 80027ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ee:	4651      	mov	r1, sl
 80027f0:	00ca      	lsls	r2, r1, #3
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	4642      	mov	r2, r8
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002800:	464b      	mov	r3, r9
 8002802:	460a      	mov	r2, r1
 8002804:	eb42 0303 	adc.w	r3, r2, r3
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002818:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800281c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002820:	460b      	mov	r3, r1
 8002822:	18db      	adds	r3, r3, r3
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
 8002826:	4613      	mov	r3, r2
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002832:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002836:	f7fd fd3b 	bl	80002b0 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <UART_SetConfig+0x2d4>)
 8002840:	fba3 1302 	umull	r1, r3, r3, r2
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	2164      	movs	r1, #100	; 0x64
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	3332      	adds	r3, #50	; 0x32
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <UART_SetConfig+0x2d4>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4422      	add	r2, r4
 8002866:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002868:	e105      	b.n	8002a76 <UART_SetConfig+0x4d6>
 800286a:	bf00      	nop
 800286c:	40011000 	.word	0x40011000
 8002870:	40011400 	.word	0x40011400
 8002874:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002882:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002886:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800288a:	4642      	mov	r2, r8
 800288c:	464b      	mov	r3, r9
 800288e:	1891      	adds	r1, r2, r2
 8002890:	6239      	str	r1, [r7, #32]
 8002892:	415b      	adcs	r3, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800289a:	4641      	mov	r1, r8
 800289c:	1854      	adds	r4, r2, r1
 800289e:	4649      	mov	r1, r9
 80028a0:	eb43 0501 	adc.w	r5, r3, r1
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028c0:	464b      	mov	r3, r9
 80028c2:	eb45 0303 	adc.w	r3, r5, r3
 80028c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80028d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028e6:	4629      	mov	r1, r5
 80028e8:	008b      	lsls	r3, r1, #2
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028f0:	4621      	mov	r1, r4
 80028f2:	008a      	lsls	r2, r1, #2
 80028f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028f8:	f7fd fcda 	bl	80002b0 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002902:	fba3 2302 	umull	r2, r3, r3, r2
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	011c      	lsls	r4, r3, #4
 800290a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002914:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002918:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	61b9      	str	r1, [r7, #24]
 8002924:	415b      	adcs	r3, r3
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800292c:	4641      	mov	r1, r8
 800292e:	1851      	adds	r1, r2, r1
 8002930:	6139      	str	r1, [r7, #16]
 8002932:	4649      	mov	r1, r9
 8002934:	414b      	adcs	r3, r1
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002944:	4659      	mov	r1, fp
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4651      	mov	r1, sl
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4642      	mov	r2, r8
 800295a:	189b      	adds	r3, r3, r2
 800295c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002960:	464b      	mov	r3, r9
 8002962:	460a      	mov	r2, r1
 8002964:	eb42 0303 	adc.w	r3, r2, r3
 8002968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	67bb      	str	r3, [r7, #120]	; 0x78
 8002976:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002984:	4649      	mov	r1, r9
 8002986:	008b      	lsls	r3, r1, #2
 8002988:	4641      	mov	r1, r8
 800298a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800298e:	4641      	mov	r1, r8
 8002990:	008a      	lsls	r2, r1, #2
 8002992:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002996:	f7fd fc8b 	bl	80002b0 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <UART_SetConfig+0x4e4>)
 80029a0:	fba3 1302 	umull	r1, r3, r3, r2
 80029a4:	095b      	lsrs	r3, r3, #5
 80029a6:	2164      	movs	r1, #100	; 0x64
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	3332      	adds	r3, #50	; 0x32
 80029b2:	4a34      	ldr	r2, [pc, #208]	; (8002a84 <UART_SetConfig+0x4e4>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029be:	441c      	add	r4, r3
 80029c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c4:	2200      	movs	r2, #0
 80029c6:	673b      	str	r3, [r7, #112]	; 0x70
 80029c8:	677a      	str	r2, [r7, #116]	; 0x74
 80029ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029ce:	4642      	mov	r2, r8
 80029d0:	464b      	mov	r3, r9
 80029d2:	1891      	adds	r1, r2, r2
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	415b      	adcs	r3, r3
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029de:	4641      	mov	r1, r8
 80029e0:	1851      	adds	r1, r2, r1
 80029e2:	6039      	str	r1, [r7, #0]
 80029e4:	4649      	mov	r1, r9
 80029e6:	414b      	adcs	r3, r1
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029f6:	4659      	mov	r1, fp
 80029f8:	00cb      	lsls	r3, r1, #3
 80029fa:	4651      	mov	r1, sl
 80029fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a00:	4651      	mov	r1, sl
 8002a02:	00ca      	lsls	r2, r1, #3
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a10:	464b      	mov	r3, r9
 8002a12:	460a      	mov	r2, r1
 8002a14:	eb42 0303 	adc.w	r3, r2, r3
 8002a18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	663b      	str	r3, [r7, #96]	; 0x60
 8002a24:	667a      	str	r2, [r7, #100]	; 0x64
 8002a26:	f04f 0200 	mov.w	r2, #0
 8002a2a:	f04f 0300 	mov.w	r3, #0
 8002a2e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a32:	4649      	mov	r1, r9
 8002a34:	008b      	lsls	r3, r1, #2
 8002a36:	4641      	mov	r1, r8
 8002a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	008a      	lsls	r2, r1, #2
 8002a40:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a44:	f7fd fc34 	bl	80002b0 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2164      	movs	r1, #100	; 0x64
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	3332      	adds	r3, #50	; 0x32
 8002a60:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <UART_SetConfig+0x4e4>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	095b      	lsrs	r3, r3, #5
 8002a68:	f003 020f 	and.w	r2, r3, #15
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4422      	add	r2, r4
 8002a74:	609a      	str	r2, [r3, #8]
}
 8002a76:	bf00      	nop
 8002a78:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a82:	bf00      	nop
 8002a84:	51eb851f 	.word	0x51eb851f

08002a88 <calloc>:
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <calloc+0xc>)
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	f000 b834 	b.w	8002afc <_calloc_r>
 8002a94:	2000000c 	.word	0x2000000c

08002a98 <__errno>:
 8002a98:	4b01      	ldr	r3, [pc, #4]	; (8002aa0 <__errno+0x8>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	4d0d      	ldr	r5, [pc, #52]	; (8002adc <__libc_init_array+0x38>)
 8002aa8:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <__libc_init_array+0x3c>)
 8002aaa:	1b64      	subs	r4, r4, r5
 8002aac:	10a4      	asrs	r4, r4, #2
 8002aae:	2600      	movs	r6, #0
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	4d0b      	ldr	r5, [pc, #44]	; (8002ae4 <__libc_init_array+0x40>)
 8002ab6:	4c0c      	ldr	r4, [pc, #48]	; (8002ae8 <__libc_init_array+0x44>)
 8002ab8:	f001 f898 	bl	8003bec <_init>
 8002abc:	1b64      	subs	r4, r4, r5
 8002abe:	10a4      	asrs	r4, r4, #2
 8002ac0:	2600      	movs	r6, #0
 8002ac2:	42a6      	cmp	r6, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002acc:	4798      	blx	r3
 8002ace:	3601      	adds	r6, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad6:	4798      	blx	r3
 8002ad8:	3601      	adds	r6, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	08003e94 	.word	0x08003e94
 8002ae0:	08003e94 	.word	0x08003e94
 8002ae4:	08003e94 	.word	0x08003e94
 8002ae8:	08003e98 	.word	0x08003e98

08002aec <memset>:
 8002aec:	4402      	add	r2, r0
 8002aee:	4603      	mov	r3, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <_calloc_r>:
 8002afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002afe:	fba1 2402 	umull	r2, r4, r1, r2
 8002b02:	b94c      	cbnz	r4, 8002b18 <_calloc_r+0x1c>
 8002b04:	4611      	mov	r1, r2
 8002b06:	9201      	str	r2, [sp, #4]
 8002b08:	f000 f82e 	bl	8002b68 <_malloc_r>
 8002b0c:	9a01      	ldr	r2, [sp, #4]
 8002b0e:	4605      	mov	r5, r0
 8002b10:	b930      	cbnz	r0, 8002b20 <_calloc_r+0x24>
 8002b12:	4628      	mov	r0, r5
 8002b14:	b003      	add	sp, #12
 8002b16:	bd30      	pop	{r4, r5, pc}
 8002b18:	220c      	movs	r2, #12
 8002b1a:	6002      	str	r2, [r0, #0]
 8002b1c:	2500      	movs	r5, #0
 8002b1e:	e7f8      	b.n	8002b12 <_calloc_r+0x16>
 8002b20:	4621      	mov	r1, r4
 8002b22:	f7ff ffe3 	bl	8002aec <memset>
 8002b26:	e7f4      	b.n	8002b12 <_calloc_r+0x16>

08002b28 <sbrk_aligned>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	4e0e      	ldr	r6, [pc, #56]	; (8002b64 <sbrk_aligned+0x3c>)
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	6831      	ldr	r1, [r6, #0]
 8002b30:	4605      	mov	r5, r0
 8002b32:	b911      	cbnz	r1, 8002b3a <sbrk_aligned+0x12>
 8002b34:	f000 f930 	bl	8002d98 <_sbrk_r>
 8002b38:	6030      	str	r0, [r6, #0]
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 f92b 	bl	8002d98 <_sbrk_r>
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	d00a      	beq.n	8002b5c <sbrk_aligned+0x34>
 8002b46:	1cc4      	adds	r4, r0, #3
 8002b48:	f024 0403 	bic.w	r4, r4, #3
 8002b4c:	42a0      	cmp	r0, r4
 8002b4e:	d007      	beq.n	8002b60 <sbrk_aligned+0x38>
 8002b50:	1a21      	subs	r1, r4, r0
 8002b52:	4628      	mov	r0, r5
 8002b54:	f000 f920 	bl	8002d98 <_sbrk_r>
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d101      	bne.n	8002b60 <sbrk_aligned+0x38>
 8002b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8002b60:	4620      	mov	r0, r4
 8002b62:	bd70      	pop	{r4, r5, r6, pc}
 8002b64:	20000120 	.word	0x20000120

08002b68 <_malloc_r>:
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6c:	1ccd      	adds	r5, r1, #3
 8002b6e:	f025 0503 	bic.w	r5, r5, #3
 8002b72:	3508      	adds	r5, #8
 8002b74:	2d0c      	cmp	r5, #12
 8002b76:	bf38      	it	cc
 8002b78:	250c      	movcc	r5, #12
 8002b7a:	2d00      	cmp	r5, #0
 8002b7c:	4607      	mov	r7, r0
 8002b7e:	db01      	blt.n	8002b84 <_malloc_r+0x1c>
 8002b80:	42a9      	cmp	r1, r5
 8002b82:	d905      	bls.n	8002b90 <_malloc_r+0x28>
 8002b84:	230c      	movs	r3, #12
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	2600      	movs	r6, #0
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b90:	4e2e      	ldr	r6, [pc, #184]	; (8002c4c <_malloc_r+0xe4>)
 8002b92:	f000 fbf1 	bl	8003378 <__malloc_lock>
 8002b96:	6833      	ldr	r3, [r6, #0]
 8002b98:	461c      	mov	r4, r3
 8002b9a:	bb34      	cbnz	r4, 8002bea <_malloc_r+0x82>
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7ff ffc2 	bl	8002b28 <sbrk_aligned>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	d14d      	bne.n	8002c46 <_malloc_r+0xde>
 8002baa:	6834      	ldr	r4, [r6, #0]
 8002bac:	4626      	mov	r6, r4
 8002bae:	2e00      	cmp	r6, #0
 8002bb0:	d140      	bne.n	8002c34 <_malloc_r+0xcc>
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	4631      	mov	r1, r6
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	eb04 0803 	add.w	r8, r4, r3
 8002bbc:	f000 f8ec 	bl	8002d98 <_sbrk_r>
 8002bc0:	4580      	cmp	r8, r0
 8002bc2:	d13a      	bne.n	8002c3a <_malloc_r+0xd2>
 8002bc4:	6821      	ldr	r1, [r4, #0]
 8002bc6:	3503      	adds	r5, #3
 8002bc8:	1a6d      	subs	r5, r5, r1
 8002bca:	f025 0503 	bic.w	r5, r5, #3
 8002bce:	3508      	adds	r5, #8
 8002bd0:	2d0c      	cmp	r5, #12
 8002bd2:	bf38      	it	cc
 8002bd4:	250c      	movcc	r5, #12
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f7ff ffa5 	bl	8002b28 <sbrk_aligned>
 8002bde:	3001      	adds	r0, #1
 8002be0:	d02b      	beq.n	8002c3a <_malloc_r+0xd2>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	442b      	add	r3, r5
 8002be6:	6023      	str	r3, [r4, #0]
 8002be8:	e00e      	b.n	8002c08 <_malloc_r+0xa0>
 8002bea:	6822      	ldr	r2, [r4, #0]
 8002bec:	1b52      	subs	r2, r2, r5
 8002bee:	d41e      	bmi.n	8002c2e <_malloc_r+0xc6>
 8002bf0:	2a0b      	cmp	r2, #11
 8002bf2:	d916      	bls.n	8002c22 <_malloc_r+0xba>
 8002bf4:	1961      	adds	r1, r4, r5
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	6025      	str	r5, [r4, #0]
 8002bfa:	bf18      	it	ne
 8002bfc:	6059      	strne	r1, [r3, #4]
 8002bfe:	6863      	ldr	r3, [r4, #4]
 8002c00:	bf08      	it	eq
 8002c02:	6031      	streq	r1, [r6, #0]
 8002c04:	5162      	str	r2, [r4, r5]
 8002c06:	604b      	str	r3, [r1, #4]
 8002c08:	4638      	mov	r0, r7
 8002c0a:	f104 060b 	add.w	r6, r4, #11
 8002c0e:	f000 fbb9 	bl	8003384 <__malloc_unlock>
 8002c12:	f026 0607 	bic.w	r6, r6, #7
 8002c16:	1d23      	adds	r3, r4, #4
 8002c18:	1af2      	subs	r2, r6, r3
 8002c1a:	d0b6      	beq.n	8002b8a <_malloc_r+0x22>
 8002c1c:	1b9b      	subs	r3, r3, r6
 8002c1e:	50a3      	str	r3, [r4, r2]
 8002c20:	e7b3      	b.n	8002b8a <_malloc_r+0x22>
 8002c22:	6862      	ldr	r2, [r4, #4]
 8002c24:	42a3      	cmp	r3, r4
 8002c26:	bf0c      	ite	eq
 8002c28:	6032      	streq	r2, [r6, #0]
 8002c2a:	605a      	strne	r2, [r3, #4]
 8002c2c:	e7ec      	b.n	8002c08 <_malloc_r+0xa0>
 8002c2e:	4623      	mov	r3, r4
 8002c30:	6864      	ldr	r4, [r4, #4]
 8002c32:	e7b2      	b.n	8002b9a <_malloc_r+0x32>
 8002c34:	4634      	mov	r4, r6
 8002c36:	6876      	ldr	r6, [r6, #4]
 8002c38:	e7b9      	b.n	8002bae <_malloc_r+0x46>
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4638      	mov	r0, r7
 8002c40:	f000 fba0 	bl	8003384 <__malloc_unlock>
 8002c44:	e7a1      	b.n	8002b8a <_malloc_r+0x22>
 8002c46:	6025      	str	r5, [r4, #0]
 8002c48:	e7de      	b.n	8002c08 <_malloc_r+0xa0>
 8002c4a:	bf00      	nop
 8002c4c:	2000011c 	.word	0x2000011c

08002c50 <iprintf>:
 8002c50:	b40f      	push	{r0, r1, r2, r3}
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <iprintf+0x2c>)
 8002c54:	b513      	push	{r0, r1, r4, lr}
 8002c56:	681c      	ldr	r4, [r3, #0]
 8002c58:	b124      	cbz	r4, 8002c64 <iprintf+0x14>
 8002c5a:	69a3      	ldr	r3, [r4, #24]
 8002c5c:	b913      	cbnz	r3, 8002c64 <iprintf+0x14>
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f000 fa84 	bl	800316c <__sinit>
 8002c64:	ab05      	add	r3, sp, #20
 8002c66:	9a04      	ldr	r2, [sp, #16]
 8002c68:	68a1      	ldr	r1, [r4, #8]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f000 fc05 	bl	800347c <_vfiprintf_r>
 8002c72:	b002      	add	sp, #8
 8002c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c78:	b004      	add	sp, #16
 8002c7a:	4770      	bx	lr
 8002c7c:	2000000c 	.word	0x2000000c

08002c80 <putchar>:
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <putchar+0x28>)
 8002c82:	b513      	push	{r0, r1, r4, lr}
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	4601      	mov	r1, r0
 8002c88:	b134      	cbz	r4, 8002c98 <putchar+0x18>
 8002c8a:	69a3      	ldr	r3, [r4, #24]
 8002c8c:	b923      	cbnz	r3, 8002c98 <putchar+0x18>
 8002c8e:	9001      	str	r0, [sp, #4]
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 fa6b 	bl	800316c <__sinit>
 8002c96:	9901      	ldr	r1, [sp, #4]
 8002c98:	68a2      	ldr	r2, [r4, #8]
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	b002      	add	sp, #8
 8002c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ca2:	f000 beaf 	b.w	8003a04 <_putc_r>
 8002ca6:	bf00      	nop
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <_puts_r>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	460e      	mov	r6, r1
 8002cb0:	4605      	mov	r5, r0
 8002cb2:	b118      	cbz	r0, 8002cbc <_puts_r+0x10>
 8002cb4:	6983      	ldr	r3, [r0, #24]
 8002cb6:	b90b      	cbnz	r3, 8002cbc <_puts_r+0x10>
 8002cb8:	f000 fa58 	bl	800316c <__sinit>
 8002cbc:	69ab      	ldr	r3, [r5, #24]
 8002cbe:	68ac      	ldr	r4, [r5, #8]
 8002cc0:	b913      	cbnz	r3, 8002cc8 <_puts_r+0x1c>
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f000 fa52 	bl	800316c <__sinit>
 8002cc8:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <_puts_r+0xd0>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	d120      	bne.n	8002d10 <_puts_r+0x64>
 8002cce:	686c      	ldr	r4, [r5, #4]
 8002cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cd2:	07db      	lsls	r3, r3, #31
 8002cd4:	d405      	bmi.n	8002ce2 <_puts_r+0x36>
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	0598      	lsls	r0, r3, #22
 8002cda:	d402      	bmi.n	8002ce2 <_puts_r+0x36>
 8002cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cde:	f000 fae3 	bl	80032a8 <__retarget_lock_acquire_recursive>
 8002ce2:	89a3      	ldrh	r3, [r4, #12]
 8002ce4:	0719      	lsls	r1, r3, #28
 8002ce6:	d51d      	bpl.n	8002d24 <_puts_r+0x78>
 8002ce8:	6923      	ldr	r3, [r4, #16]
 8002cea:	b1db      	cbz	r3, 8002d24 <_puts_r+0x78>
 8002cec:	3e01      	subs	r6, #1
 8002cee:	68a3      	ldr	r3, [r4, #8]
 8002cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60a3      	str	r3, [r4, #8]
 8002cf8:	bb39      	cbnz	r1, 8002d4a <_puts_r+0x9e>
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da38      	bge.n	8002d70 <_puts_r+0xc4>
 8002cfe:	4622      	mov	r2, r4
 8002d00:	210a      	movs	r1, #10
 8002d02:	4628      	mov	r0, r5
 8002d04:	f000 f858 	bl	8002db8 <__swbuf_r>
 8002d08:	3001      	adds	r0, #1
 8002d0a:	d011      	beq.n	8002d30 <_puts_r+0x84>
 8002d0c:	250a      	movs	r5, #10
 8002d0e:	e011      	b.n	8002d34 <_puts_r+0x88>
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <_puts_r+0xd4>)
 8002d12:	429c      	cmp	r4, r3
 8002d14:	d101      	bne.n	8002d1a <_puts_r+0x6e>
 8002d16:	68ac      	ldr	r4, [r5, #8]
 8002d18:	e7da      	b.n	8002cd0 <_puts_r+0x24>
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <_puts_r+0xd8>)
 8002d1c:	429c      	cmp	r4, r3
 8002d1e:	bf08      	it	eq
 8002d20:	68ec      	ldreq	r4, [r5, #12]
 8002d22:	e7d5      	b.n	8002cd0 <_puts_r+0x24>
 8002d24:	4621      	mov	r1, r4
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f898 	bl	8002e5c <__swsetup_r>
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	d0dd      	beq.n	8002cec <_puts_r+0x40>
 8002d30:	f04f 35ff 	mov.w	r5, #4294967295
 8002d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d36:	07da      	lsls	r2, r3, #31
 8002d38:	d405      	bmi.n	8002d46 <_puts_r+0x9a>
 8002d3a:	89a3      	ldrh	r3, [r4, #12]
 8002d3c:	059b      	lsls	r3, r3, #22
 8002d3e:	d402      	bmi.n	8002d46 <_puts_r+0x9a>
 8002d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d42:	f000 fab2 	bl	80032aa <__retarget_lock_release_recursive>
 8002d46:	4628      	mov	r0, r5
 8002d48:	bd70      	pop	{r4, r5, r6, pc}
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da04      	bge.n	8002d58 <_puts_r+0xac>
 8002d4e:	69a2      	ldr	r2, [r4, #24]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dc06      	bgt.n	8002d62 <_puts_r+0xb6>
 8002d54:	290a      	cmp	r1, #10
 8002d56:	d004      	beq.n	8002d62 <_puts_r+0xb6>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	6022      	str	r2, [r4, #0]
 8002d5e:	7019      	strb	r1, [r3, #0]
 8002d60:	e7c5      	b.n	8002cee <_puts_r+0x42>
 8002d62:	4622      	mov	r2, r4
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 f827 	bl	8002db8 <__swbuf_r>
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d1bf      	bne.n	8002cee <_puts_r+0x42>
 8002d6e:	e7df      	b.n	8002d30 <_puts_r+0x84>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	250a      	movs	r5, #10
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	6022      	str	r2, [r4, #0]
 8002d78:	701d      	strb	r5, [r3, #0]
 8002d7a:	e7db      	b.n	8002d34 <_puts_r+0x88>
 8002d7c:	08003e18 	.word	0x08003e18
 8002d80:	08003e38 	.word	0x08003e38
 8002d84:	08003df8 	.word	0x08003df8

08002d88 <puts>:
 8002d88:	4b02      	ldr	r3, [pc, #8]	; (8002d94 <puts+0xc>)
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f7ff bf8d 	b.w	8002cac <_puts_r>
 8002d92:	bf00      	nop
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <_sbrk_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4d06      	ldr	r5, [pc, #24]	; (8002db4 <_sbrk_r+0x1c>)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	f7fd ffcc 	bl	8000d40 <_sbrk>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d102      	bne.n	8002db2 <_sbrk_r+0x1a>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	b103      	cbz	r3, 8002db2 <_sbrk_r+0x1a>
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	bd38      	pop	{r3, r4, r5, pc}
 8002db4:	20000128 	.word	0x20000128

08002db8 <__swbuf_r>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	460e      	mov	r6, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	b118      	cbz	r0, 8002dca <__swbuf_r+0x12>
 8002dc2:	6983      	ldr	r3, [r0, #24]
 8002dc4:	b90b      	cbnz	r3, 8002dca <__swbuf_r+0x12>
 8002dc6:	f000 f9d1 	bl	800316c <__sinit>
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <__swbuf_r+0x98>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	d12b      	bne.n	8002e28 <__swbuf_r+0x70>
 8002dd0:	686c      	ldr	r4, [r5, #4]
 8002dd2:	69a3      	ldr	r3, [r4, #24]
 8002dd4:	60a3      	str	r3, [r4, #8]
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	071a      	lsls	r2, r3, #28
 8002dda:	d52f      	bpl.n	8002e3c <__swbuf_r+0x84>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	b36b      	cbz	r3, 8002e3c <__swbuf_r+0x84>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	1ac0      	subs	r0, r0, r3
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	b2f6      	uxtb	r6, r6
 8002dea:	4283      	cmp	r3, r0
 8002dec:	4637      	mov	r7, r6
 8002dee:	dc04      	bgt.n	8002dfa <__swbuf_r+0x42>
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f926 	bl	8003044 <_fflush_r>
 8002df8:	bb30      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002dfa:	68a3      	ldr	r3, [r4, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60a3      	str	r3, [r4, #8]
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	701e      	strb	r6, [r3, #0]
 8002e08:	6963      	ldr	r3, [r4, #20]
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	4283      	cmp	r3, r0
 8002e0e:	d004      	beq.n	8002e1a <__swbuf_r+0x62>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	07db      	lsls	r3, r3, #31
 8002e14:	d506      	bpl.n	8002e24 <__swbuf_r+0x6c>
 8002e16:	2e0a      	cmp	r6, #10
 8002e18:	d104      	bne.n	8002e24 <__swbuf_r+0x6c>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f911 	bl	8003044 <_fflush_r>
 8002e22:	b988      	cbnz	r0, 8002e48 <__swbuf_r+0x90>
 8002e24:	4638      	mov	r0, r7
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <__swbuf_r+0x9c>)
 8002e2a:	429c      	cmp	r4, r3
 8002e2c:	d101      	bne.n	8002e32 <__swbuf_r+0x7a>
 8002e2e:	68ac      	ldr	r4, [r5, #8]
 8002e30:	e7cf      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <__swbuf_r+0xa0>)
 8002e34:	429c      	cmp	r4, r3
 8002e36:	bf08      	it	eq
 8002e38:	68ec      	ldreq	r4, [r5, #12]
 8002e3a:	e7ca      	b.n	8002dd2 <__swbuf_r+0x1a>
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	f000 f80c 	bl	8002e5c <__swsetup_r>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d0cb      	beq.n	8002de0 <__swbuf_r+0x28>
 8002e48:	f04f 37ff 	mov.w	r7, #4294967295
 8002e4c:	e7ea      	b.n	8002e24 <__swbuf_r+0x6c>
 8002e4e:	bf00      	nop
 8002e50:	08003e18 	.word	0x08003e18
 8002e54:	08003e38 	.word	0x08003e38
 8002e58:	08003df8 	.word	0x08003df8

08002e5c <__swsetup_r>:
 8002e5c:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <__swsetup_r+0xcc>)
 8002e5e:	b570      	push	{r4, r5, r6, lr}
 8002e60:	681d      	ldr	r5, [r3, #0]
 8002e62:	4606      	mov	r6, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	b125      	cbz	r5, 8002e72 <__swsetup_r+0x16>
 8002e68:	69ab      	ldr	r3, [r5, #24]
 8002e6a:	b913      	cbnz	r3, 8002e72 <__swsetup_r+0x16>
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f000 f97d 	bl	800316c <__sinit>
 8002e72:	4b2e      	ldr	r3, [pc, #184]	; (8002f2c <__swsetup_r+0xd0>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d10f      	bne.n	8002e98 <__swsetup_r+0x3c>
 8002e78:	686c      	ldr	r4, [r5, #4]
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e80:	0719      	lsls	r1, r3, #28
 8002e82:	d42c      	bmi.n	8002ede <__swsetup_r+0x82>
 8002e84:	06dd      	lsls	r5, r3, #27
 8002e86:	d411      	bmi.n	8002eac <__swsetup_r+0x50>
 8002e88:	2309      	movs	r3, #9
 8002e8a:	6033      	str	r3, [r6, #0]
 8002e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	e03e      	b.n	8002f16 <__swsetup_r+0xba>
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <__swsetup_r+0xd4>)
 8002e9a:	429c      	cmp	r4, r3
 8002e9c:	d101      	bne.n	8002ea2 <__swsetup_r+0x46>
 8002e9e:	68ac      	ldr	r4, [r5, #8]
 8002ea0:	e7eb      	b.n	8002e7a <__swsetup_r+0x1e>
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <__swsetup_r+0xd8>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	bf08      	it	eq
 8002ea8:	68ec      	ldreq	r4, [r5, #12]
 8002eaa:	e7e6      	b.n	8002e7a <__swsetup_r+0x1e>
 8002eac:	0758      	lsls	r0, r3, #29
 8002eae:	d512      	bpl.n	8002ed6 <__swsetup_r+0x7a>
 8002eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002eb2:	b141      	cbz	r1, 8002ec6 <__swsetup_r+0x6a>
 8002eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002eb8:	4299      	cmp	r1, r3
 8002eba:	d002      	beq.n	8002ec2 <__swsetup_r+0x66>
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f000 fa67 	bl	8003390 <_free_r>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ec6:	89a3      	ldrh	r3, [r4, #12]
 8002ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ecc:	81a3      	strh	r3, [r4, #12]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6063      	str	r3, [r4, #4]
 8002ed2:	6923      	ldr	r3, [r4, #16]
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	f043 0308 	orr.w	r3, r3, #8
 8002edc:	81a3      	strh	r3, [r4, #12]
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	b94b      	cbnz	r3, 8002ef6 <__swsetup_r+0x9a>
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eec:	d003      	beq.n	8002ef6 <__swsetup_r+0x9a>
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f000 fa01 	bl	80032f8 <__smakebuf_r>
 8002ef6:	89a0      	ldrh	r0, [r4, #12]
 8002ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002efc:	f010 0301 	ands.w	r3, r0, #1
 8002f00:	d00a      	beq.n	8002f18 <__swsetup_r+0xbc>
 8002f02:	2300      	movs	r3, #0
 8002f04:	60a3      	str	r3, [r4, #8]
 8002f06:	6963      	ldr	r3, [r4, #20]
 8002f08:	425b      	negs	r3, r3
 8002f0a:	61a3      	str	r3, [r4, #24]
 8002f0c:	6923      	ldr	r3, [r4, #16]
 8002f0e:	b943      	cbnz	r3, 8002f22 <__swsetup_r+0xc6>
 8002f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f14:	d1ba      	bne.n	8002e8c <__swsetup_r+0x30>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	0781      	lsls	r1, r0, #30
 8002f1a:	bf58      	it	pl
 8002f1c:	6963      	ldrpl	r3, [r4, #20]
 8002f1e:	60a3      	str	r3, [r4, #8]
 8002f20:	e7f4      	b.n	8002f0c <__swsetup_r+0xb0>
 8002f22:	2000      	movs	r0, #0
 8002f24:	e7f7      	b.n	8002f16 <__swsetup_r+0xba>
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	08003e18 	.word	0x08003e18
 8002f30:	08003e38 	.word	0x08003e38
 8002f34:	08003df8 	.word	0x08003df8

08002f38 <__sflush_r>:
 8002f38:	898a      	ldrh	r2, [r1, #12]
 8002f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3e:	4605      	mov	r5, r0
 8002f40:	0710      	lsls	r0, r2, #28
 8002f42:	460c      	mov	r4, r1
 8002f44:	d458      	bmi.n	8002ff8 <__sflush_r+0xc0>
 8002f46:	684b      	ldr	r3, [r1, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	dc05      	bgt.n	8002f58 <__sflush_r+0x20>
 8002f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	dc02      	bgt.n	8002f58 <__sflush_r+0x20>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f5a:	2e00      	cmp	r6, #0
 8002f5c:	d0f9      	beq.n	8002f52 <__sflush_r+0x1a>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f64:	682f      	ldr	r7, [r5, #0]
 8002f66:	602b      	str	r3, [r5, #0]
 8002f68:	d032      	beq.n	8002fd0 <__sflush_r+0x98>
 8002f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	075a      	lsls	r2, r3, #29
 8002f70:	d505      	bpl.n	8002f7e <__sflush_r+0x46>
 8002f72:	6863      	ldr	r3, [r4, #4]
 8002f74:	1ac0      	subs	r0, r0, r3
 8002f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f78:	b10b      	cbz	r3, 8002f7e <__sflush_r+0x46>
 8002f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f7c:	1ac0      	subs	r0, r0, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4602      	mov	r2, r0
 8002f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f84:	6a21      	ldr	r1, [r4, #32]
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b0      	blx	r6
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	d106      	bne.n	8002f9e <__sflush_r+0x66>
 8002f90:	6829      	ldr	r1, [r5, #0]
 8002f92:	291d      	cmp	r1, #29
 8002f94:	d82c      	bhi.n	8002ff0 <__sflush_r+0xb8>
 8002f96:	4a2a      	ldr	r2, [pc, #168]	; (8003040 <__sflush_r+0x108>)
 8002f98:	40ca      	lsrs	r2, r1
 8002f9a:	07d6      	lsls	r6, r2, #31
 8002f9c:	d528      	bpl.n	8002ff0 <__sflush_r+0xb8>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	6062      	str	r2, [r4, #4]
 8002fa2:	04d9      	lsls	r1, r3, #19
 8002fa4:	6922      	ldr	r2, [r4, #16]
 8002fa6:	6022      	str	r2, [r4, #0]
 8002fa8:	d504      	bpl.n	8002fb4 <__sflush_r+0x7c>
 8002faa:	1c42      	adds	r2, r0, #1
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0x7a>
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	b903      	cbnz	r3, 8002fb4 <__sflush_r+0x7c>
 8002fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8002fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fb6:	602f      	str	r7, [r5, #0]
 8002fb8:	2900      	cmp	r1, #0
 8002fba:	d0ca      	beq.n	8002f52 <__sflush_r+0x1a>
 8002fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d002      	beq.n	8002fca <__sflush_r+0x92>
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 f9e3 	bl	8003390 <_free_r>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8002fce:	e7c1      	b.n	8002f54 <__sflush_r+0x1c>
 8002fd0:	6a21      	ldr	r1, [r4, #32]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b0      	blx	r6
 8002fd8:	1c41      	adds	r1, r0, #1
 8002fda:	d1c7      	bne.n	8002f6c <__sflush_r+0x34>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0c4      	beq.n	8002f6c <__sflush_r+0x34>
 8002fe2:	2b1d      	cmp	r3, #29
 8002fe4:	d001      	beq.n	8002fea <__sflush_r+0xb2>
 8002fe6:	2b16      	cmp	r3, #22
 8002fe8:	d101      	bne.n	8002fee <__sflush_r+0xb6>
 8002fea:	602f      	str	r7, [r5, #0]
 8002fec:	e7b1      	b.n	8002f52 <__sflush_r+0x1a>
 8002fee:	89a3      	ldrh	r3, [r4, #12]
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	e7ad      	b.n	8002f54 <__sflush_r+0x1c>
 8002ff8:	690f      	ldr	r7, [r1, #16]
 8002ffa:	2f00      	cmp	r7, #0
 8002ffc:	d0a9      	beq.n	8002f52 <__sflush_r+0x1a>
 8002ffe:	0793      	lsls	r3, r2, #30
 8003000:	680e      	ldr	r6, [r1, #0]
 8003002:	bf08      	it	eq
 8003004:	694b      	ldreq	r3, [r1, #20]
 8003006:	600f      	str	r7, [r1, #0]
 8003008:	bf18      	it	ne
 800300a:	2300      	movne	r3, #0
 800300c:	eba6 0807 	sub.w	r8, r6, r7
 8003010:	608b      	str	r3, [r1, #8]
 8003012:	f1b8 0f00 	cmp.w	r8, #0
 8003016:	dd9c      	ble.n	8002f52 <__sflush_r+0x1a>
 8003018:	6a21      	ldr	r1, [r4, #32]
 800301a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800301c:	4643      	mov	r3, r8
 800301e:	463a      	mov	r2, r7
 8003020:	4628      	mov	r0, r5
 8003022:	47b0      	blx	r6
 8003024:	2800      	cmp	r0, #0
 8003026:	dc06      	bgt.n	8003036 <__sflush_r+0xfe>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	e78e      	b.n	8002f54 <__sflush_r+0x1c>
 8003036:	4407      	add	r7, r0
 8003038:	eba8 0800 	sub.w	r8, r8, r0
 800303c:	e7e9      	b.n	8003012 <__sflush_r+0xda>
 800303e:	bf00      	nop
 8003040:	20400001 	.word	0x20400001

08003044 <_fflush_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	690b      	ldr	r3, [r1, #16]
 8003048:	4605      	mov	r5, r0
 800304a:	460c      	mov	r4, r1
 800304c:	b913      	cbnz	r3, 8003054 <_fflush_r+0x10>
 800304e:	2500      	movs	r5, #0
 8003050:	4628      	mov	r0, r5
 8003052:	bd38      	pop	{r3, r4, r5, pc}
 8003054:	b118      	cbz	r0, 800305e <_fflush_r+0x1a>
 8003056:	6983      	ldr	r3, [r0, #24]
 8003058:	b90b      	cbnz	r3, 800305e <_fflush_r+0x1a>
 800305a:	f000 f887 	bl	800316c <__sinit>
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <_fflush_r+0x6c>)
 8003060:	429c      	cmp	r4, r3
 8003062:	d11b      	bne.n	800309c <_fflush_r+0x58>
 8003064:	686c      	ldr	r4, [r5, #4]
 8003066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <_fflush_r+0xa>
 800306e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003070:	07d0      	lsls	r0, r2, #31
 8003072:	d404      	bmi.n	800307e <_fflush_r+0x3a>
 8003074:	0599      	lsls	r1, r3, #22
 8003076:	d402      	bmi.n	800307e <_fflush_r+0x3a>
 8003078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800307a:	f000 f915 	bl	80032a8 <__retarget_lock_acquire_recursive>
 800307e:	4628      	mov	r0, r5
 8003080:	4621      	mov	r1, r4
 8003082:	f7ff ff59 	bl	8002f38 <__sflush_r>
 8003086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003088:	07da      	lsls	r2, r3, #31
 800308a:	4605      	mov	r5, r0
 800308c:	d4e0      	bmi.n	8003050 <_fflush_r+0xc>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	059b      	lsls	r3, r3, #22
 8003092:	d4dd      	bmi.n	8003050 <_fflush_r+0xc>
 8003094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003096:	f000 f908 	bl	80032aa <__retarget_lock_release_recursive>
 800309a:	e7d9      	b.n	8003050 <_fflush_r+0xc>
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <_fflush_r+0x70>)
 800309e:	429c      	cmp	r4, r3
 80030a0:	d101      	bne.n	80030a6 <_fflush_r+0x62>
 80030a2:	68ac      	ldr	r4, [r5, #8]
 80030a4:	e7df      	b.n	8003066 <_fflush_r+0x22>
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <_fflush_r+0x74>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	bf08      	it	eq
 80030ac:	68ec      	ldreq	r4, [r5, #12]
 80030ae:	e7da      	b.n	8003066 <_fflush_r+0x22>
 80030b0:	08003e18 	.word	0x08003e18
 80030b4:	08003e38 	.word	0x08003e38
 80030b8:	08003df8 	.word	0x08003df8

080030bc <std>:
 80030bc:	2300      	movs	r3, #0
 80030be:	b510      	push	{r4, lr}
 80030c0:	4604      	mov	r4, r0
 80030c2:	e9c0 3300 	strd	r3, r3, [r0]
 80030c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ca:	6083      	str	r3, [r0, #8]
 80030cc:	8181      	strh	r1, [r0, #12]
 80030ce:	6643      	str	r3, [r0, #100]	; 0x64
 80030d0:	81c2      	strh	r2, [r0, #14]
 80030d2:	6183      	str	r3, [r0, #24]
 80030d4:	4619      	mov	r1, r3
 80030d6:	2208      	movs	r2, #8
 80030d8:	305c      	adds	r0, #92	; 0x5c
 80030da:	f7ff fd07 	bl	8002aec <memset>
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <std+0x38>)
 80030e0:	6263      	str	r3, [r4, #36]	; 0x24
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <std+0x3c>)
 80030e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <std+0x40>)
 80030e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <std+0x44>)
 80030ec:	6224      	str	r4, [r4, #32]
 80030ee:	6323      	str	r3, [r4, #48]	; 0x30
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	bf00      	nop
 80030f4:	08003a95 	.word	0x08003a95
 80030f8:	08003ab7 	.word	0x08003ab7
 80030fc:	08003aef 	.word	0x08003aef
 8003100:	08003b13 	.word	0x08003b13

08003104 <_cleanup_r>:
 8003104:	4901      	ldr	r1, [pc, #4]	; (800310c <_cleanup_r+0x8>)
 8003106:	f000 b8af 	b.w	8003268 <_fwalk_reent>
 800310a:	bf00      	nop
 800310c:	08003045 	.word	0x08003045

08003110 <__sfmoreglue>:
 8003110:	b570      	push	{r4, r5, r6, lr}
 8003112:	2268      	movs	r2, #104	; 0x68
 8003114:	1e4d      	subs	r5, r1, #1
 8003116:	4355      	muls	r5, r2
 8003118:	460e      	mov	r6, r1
 800311a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800311e:	f7ff fd23 	bl	8002b68 <_malloc_r>
 8003122:	4604      	mov	r4, r0
 8003124:	b140      	cbz	r0, 8003138 <__sfmoreglue+0x28>
 8003126:	2100      	movs	r1, #0
 8003128:	e9c0 1600 	strd	r1, r6, [r0]
 800312c:	300c      	adds	r0, #12
 800312e:	60a0      	str	r0, [r4, #8]
 8003130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003134:	f7ff fcda 	bl	8002aec <memset>
 8003138:	4620      	mov	r0, r4
 800313a:	bd70      	pop	{r4, r5, r6, pc}

0800313c <__sfp_lock_acquire>:
 800313c:	4801      	ldr	r0, [pc, #4]	; (8003144 <__sfp_lock_acquire+0x8>)
 800313e:	f000 b8b3 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 8003142:	bf00      	nop
 8003144:	20000125 	.word	0x20000125

08003148 <__sfp_lock_release>:
 8003148:	4801      	ldr	r0, [pc, #4]	; (8003150 <__sfp_lock_release+0x8>)
 800314a:	f000 b8ae 	b.w	80032aa <__retarget_lock_release_recursive>
 800314e:	bf00      	nop
 8003150:	20000125 	.word	0x20000125

08003154 <__sinit_lock_acquire>:
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <__sinit_lock_acquire+0x8>)
 8003156:	f000 b8a7 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 800315a:	bf00      	nop
 800315c:	20000126 	.word	0x20000126

08003160 <__sinit_lock_release>:
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <__sinit_lock_release+0x8>)
 8003162:	f000 b8a2 	b.w	80032aa <__retarget_lock_release_recursive>
 8003166:	bf00      	nop
 8003168:	20000126 	.word	0x20000126

0800316c <__sinit>:
 800316c:	b510      	push	{r4, lr}
 800316e:	4604      	mov	r4, r0
 8003170:	f7ff fff0 	bl	8003154 <__sinit_lock_acquire>
 8003174:	69a3      	ldr	r3, [r4, #24]
 8003176:	b11b      	cbz	r3, 8003180 <__sinit+0x14>
 8003178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800317c:	f7ff bff0 	b.w	8003160 <__sinit_lock_release>
 8003180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003184:	6523      	str	r3, [r4, #80]	; 0x50
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <__sinit+0x68>)
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <__sinit+0x6c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	62a2      	str	r2, [r4, #40]	; 0x28
 800318e:	42a3      	cmp	r3, r4
 8003190:	bf04      	itt	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	61a3      	streq	r3, [r4, #24]
 8003196:	4620      	mov	r0, r4
 8003198:	f000 f820 	bl	80031dc <__sfp>
 800319c:	6060      	str	r0, [r4, #4]
 800319e:	4620      	mov	r0, r4
 80031a0:	f000 f81c 	bl	80031dc <__sfp>
 80031a4:	60a0      	str	r0, [r4, #8]
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 f818 	bl	80031dc <__sfp>
 80031ac:	2200      	movs	r2, #0
 80031ae:	60e0      	str	r0, [r4, #12]
 80031b0:	2104      	movs	r1, #4
 80031b2:	6860      	ldr	r0, [r4, #4]
 80031b4:	f7ff ff82 	bl	80030bc <std>
 80031b8:	68a0      	ldr	r0, [r4, #8]
 80031ba:	2201      	movs	r2, #1
 80031bc:	2109      	movs	r1, #9
 80031be:	f7ff ff7d 	bl	80030bc <std>
 80031c2:	68e0      	ldr	r0, [r4, #12]
 80031c4:	2202      	movs	r2, #2
 80031c6:	2112      	movs	r1, #18
 80031c8:	f7ff ff78 	bl	80030bc <std>
 80031cc:	2301      	movs	r3, #1
 80031ce:	61a3      	str	r3, [r4, #24]
 80031d0:	e7d2      	b.n	8003178 <__sinit+0xc>
 80031d2:	bf00      	nop
 80031d4:	08003df4 	.word	0x08003df4
 80031d8:	08003105 	.word	0x08003105

080031dc <__sfp>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	4607      	mov	r7, r0
 80031e0:	f7ff ffac 	bl	800313c <__sfp_lock_acquire>
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <__sfp+0x84>)
 80031e6:	681e      	ldr	r6, [r3, #0]
 80031e8:	69b3      	ldr	r3, [r6, #24]
 80031ea:	b913      	cbnz	r3, 80031f2 <__sfp+0x16>
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7ff ffbd 	bl	800316c <__sinit>
 80031f2:	3648      	adds	r6, #72	; 0x48
 80031f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	d503      	bpl.n	8003204 <__sfp+0x28>
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	b30b      	cbz	r3, 8003244 <__sfp+0x68>
 8003200:	6836      	ldr	r6, [r6, #0]
 8003202:	e7f7      	b.n	80031f4 <__sfp+0x18>
 8003204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003208:	b9d5      	cbnz	r5, 8003240 <__sfp+0x64>
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <__sfp+0x88>)
 800320c:	60e3      	str	r3, [r4, #12]
 800320e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003212:	6665      	str	r5, [r4, #100]	; 0x64
 8003214:	f000 f847 	bl	80032a6 <__retarget_lock_init_recursive>
 8003218:	f7ff ff96 	bl	8003148 <__sfp_lock_release>
 800321c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003224:	6025      	str	r5, [r4, #0]
 8003226:	61a5      	str	r5, [r4, #24]
 8003228:	2208      	movs	r2, #8
 800322a:	4629      	mov	r1, r5
 800322c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003230:	f7ff fc5c 	bl	8002aec <memset>
 8003234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800323c:	4620      	mov	r0, r4
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	3468      	adds	r4, #104	; 0x68
 8003242:	e7d9      	b.n	80031f8 <__sfp+0x1c>
 8003244:	2104      	movs	r1, #4
 8003246:	4638      	mov	r0, r7
 8003248:	f7ff ff62 	bl	8003110 <__sfmoreglue>
 800324c:	4604      	mov	r4, r0
 800324e:	6030      	str	r0, [r6, #0]
 8003250:	2800      	cmp	r0, #0
 8003252:	d1d5      	bne.n	8003200 <__sfp+0x24>
 8003254:	f7ff ff78 	bl	8003148 <__sfp_lock_release>
 8003258:	230c      	movs	r3, #12
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	e7ee      	b.n	800323c <__sfp+0x60>
 800325e:	bf00      	nop
 8003260:	08003df4 	.word	0x08003df4
 8003264:	ffff0001 	.word	0xffff0001

08003268 <_fwalk_reent>:
 8003268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800326c:	4606      	mov	r6, r0
 800326e:	4688      	mov	r8, r1
 8003270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003274:	2700      	movs	r7, #0
 8003276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800327a:	f1b9 0901 	subs.w	r9, r9, #1
 800327e:	d505      	bpl.n	800328c <_fwalk_reent+0x24>
 8003280:	6824      	ldr	r4, [r4, #0]
 8003282:	2c00      	cmp	r4, #0
 8003284:	d1f7      	bne.n	8003276 <_fwalk_reent+0xe>
 8003286:	4638      	mov	r0, r7
 8003288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800328c:	89ab      	ldrh	r3, [r5, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d907      	bls.n	80032a2 <_fwalk_reent+0x3a>
 8003292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003296:	3301      	adds	r3, #1
 8003298:	d003      	beq.n	80032a2 <_fwalk_reent+0x3a>
 800329a:	4629      	mov	r1, r5
 800329c:	4630      	mov	r0, r6
 800329e:	47c0      	blx	r8
 80032a0:	4307      	orrs	r7, r0
 80032a2:	3568      	adds	r5, #104	; 0x68
 80032a4:	e7e9      	b.n	800327a <_fwalk_reent+0x12>

080032a6 <__retarget_lock_init_recursive>:
 80032a6:	4770      	bx	lr

080032a8 <__retarget_lock_acquire_recursive>:
 80032a8:	4770      	bx	lr

080032aa <__retarget_lock_release_recursive>:
 80032aa:	4770      	bx	lr

080032ac <__swhatbuf_r>:
 80032ac:	b570      	push	{r4, r5, r6, lr}
 80032ae:	460e      	mov	r6, r1
 80032b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b4:	2900      	cmp	r1, #0
 80032b6:	b096      	sub	sp, #88	; 0x58
 80032b8:	4614      	mov	r4, r2
 80032ba:	461d      	mov	r5, r3
 80032bc:	da08      	bge.n	80032d0 <__swhatbuf_r+0x24>
 80032be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	602a      	str	r2, [r5, #0]
 80032c6:	061a      	lsls	r2, r3, #24
 80032c8:	d410      	bmi.n	80032ec <__swhatbuf_r+0x40>
 80032ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ce:	e00e      	b.n	80032ee <__swhatbuf_r+0x42>
 80032d0:	466a      	mov	r2, sp
 80032d2:	f000 fc45 	bl	8003b60 <_fstat_r>
 80032d6:	2800      	cmp	r0, #0
 80032d8:	dbf1      	blt.n	80032be <__swhatbuf_r+0x12>
 80032da:	9a01      	ldr	r2, [sp, #4]
 80032dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032e4:	425a      	negs	r2, r3
 80032e6:	415a      	adcs	r2, r3
 80032e8:	602a      	str	r2, [r5, #0]
 80032ea:	e7ee      	b.n	80032ca <__swhatbuf_r+0x1e>
 80032ec:	2340      	movs	r3, #64	; 0x40
 80032ee:	2000      	movs	r0, #0
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	b016      	add	sp, #88	; 0x58
 80032f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080032f8 <__smakebuf_r>:
 80032f8:	898b      	ldrh	r3, [r1, #12]
 80032fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032fc:	079d      	lsls	r5, r3, #30
 80032fe:	4606      	mov	r6, r0
 8003300:	460c      	mov	r4, r1
 8003302:	d507      	bpl.n	8003314 <__smakebuf_r+0x1c>
 8003304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	2301      	movs	r3, #1
 800330e:	6163      	str	r3, [r4, #20]
 8003310:	b002      	add	sp, #8
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	ab01      	add	r3, sp, #4
 8003316:	466a      	mov	r2, sp
 8003318:	f7ff ffc8 	bl	80032ac <__swhatbuf_r>
 800331c:	9900      	ldr	r1, [sp, #0]
 800331e:	4605      	mov	r5, r0
 8003320:	4630      	mov	r0, r6
 8003322:	f7ff fc21 	bl	8002b68 <_malloc_r>
 8003326:	b948      	cbnz	r0, 800333c <__smakebuf_r+0x44>
 8003328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800332c:	059a      	lsls	r2, r3, #22
 800332e:	d4ef      	bmi.n	8003310 <__smakebuf_r+0x18>
 8003330:	f023 0303 	bic.w	r3, r3, #3
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	81a3      	strh	r3, [r4, #12]
 800333a:	e7e3      	b.n	8003304 <__smakebuf_r+0xc>
 800333c:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <__smakebuf_r+0x7c>)
 800333e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	6020      	str	r0, [r4, #0]
 8003344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	9b00      	ldr	r3, [sp, #0]
 800334c:	6163      	str	r3, [r4, #20]
 800334e:	9b01      	ldr	r3, [sp, #4]
 8003350:	6120      	str	r0, [r4, #16]
 8003352:	b15b      	cbz	r3, 800336c <__smakebuf_r+0x74>
 8003354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003358:	4630      	mov	r0, r6
 800335a:	f000 fc13 	bl	8003b84 <_isatty_r>
 800335e:	b128      	cbz	r0, 800336c <__smakebuf_r+0x74>
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	f023 0303 	bic.w	r3, r3, #3
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	89a0      	ldrh	r0, [r4, #12]
 800336e:	4305      	orrs	r5, r0
 8003370:	81a5      	strh	r5, [r4, #12]
 8003372:	e7cd      	b.n	8003310 <__smakebuf_r+0x18>
 8003374:	08003105 	.word	0x08003105

08003378 <__malloc_lock>:
 8003378:	4801      	ldr	r0, [pc, #4]	; (8003380 <__malloc_lock+0x8>)
 800337a:	f7ff bf95 	b.w	80032a8 <__retarget_lock_acquire_recursive>
 800337e:	bf00      	nop
 8003380:	20000124 	.word	0x20000124

08003384 <__malloc_unlock>:
 8003384:	4801      	ldr	r0, [pc, #4]	; (800338c <__malloc_unlock+0x8>)
 8003386:	f7ff bf90 	b.w	80032aa <__retarget_lock_release_recursive>
 800338a:	bf00      	nop
 800338c:	20000124 	.word	0x20000124

08003390 <_free_r>:
 8003390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003392:	2900      	cmp	r1, #0
 8003394:	d044      	beq.n	8003420 <_free_r+0x90>
 8003396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339a:	9001      	str	r0, [sp, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f1a1 0404 	sub.w	r4, r1, #4
 80033a2:	bfb8      	it	lt
 80033a4:	18e4      	addlt	r4, r4, r3
 80033a6:	f7ff ffe7 	bl	8003378 <__malloc_lock>
 80033aa:	4a1e      	ldr	r2, [pc, #120]	; (8003424 <_free_r+0x94>)
 80033ac:	9801      	ldr	r0, [sp, #4]
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	b933      	cbnz	r3, 80033c0 <_free_r+0x30>
 80033b2:	6063      	str	r3, [r4, #4]
 80033b4:	6014      	str	r4, [r2, #0]
 80033b6:	b003      	add	sp, #12
 80033b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033bc:	f7ff bfe2 	b.w	8003384 <__malloc_unlock>
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d908      	bls.n	80033d6 <_free_r+0x46>
 80033c4:	6825      	ldr	r5, [r4, #0]
 80033c6:	1961      	adds	r1, r4, r5
 80033c8:	428b      	cmp	r3, r1
 80033ca:	bf01      	itttt	eq
 80033cc:	6819      	ldreq	r1, [r3, #0]
 80033ce:	685b      	ldreq	r3, [r3, #4]
 80033d0:	1949      	addeq	r1, r1, r5
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	e7ed      	b.n	80033b2 <_free_r+0x22>
 80033d6:	461a      	mov	r2, r3
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	b10b      	cbz	r3, 80033e0 <_free_r+0x50>
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d9fa      	bls.n	80033d6 <_free_r+0x46>
 80033e0:	6811      	ldr	r1, [r2, #0]
 80033e2:	1855      	adds	r5, r2, r1
 80033e4:	42a5      	cmp	r5, r4
 80033e6:	d10b      	bne.n	8003400 <_free_r+0x70>
 80033e8:	6824      	ldr	r4, [r4, #0]
 80033ea:	4421      	add	r1, r4
 80033ec:	1854      	adds	r4, r2, r1
 80033ee:	42a3      	cmp	r3, r4
 80033f0:	6011      	str	r1, [r2, #0]
 80033f2:	d1e0      	bne.n	80033b6 <_free_r+0x26>
 80033f4:	681c      	ldr	r4, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	6053      	str	r3, [r2, #4]
 80033fa:	4421      	add	r1, r4
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	e7da      	b.n	80033b6 <_free_r+0x26>
 8003400:	d902      	bls.n	8003408 <_free_r+0x78>
 8003402:	230c      	movs	r3, #12
 8003404:	6003      	str	r3, [r0, #0]
 8003406:	e7d6      	b.n	80033b6 <_free_r+0x26>
 8003408:	6825      	ldr	r5, [r4, #0]
 800340a:	1961      	adds	r1, r4, r5
 800340c:	428b      	cmp	r3, r1
 800340e:	bf04      	itt	eq
 8003410:	6819      	ldreq	r1, [r3, #0]
 8003412:	685b      	ldreq	r3, [r3, #4]
 8003414:	6063      	str	r3, [r4, #4]
 8003416:	bf04      	itt	eq
 8003418:	1949      	addeq	r1, r1, r5
 800341a:	6021      	streq	r1, [r4, #0]
 800341c:	6054      	str	r4, [r2, #4]
 800341e:	e7ca      	b.n	80033b6 <_free_r+0x26>
 8003420:	b003      	add	sp, #12
 8003422:	bd30      	pop	{r4, r5, pc}
 8003424:	2000011c 	.word	0x2000011c

08003428 <__sfputc_r>:
 8003428:	6893      	ldr	r3, [r2, #8]
 800342a:	3b01      	subs	r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	b410      	push	{r4}
 8003430:	6093      	str	r3, [r2, #8]
 8003432:	da08      	bge.n	8003446 <__sfputc_r+0x1e>
 8003434:	6994      	ldr	r4, [r2, #24]
 8003436:	42a3      	cmp	r3, r4
 8003438:	db01      	blt.n	800343e <__sfputc_r+0x16>
 800343a:	290a      	cmp	r1, #10
 800343c:	d103      	bne.n	8003446 <__sfputc_r+0x1e>
 800343e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003442:	f7ff bcb9 	b.w	8002db8 <__swbuf_r>
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	1c58      	adds	r0, r3, #1
 800344a:	6010      	str	r0, [r2, #0]
 800344c:	7019      	strb	r1, [r3, #0]
 800344e:	4608      	mov	r0, r1
 8003450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003454:	4770      	bx	lr

08003456 <__sfputs_r>:
 8003456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003458:	4606      	mov	r6, r0
 800345a:	460f      	mov	r7, r1
 800345c:	4614      	mov	r4, r2
 800345e:	18d5      	adds	r5, r2, r3
 8003460:	42ac      	cmp	r4, r5
 8003462:	d101      	bne.n	8003468 <__sfputs_r+0x12>
 8003464:	2000      	movs	r0, #0
 8003466:	e007      	b.n	8003478 <__sfputs_r+0x22>
 8003468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800346c:	463a      	mov	r2, r7
 800346e:	4630      	mov	r0, r6
 8003470:	f7ff ffda 	bl	8003428 <__sfputc_r>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d1f3      	bne.n	8003460 <__sfputs_r+0xa>
 8003478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800347c <_vfiprintf_r>:
 800347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003480:	460d      	mov	r5, r1
 8003482:	b09d      	sub	sp, #116	; 0x74
 8003484:	4614      	mov	r4, r2
 8003486:	4698      	mov	r8, r3
 8003488:	4606      	mov	r6, r0
 800348a:	b118      	cbz	r0, 8003494 <_vfiprintf_r+0x18>
 800348c:	6983      	ldr	r3, [r0, #24]
 800348e:	b90b      	cbnz	r3, 8003494 <_vfiprintf_r+0x18>
 8003490:	f7ff fe6c 	bl	800316c <__sinit>
 8003494:	4b89      	ldr	r3, [pc, #548]	; (80036bc <_vfiprintf_r+0x240>)
 8003496:	429d      	cmp	r5, r3
 8003498:	d11b      	bne.n	80034d2 <_vfiprintf_r+0x56>
 800349a:	6875      	ldr	r5, [r6, #4]
 800349c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_vfiprintf_r+0x32>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_vfiprintf_r+0x32>
 80034a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034aa:	f7ff fefd 	bl	80032a8 <__retarget_lock_acquire_recursive>
 80034ae:	89ab      	ldrh	r3, [r5, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	d501      	bpl.n	80034b8 <_vfiprintf_r+0x3c>
 80034b4:	692b      	ldr	r3, [r5, #16]
 80034b6:	b9eb      	cbnz	r3, 80034f4 <_vfiprintf_r+0x78>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	f7ff fcce 	bl	8002e5c <__swsetup_r>
 80034c0:	b1c0      	cbz	r0, 80034f4 <_vfiprintf_r+0x78>
 80034c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034c4:	07dc      	lsls	r4, r3, #31
 80034c6:	d50e      	bpl.n	80034e6 <_vfiprintf_r+0x6a>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	b01d      	add	sp, #116	; 0x74
 80034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <_vfiprintf_r+0x244>)
 80034d4:	429d      	cmp	r5, r3
 80034d6:	d101      	bne.n	80034dc <_vfiprintf_r+0x60>
 80034d8:	68b5      	ldr	r5, [r6, #8]
 80034da:	e7df      	b.n	800349c <_vfiprintf_r+0x20>
 80034dc:	4b79      	ldr	r3, [pc, #484]	; (80036c4 <_vfiprintf_r+0x248>)
 80034de:	429d      	cmp	r5, r3
 80034e0:	bf08      	it	eq
 80034e2:	68f5      	ldreq	r5, [r6, #12]
 80034e4:	e7da      	b.n	800349c <_vfiprintf_r+0x20>
 80034e6:	89ab      	ldrh	r3, [r5, #12]
 80034e8:	0598      	lsls	r0, r3, #22
 80034ea:	d4ed      	bmi.n	80034c8 <_vfiprintf_r+0x4c>
 80034ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034ee:	f7ff fedc 	bl	80032aa <__retarget_lock_release_recursive>
 80034f2:	e7e9      	b.n	80034c8 <_vfiprintf_r+0x4c>
 80034f4:	2300      	movs	r3, #0
 80034f6:	9309      	str	r3, [sp, #36]	; 0x24
 80034f8:	2320      	movs	r3, #32
 80034fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003502:	2330      	movs	r3, #48	; 0x30
 8003504:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80036c8 <_vfiprintf_r+0x24c>
 8003508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800350c:	f04f 0901 	mov.w	r9, #1
 8003510:	4623      	mov	r3, r4
 8003512:	469a      	mov	sl, r3
 8003514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003518:	b10a      	cbz	r2, 800351e <_vfiprintf_r+0xa2>
 800351a:	2a25      	cmp	r2, #37	; 0x25
 800351c:	d1f9      	bne.n	8003512 <_vfiprintf_r+0x96>
 800351e:	ebba 0b04 	subs.w	fp, sl, r4
 8003522:	d00b      	beq.n	800353c <_vfiprintf_r+0xc0>
 8003524:	465b      	mov	r3, fp
 8003526:	4622      	mov	r2, r4
 8003528:	4629      	mov	r1, r5
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff ff93 	bl	8003456 <__sfputs_r>
 8003530:	3001      	adds	r0, #1
 8003532:	f000 80aa 	beq.w	800368a <_vfiprintf_r+0x20e>
 8003536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003538:	445a      	add	r2, fp
 800353a:	9209      	str	r2, [sp, #36]	; 0x24
 800353c:	f89a 3000 	ldrb.w	r3, [sl]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a2 	beq.w	800368a <_vfiprintf_r+0x20e>
 8003546:	2300      	movs	r3, #0
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003550:	f10a 0a01 	add.w	sl, sl, #1
 8003554:	9304      	str	r3, [sp, #16]
 8003556:	9307      	str	r3, [sp, #28]
 8003558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800355c:	931a      	str	r3, [sp, #104]	; 0x68
 800355e:	4654      	mov	r4, sl
 8003560:	2205      	movs	r2, #5
 8003562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003566:	4858      	ldr	r0, [pc, #352]	; (80036c8 <_vfiprintf_r+0x24c>)
 8003568:	f7fc fe52 	bl	8000210 <memchr>
 800356c:	9a04      	ldr	r2, [sp, #16]
 800356e:	b9d8      	cbnz	r0, 80035a8 <_vfiprintf_r+0x12c>
 8003570:	06d1      	lsls	r1, r2, #27
 8003572:	bf44      	itt	mi
 8003574:	2320      	movmi	r3, #32
 8003576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800357a:	0713      	lsls	r3, r2, #28
 800357c:	bf44      	itt	mi
 800357e:	232b      	movmi	r3, #43	; 0x2b
 8003580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003584:	f89a 3000 	ldrb.w	r3, [sl]
 8003588:	2b2a      	cmp	r3, #42	; 0x2a
 800358a:	d015      	beq.n	80035b8 <_vfiprintf_r+0x13c>
 800358c:	9a07      	ldr	r2, [sp, #28]
 800358e:	4654      	mov	r4, sl
 8003590:	2000      	movs	r0, #0
 8003592:	f04f 0c0a 	mov.w	ip, #10
 8003596:	4621      	mov	r1, r4
 8003598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800359c:	3b30      	subs	r3, #48	; 0x30
 800359e:	2b09      	cmp	r3, #9
 80035a0:	d94e      	bls.n	8003640 <_vfiprintf_r+0x1c4>
 80035a2:	b1b0      	cbz	r0, 80035d2 <_vfiprintf_r+0x156>
 80035a4:	9207      	str	r2, [sp, #28]
 80035a6:	e014      	b.n	80035d2 <_vfiprintf_r+0x156>
 80035a8:	eba0 0308 	sub.w	r3, r0, r8
 80035ac:	fa09 f303 	lsl.w	r3, r9, r3
 80035b0:	4313      	orrs	r3, r2
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	46a2      	mov	sl, r4
 80035b6:	e7d2      	b.n	800355e <_vfiprintf_r+0xe2>
 80035b8:	9b03      	ldr	r3, [sp, #12]
 80035ba:	1d19      	adds	r1, r3, #4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	9103      	str	r1, [sp, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bfbb      	ittet	lt
 80035c4:	425b      	neglt	r3, r3
 80035c6:	f042 0202 	orrlt.w	r2, r2, #2
 80035ca:	9307      	strge	r3, [sp, #28]
 80035cc:	9307      	strlt	r3, [sp, #28]
 80035ce:	bfb8      	it	lt
 80035d0:	9204      	strlt	r2, [sp, #16]
 80035d2:	7823      	ldrb	r3, [r4, #0]
 80035d4:	2b2e      	cmp	r3, #46	; 0x2e
 80035d6:	d10c      	bne.n	80035f2 <_vfiprintf_r+0x176>
 80035d8:	7863      	ldrb	r3, [r4, #1]
 80035da:	2b2a      	cmp	r3, #42	; 0x2a
 80035dc:	d135      	bne.n	800364a <_vfiprintf_r+0x1ce>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	1d1a      	adds	r2, r3, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	9203      	str	r2, [sp, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bfb8      	it	lt
 80035ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80035ee:	3402      	adds	r4, #2
 80035f0:	9305      	str	r3, [sp, #20]
 80035f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80036d8 <_vfiprintf_r+0x25c>
 80035f6:	7821      	ldrb	r1, [r4, #0]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7fc fe08 	bl	8000210 <memchr>
 8003600:	b140      	cbz	r0, 8003614 <_vfiprintf_r+0x198>
 8003602:	2340      	movs	r3, #64	; 0x40
 8003604:	eba0 000a 	sub.w	r0, r0, sl
 8003608:	fa03 f000 	lsl.w	r0, r3, r0
 800360c:	9b04      	ldr	r3, [sp, #16]
 800360e:	4303      	orrs	r3, r0
 8003610:	3401      	adds	r4, #1
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	482c      	ldr	r0, [pc, #176]	; (80036cc <_vfiprintf_r+0x250>)
 800361a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800361e:	2206      	movs	r2, #6
 8003620:	f7fc fdf6 	bl	8000210 <memchr>
 8003624:	2800      	cmp	r0, #0
 8003626:	d03f      	beq.n	80036a8 <_vfiprintf_r+0x22c>
 8003628:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <_vfiprintf_r+0x254>)
 800362a:	bb1b      	cbnz	r3, 8003674 <_vfiprintf_r+0x1f8>
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	3307      	adds	r3, #7
 8003630:	f023 0307 	bic.w	r3, r3, #7
 8003634:	3308      	adds	r3, #8
 8003636:	9303      	str	r3, [sp, #12]
 8003638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800363a:	443b      	add	r3, r7
 800363c:	9309      	str	r3, [sp, #36]	; 0x24
 800363e:	e767      	b.n	8003510 <_vfiprintf_r+0x94>
 8003640:	fb0c 3202 	mla	r2, ip, r2, r3
 8003644:	460c      	mov	r4, r1
 8003646:	2001      	movs	r0, #1
 8003648:	e7a5      	b.n	8003596 <_vfiprintf_r+0x11a>
 800364a:	2300      	movs	r3, #0
 800364c:	3401      	adds	r4, #1
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	4619      	mov	r1, r3
 8003652:	f04f 0c0a 	mov.w	ip, #10
 8003656:	4620      	mov	r0, r4
 8003658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800365c:	3a30      	subs	r2, #48	; 0x30
 800365e:	2a09      	cmp	r2, #9
 8003660:	d903      	bls.n	800366a <_vfiprintf_r+0x1ee>
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0c5      	beq.n	80035f2 <_vfiprintf_r+0x176>
 8003666:	9105      	str	r1, [sp, #20]
 8003668:	e7c3      	b.n	80035f2 <_vfiprintf_r+0x176>
 800366a:	fb0c 2101 	mla	r1, ip, r1, r2
 800366e:	4604      	mov	r4, r0
 8003670:	2301      	movs	r3, #1
 8003672:	e7f0      	b.n	8003656 <_vfiprintf_r+0x1da>
 8003674:	ab03      	add	r3, sp, #12
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	462a      	mov	r2, r5
 800367a:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <_vfiprintf_r+0x258>)
 800367c:	a904      	add	r1, sp, #16
 800367e:	4630      	mov	r0, r6
 8003680:	f3af 8000 	nop.w
 8003684:	4607      	mov	r7, r0
 8003686:	1c78      	adds	r0, r7, #1
 8003688:	d1d6      	bne.n	8003638 <_vfiprintf_r+0x1bc>
 800368a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800368c:	07d9      	lsls	r1, r3, #31
 800368e:	d405      	bmi.n	800369c <_vfiprintf_r+0x220>
 8003690:	89ab      	ldrh	r3, [r5, #12]
 8003692:	059a      	lsls	r2, r3, #22
 8003694:	d402      	bmi.n	800369c <_vfiprintf_r+0x220>
 8003696:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003698:	f7ff fe07 	bl	80032aa <__retarget_lock_release_recursive>
 800369c:	89ab      	ldrh	r3, [r5, #12]
 800369e:	065b      	lsls	r3, r3, #25
 80036a0:	f53f af12 	bmi.w	80034c8 <_vfiprintf_r+0x4c>
 80036a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036a6:	e711      	b.n	80034cc <_vfiprintf_r+0x50>
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <_vfiprintf_r+0x258>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	4630      	mov	r0, r6
 80036b4:	f000 f880 	bl	80037b8 <_printf_i>
 80036b8:	e7e4      	b.n	8003684 <_vfiprintf_r+0x208>
 80036ba:	bf00      	nop
 80036bc:	08003e18 	.word	0x08003e18
 80036c0:	08003e38 	.word	0x08003e38
 80036c4:	08003df8 	.word	0x08003df8
 80036c8:	08003e58 	.word	0x08003e58
 80036cc:	08003e62 	.word	0x08003e62
 80036d0:	00000000 	.word	0x00000000
 80036d4:	08003457 	.word	0x08003457
 80036d8:	08003e5e 	.word	0x08003e5e

080036dc <_printf_common>:
 80036dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e0:	4616      	mov	r6, r2
 80036e2:	4699      	mov	r9, r3
 80036e4:	688a      	ldr	r2, [r1, #8]
 80036e6:	690b      	ldr	r3, [r1, #16]
 80036e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bfb8      	it	lt
 80036f0:	4613      	movlt	r3, r2
 80036f2:	6033      	str	r3, [r6, #0]
 80036f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036f8:	4607      	mov	r7, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	b10a      	cbz	r2, 8003702 <_printf_common+0x26>
 80036fe:	3301      	adds	r3, #1
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	0699      	lsls	r1, r3, #26
 8003706:	bf42      	ittt	mi
 8003708:	6833      	ldrmi	r3, [r6, #0]
 800370a:	3302      	addmi	r3, #2
 800370c:	6033      	strmi	r3, [r6, #0]
 800370e:	6825      	ldr	r5, [r4, #0]
 8003710:	f015 0506 	ands.w	r5, r5, #6
 8003714:	d106      	bne.n	8003724 <_printf_common+0x48>
 8003716:	f104 0a19 	add.w	sl, r4, #25
 800371a:	68e3      	ldr	r3, [r4, #12]
 800371c:	6832      	ldr	r2, [r6, #0]
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	42ab      	cmp	r3, r5
 8003722:	dc26      	bgt.n	8003772 <_printf_common+0x96>
 8003724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003728:	1e13      	subs	r3, r2, #0
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	bf18      	it	ne
 800372e:	2301      	movne	r3, #1
 8003730:	0692      	lsls	r2, r2, #26
 8003732:	d42b      	bmi.n	800378c <_printf_common+0xb0>
 8003734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003738:	4649      	mov	r1, r9
 800373a:	4638      	mov	r0, r7
 800373c:	47c0      	blx	r8
 800373e:	3001      	adds	r0, #1
 8003740:	d01e      	beq.n	8003780 <_printf_common+0xa4>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	68e5      	ldr	r5, [r4, #12]
 8003746:	6832      	ldr	r2, [r6, #0]
 8003748:	f003 0306 	and.w	r3, r3, #6
 800374c:	2b04      	cmp	r3, #4
 800374e:	bf08      	it	eq
 8003750:	1aad      	subeq	r5, r5, r2
 8003752:	68a3      	ldr	r3, [r4, #8]
 8003754:	6922      	ldr	r2, [r4, #16]
 8003756:	bf0c      	ite	eq
 8003758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800375c:	2500      	movne	r5, #0
 800375e:	4293      	cmp	r3, r2
 8003760:	bfc4      	itt	gt
 8003762:	1a9b      	subgt	r3, r3, r2
 8003764:	18ed      	addgt	r5, r5, r3
 8003766:	2600      	movs	r6, #0
 8003768:	341a      	adds	r4, #26
 800376a:	42b5      	cmp	r5, r6
 800376c:	d11a      	bne.n	80037a4 <_printf_common+0xc8>
 800376e:	2000      	movs	r0, #0
 8003770:	e008      	b.n	8003784 <_printf_common+0xa8>
 8003772:	2301      	movs	r3, #1
 8003774:	4652      	mov	r2, sl
 8003776:	4649      	mov	r1, r9
 8003778:	4638      	mov	r0, r7
 800377a:	47c0      	blx	r8
 800377c:	3001      	adds	r0, #1
 800377e:	d103      	bne.n	8003788 <_printf_common+0xac>
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003788:	3501      	adds	r5, #1
 800378a:	e7c6      	b.n	800371a <_printf_common+0x3e>
 800378c:	18e1      	adds	r1, r4, r3
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	2030      	movs	r0, #48	; 0x30
 8003792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003796:	4422      	add	r2, r4
 8003798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800379c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a0:	3302      	adds	r3, #2
 80037a2:	e7c7      	b.n	8003734 <_printf_common+0x58>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4622      	mov	r2, r4
 80037a8:	4649      	mov	r1, r9
 80037aa:	4638      	mov	r0, r7
 80037ac:	47c0      	blx	r8
 80037ae:	3001      	adds	r0, #1
 80037b0:	d0e6      	beq.n	8003780 <_printf_common+0xa4>
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7d9      	b.n	800376a <_printf_common+0x8e>
	...

080037b8 <_printf_i>:
 80037b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037bc:	7e0f      	ldrb	r7, [r1, #24]
 80037be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c0:	2f78      	cmp	r7, #120	; 0x78
 80037c2:	4691      	mov	r9, r2
 80037c4:	4680      	mov	r8, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	469a      	mov	sl, r3
 80037ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ce:	d807      	bhi.n	80037e0 <_printf_i+0x28>
 80037d0:	2f62      	cmp	r7, #98	; 0x62
 80037d2:	d80a      	bhi.n	80037ea <_printf_i+0x32>
 80037d4:	2f00      	cmp	r7, #0
 80037d6:	f000 80d8 	beq.w	800398a <_printf_i+0x1d2>
 80037da:	2f58      	cmp	r7, #88	; 0x58
 80037dc:	f000 80a3 	beq.w	8003926 <_printf_i+0x16e>
 80037e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037e8:	e03a      	b.n	8003860 <_printf_i+0xa8>
 80037ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037ee:	2b15      	cmp	r3, #21
 80037f0:	d8f6      	bhi.n	80037e0 <_printf_i+0x28>
 80037f2:	a101      	add	r1, pc, #4	; (adr r1, 80037f8 <_printf_i+0x40>)
 80037f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003865 	.word	0x08003865
 8003800:	080037e1 	.word	0x080037e1
 8003804:	080037e1 	.word	0x080037e1
 8003808:	080037e1 	.word	0x080037e1
 800380c:	080037e1 	.word	0x080037e1
 8003810:	08003865 	.word	0x08003865
 8003814:	080037e1 	.word	0x080037e1
 8003818:	080037e1 	.word	0x080037e1
 800381c:	080037e1 	.word	0x080037e1
 8003820:	080037e1 	.word	0x080037e1
 8003824:	08003971 	.word	0x08003971
 8003828:	08003895 	.word	0x08003895
 800382c:	08003953 	.word	0x08003953
 8003830:	080037e1 	.word	0x080037e1
 8003834:	080037e1 	.word	0x080037e1
 8003838:	08003993 	.word	0x08003993
 800383c:	080037e1 	.word	0x080037e1
 8003840:	08003895 	.word	0x08003895
 8003844:	080037e1 	.word	0x080037e1
 8003848:	080037e1 	.word	0x080037e1
 800384c:	0800395b 	.word	0x0800395b
 8003850:	682b      	ldr	r3, [r5, #0]
 8003852:	1d1a      	adds	r2, r3, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	602a      	str	r2, [r5, #0]
 8003858:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800385c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003860:	2301      	movs	r3, #1
 8003862:	e0a3      	b.n	80039ac <_printf_i+0x1f4>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	6829      	ldr	r1, [r5, #0]
 8003868:	0606      	lsls	r6, r0, #24
 800386a:	f101 0304 	add.w	r3, r1, #4
 800386e:	d50a      	bpl.n	8003886 <_printf_i+0xce>
 8003870:	680e      	ldr	r6, [r1, #0]
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	2e00      	cmp	r6, #0
 8003876:	da03      	bge.n	8003880 <_printf_i+0xc8>
 8003878:	232d      	movs	r3, #45	; 0x2d
 800387a:	4276      	negs	r6, r6
 800387c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003880:	485e      	ldr	r0, [pc, #376]	; (80039fc <_printf_i+0x244>)
 8003882:	230a      	movs	r3, #10
 8003884:	e019      	b.n	80038ba <_printf_i+0x102>
 8003886:	680e      	ldr	r6, [r1, #0]
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800388e:	bf18      	it	ne
 8003890:	b236      	sxthne	r6, r6
 8003892:	e7ef      	b.n	8003874 <_printf_i+0xbc>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	1d19      	adds	r1, r3, #4
 800389a:	6029      	str	r1, [r5, #0]
 800389c:	0601      	lsls	r1, r0, #24
 800389e:	d501      	bpl.n	80038a4 <_printf_i+0xec>
 80038a0:	681e      	ldr	r6, [r3, #0]
 80038a2:	e002      	b.n	80038aa <_printf_i+0xf2>
 80038a4:	0646      	lsls	r6, r0, #25
 80038a6:	d5fb      	bpl.n	80038a0 <_printf_i+0xe8>
 80038a8:	881e      	ldrh	r6, [r3, #0]
 80038aa:	4854      	ldr	r0, [pc, #336]	; (80039fc <_printf_i+0x244>)
 80038ac:	2f6f      	cmp	r7, #111	; 0x6f
 80038ae:	bf0c      	ite	eq
 80038b0:	2308      	moveq	r3, #8
 80038b2:	230a      	movne	r3, #10
 80038b4:	2100      	movs	r1, #0
 80038b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038ba:	6865      	ldr	r5, [r4, #4]
 80038bc:	60a5      	str	r5, [r4, #8]
 80038be:	2d00      	cmp	r5, #0
 80038c0:	bfa2      	ittt	ge
 80038c2:	6821      	ldrge	r1, [r4, #0]
 80038c4:	f021 0104 	bicge.w	r1, r1, #4
 80038c8:	6021      	strge	r1, [r4, #0]
 80038ca:	b90e      	cbnz	r6, 80038d0 <_printf_i+0x118>
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	d04d      	beq.n	800396c <_printf_i+0x1b4>
 80038d0:	4615      	mov	r5, r2
 80038d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80038d6:	fb03 6711 	mls	r7, r3, r1, r6
 80038da:	5dc7      	ldrb	r7, [r0, r7]
 80038dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038e0:	4637      	mov	r7, r6
 80038e2:	42bb      	cmp	r3, r7
 80038e4:	460e      	mov	r6, r1
 80038e6:	d9f4      	bls.n	80038d2 <_printf_i+0x11a>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10b      	bne.n	8003904 <_printf_i+0x14c>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	07de      	lsls	r6, r3, #31
 80038f0:	d508      	bpl.n	8003904 <_printf_i+0x14c>
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	6861      	ldr	r1, [r4, #4]
 80038f6:	4299      	cmp	r1, r3
 80038f8:	bfde      	ittt	le
 80038fa:	2330      	movle	r3, #48	; 0x30
 80038fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003900:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003904:	1b52      	subs	r2, r2, r5
 8003906:	6122      	str	r2, [r4, #16]
 8003908:	f8cd a000 	str.w	sl, [sp]
 800390c:	464b      	mov	r3, r9
 800390e:	aa03      	add	r2, sp, #12
 8003910:	4621      	mov	r1, r4
 8003912:	4640      	mov	r0, r8
 8003914:	f7ff fee2 	bl	80036dc <_printf_common>
 8003918:	3001      	adds	r0, #1
 800391a:	d14c      	bne.n	80039b6 <_printf_i+0x1fe>
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	b004      	add	sp, #16
 8003922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003926:	4835      	ldr	r0, [pc, #212]	; (80039fc <_printf_i+0x244>)
 8003928:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800392c:	6829      	ldr	r1, [r5, #0]
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f851 6b04 	ldr.w	r6, [r1], #4
 8003934:	6029      	str	r1, [r5, #0]
 8003936:	061d      	lsls	r5, r3, #24
 8003938:	d514      	bpl.n	8003964 <_printf_i+0x1ac>
 800393a:	07df      	lsls	r7, r3, #31
 800393c:	bf44      	itt	mi
 800393e:	f043 0320 	orrmi.w	r3, r3, #32
 8003942:	6023      	strmi	r3, [r4, #0]
 8003944:	b91e      	cbnz	r6, 800394e <_printf_i+0x196>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	f023 0320 	bic.w	r3, r3, #32
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	2310      	movs	r3, #16
 8003950:	e7b0      	b.n	80038b4 <_printf_i+0xfc>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	f043 0320 	orr.w	r3, r3, #32
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	2378      	movs	r3, #120	; 0x78
 800395c:	4828      	ldr	r0, [pc, #160]	; (8003a00 <_printf_i+0x248>)
 800395e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003962:	e7e3      	b.n	800392c <_printf_i+0x174>
 8003964:	0659      	lsls	r1, r3, #25
 8003966:	bf48      	it	mi
 8003968:	b2b6      	uxthmi	r6, r6
 800396a:	e7e6      	b.n	800393a <_printf_i+0x182>
 800396c:	4615      	mov	r5, r2
 800396e:	e7bb      	b.n	80038e8 <_printf_i+0x130>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6826      	ldr	r6, [r4, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6028      	str	r0, [r5, #0]
 800397a:	0635      	lsls	r5, r6, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	d501      	bpl.n	8003984 <_printf_i+0x1cc>
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	e002      	b.n	800398a <_printf_i+0x1d2>
 8003984:	0670      	lsls	r0, r6, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0x1c8>
 8003988:	8019      	strh	r1, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	4615      	mov	r5, r2
 8003990:	e7ba      	b.n	8003908 <_printf_i+0x150>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	602a      	str	r2, [r5, #0]
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	2100      	movs	r1, #0
 800399e:	4628      	mov	r0, r5
 80039a0:	f7fc fc36 	bl	8000210 <memchr>
 80039a4:	b108      	cbz	r0, 80039aa <_printf_i+0x1f2>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b4:	e7a8      	b.n	8003908 <_printf_i+0x150>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0ab      	beq.n	800391c <_printf_i+0x164>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079b      	lsls	r3, r3, #30
 80039c8:	d413      	bmi.n	80039f2 <_printf_i+0x23a>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	4298      	cmp	r0, r3
 80039d0:	bfb8      	it	lt
 80039d2:	4618      	movlt	r0, r3
 80039d4:	e7a4      	b.n	8003920 <_printf_i+0x168>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d09b      	beq.n	800391c <_printf_i+0x164>
 80039e4:	3501      	adds	r5, #1
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	1a5b      	subs	r3, r3, r1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dcf2      	bgt.n	80039d6 <_printf_i+0x21e>
 80039f0:	e7eb      	b.n	80039ca <_printf_i+0x212>
 80039f2:	2500      	movs	r5, #0
 80039f4:	f104 0619 	add.w	r6, r4, #25
 80039f8:	e7f5      	b.n	80039e6 <_printf_i+0x22e>
 80039fa:	bf00      	nop
 80039fc:	08003e69 	.word	0x08003e69
 8003a00:	08003e7a 	.word	0x08003e7a

08003a04 <_putc_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460d      	mov	r5, r1
 8003a08:	4614      	mov	r4, r2
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	b118      	cbz	r0, 8003a16 <_putc_r+0x12>
 8003a0e:	6983      	ldr	r3, [r0, #24]
 8003a10:	b90b      	cbnz	r3, 8003a16 <_putc_r+0x12>
 8003a12:	f7ff fbab 	bl	800316c <__sinit>
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <_putc_r+0x84>)
 8003a18:	429c      	cmp	r4, r3
 8003a1a:	d124      	bne.n	8003a66 <_putc_r+0x62>
 8003a1c:	6874      	ldr	r4, [r6, #4]
 8003a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a20:	07d8      	lsls	r0, r3, #31
 8003a22:	d405      	bmi.n	8003a30 <_putc_r+0x2c>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	0599      	lsls	r1, r3, #22
 8003a28:	d402      	bmi.n	8003a30 <_putc_r+0x2c>
 8003a2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a2c:	f7ff fc3c 	bl	80032a8 <__retarget_lock_acquire_recursive>
 8003a30:	68a3      	ldr	r3, [r4, #8]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	60a3      	str	r3, [r4, #8]
 8003a38:	da05      	bge.n	8003a46 <_putc_r+0x42>
 8003a3a:	69a2      	ldr	r2, [r4, #24]
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	db1c      	blt.n	8003a7a <_putc_r+0x76>
 8003a40:	b2eb      	uxtb	r3, r5
 8003a42:	2b0a      	cmp	r3, #10
 8003a44:	d019      	beq.n	8003a7a <_putc_r+0x76>
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	701d      	strb	r5, [r3, #0]
 8003a4e:	b2ed      	uxtb	r5, r5
 8003a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a52:	07da      	lsls	r2, r3, #31
 8003a54:	d405      	bmi.n	8003a62 <_putc_r+0x5e>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	059b      	lsls	r3, r3, #22
 8003a5a:	d402      	bmi.n	8003a62 <_putc_r+0x5e>
 8003a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a5e:	f7ff fc24 	bl	80032aa <__retarget_lock_release_recursive>
 8003a62:	4628      	mov	r0, r5
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <_putc_r+0x88>)
 8003a68:	429c      	cmp	r4, r3
 8003a6a:	d101      	bne.n	8003a70 <_putc_r+0x6c>
 8003a6c:	68b4      	ldr	r4, [r6, #8]
 8003a6e:	e7d6      	b.n	8003a1e <_putc_r+0x1a>
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_putc_r+0x8c>)
 8003a72:	429c      	cmp	r4, r3
 8003a74:	bf08      	it	eq
 8003a76:	68f4      	ldreq	r4, [r6, #12]
 8003a78:	e7d1      	b.n	8003a1e <_putc_r+0x1a>
 8003a7a:	4629      	mov	r1, r5
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f7ff f99a 	bl	8002db8 <__swbuf_r>
 8003a84:	4605      	mov	r5, r0
 8003a86:	e7e3      	b.n	8003a50 <_putc_r+0x4c>
 8003a88:	08003e18 	.word	0x08003e18
 8003a8c:	08003e38 	.word	0x08003e38
 8003a90:	08003df8 	.word	0x08003df8

08003a94 <__sread>:
 8003a94:	b510      	push	{r4, lr}
 8003a96:	460c      	mov	r4, r1
 8003a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9c:	f000 f894 	bl	8003bc8 <_read_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	bfab      	itete	ge
 8003aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8003aa8:	181b      	addge	r3, r3, r0
 8003aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aae:	bfac      	ite	ge
 8003ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ab2:	81a3      	strhlt	r3, [r4, #12]
 8003ab4:	bd10      	pop	{r4, pc}

08003ab6 <__swrite>:
 8003ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aba:	461f      	mov	r7, r3
 8003abc:	898b      	ldrh	r3, [r1, #12]
 8003abe:	05db      	lsls	r3, r3, #23
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	4616      	mov	r6, r2
 8003ac6:	d505      	bpl.n	8003ad4 <__swrite+0x1e>
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	2302      	movs	r3, #2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f000 f868 	bl	8003ba4 <_lseek_r>
 8003ad4:	89a3      	ldrh	r3, [r4, #12]
 8003ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	4632      	mov	r2, r6
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aea:	f000 b817 	b.w	8003b1c <_write_r>

08003aee <__sseek>:
 8003aee:	b510      	push	{r4, lr}
 8003af0:	460c      	mov	r4, r1
 8003af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af6:	f000 f855 	bl	8003ba4 <_lseek_r>
 8003afa:	1c43      	adds	r3, r0, #1
 8003afc:	89a3      	ldrh	r3, [r4, #12]
 8003afe:	bf15      	itete	ne
 8003b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b0a:	81a3      	strheq	r3, [r4, #12]
 8003b0c:	bf18      	it	ne
 8003b0e:	81a3      	strhne	r3, [r4, #12]
 8003b10:	bd10      	pop	{r4, pc}

08003b12 <__sclose>:
 8003b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b16:	f000 b813 	b.w	8003b40 <_close_r>
	...

08003b1c <_write_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4d07      	ldr	r5, [pc, #28]	; (8003b3c <_write_r+0x20>)
 8003b20:	4604      	mov	r4, r0
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	2200      	movs	r2, #0
 8003b28:	602a      	str	r2, [r5, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7fc fd69 	bl	8000602 <_write>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_write_r+0x1e>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_write_r+0x1e>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000128 	.word	0x20000128

08003b40 <_close_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4d06      	ldr	r5, [pc, #24]	; (8003b5c <_close_r+0x1c>)
 8003b44:	2300      	movs	r3, #0
 8003b46:	4604      	mov	r4, r0
 8003b48:	4608      	mov	r0, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f7fd f8c3 	bl	8000cd6 <_close>
 8003b50:	1c43      	adds	r3, r0, #1
 8003b52:	d102      	bne.n	8003b5a <_close_r+0x1a>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	b103      	cbz	r3, 8003b5a <_close_r+0x1a>
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	bd38      	pop	{r3, r4, r5, pc}
 8003b5c:	20000128 	.word	0x20000128

08003b60 <_fstat_r>:
 8003b60:	b538      	push	{r3, r4, r5, lr}
 8003b62:	4d07      	ldr	r5, [pc, #28]	; (8003b80 <_fstat_r+0x20>)
 8003b64:	2300      	movs	r3, #0
 8003b66:	4604      	mov	r4, r0
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	f7fd f8be 	bl	8000cee <_fstat>
 8003b72:	1c43      	adds	r3, r0, #1
 8003b74:	d102      	bne.n	8003b7c <_fstat_r+0x1c>
 8003b76:	682b      	ldr	r3, [r5, #0]
 8003b78:	b103      	cbz	r3, 8003b7c <_fstat_r+0x1c>
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	bd38      	pop	{r3, r4, r5, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000128 	.word	0x20000128

08003b84 <_isatty_r>:
 8003b84:	b538      	push	{r3, r4, r5, lr}
 8003b86:	4d06      	ldr	r5, [pc, #24]	; (8003ba0 <_isatty_r+0x1c>)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	f7fd f8bd 	bl	8000d0e <_isatty>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_isatty_r+0x1a>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_isatty_r+0x1a>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	20000128 	.word	0x20000128

08003ba4 <_lseek_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4d07      	ldr	r5, [pc, #28]	; (8003bc4 <_lseek_r+0x20>)
 8003ba8:	4604      	mov	r4, r0
 8003baa:	4608      	mov	r0, r1
 8003bac:	4611      	mov	r1, r2
 8003bae:	2200      	movs	r2, #0
 8003bb0:	602a      	str	r2, [r5, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	f7fd f8b6 	bl	8000d24 <_lseek>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d102      	bne.n	8003bc2 <_lseek_r+0x1e>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	b103      	cbz	r3, 8003bc2 <_lseek_r+0x1e>
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
 8003bc4:	20000128 	.word	0x20000128

08003bc8 <_read_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	; (8003be8 <_read_r+0x20>)
 8003bcc:	4604      	mov	r4, r0
 8003bce:	4608      	mov	r0, r1
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f7fd f860 	bl	8000c9c <_read>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d102      	bne.n	8003be6 <_read_r+0x1e>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	b103      	cbz	r3, 8003be6 <_read_r+0x1e>
 8003be4:	6023      	str	r3, [r4, #0]
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20000128 	.word	0x20000128

08003bec <_init>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	bf00      	nop
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr

08003bf8 <_fini>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	bf00      	nop
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr
